# types https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.languageserver.protocol.completionitemkind?view=visualstudiosdk-2017

tp2-file:
  type: 14 # keyword
  items:
    - name: BACKUP
      doc: The BACKUP declaration tells WeiDU where to put backed-up versions of files that would be overwritten so that they can be uninstalled later. This directory will be created automatically if it is missing.
    - name: AUTHOR
      doc: The AUTHOR directive gives an email address for users to send bugs to if there are problems during the installation. You may use SUPPORT as an alias for AUTHOR. The TP2_AUTHOR variable is set to the "emailAddress" value.

tp2-flag:
  type: 14 #keyword
  items:
    - name: AUTO_TRA
      detail: AUTO_TRA path
      doc: The AUTO_TRA flag is used with the COMPILE TP2 Action. It automatically loads TRA files that match your D files. The TRA file loaded by AUTO_TRA takes precedence over all other TRA files.
    - name: ALLOW_MISSING
      detail: ALLOW_MISSING file list
      doc: Allows you to specify files that can be missing (when you try to copy them or reference them from D files). Empty versions of those files will be created on demand. Try to use ACTION_IF instead of this.
    - name: ASK_EVERY_COMPONENT
      doc: This flag instructs WeiDU to ask about installing every component in this TP2 file individually, rather than asking questions like "Would you like to install them all?"
    - name: ALWAYS
      detail: ALWAYS TP2 Action list END
      doc: This flag specified a TP2 Action that is executed at the beginning of each Component, before the component-specific TP2 Action.
    - name: README
      detail: README file list
      doc: The given file is displayed to the user after choosing the language, but before installing any component. If more than one file name is provided, they are checked for existence in the order they're provided, and the first available one will be opened. If you wish to open multiple readme files, use multiple README statements.

    - name: UNINSTALL_ORDER
      detail: UNINSTALL_ORDER String list
      doc: "Do not use this without a real reason.
            
            Specifies the order in which uninstallation operations are handled. The operations are STRSET (uninstall STRING_SET and ALTER_TLK), MOVE (uninstall MOVE), AT (perform AT_UNINSTALL and AT_INTERACTIVE_UNINSTALL) and COPY (uninstall all various file operations).
            
            If not specified, the order is MOVE - STRSET - COPY - AT.
            
            If this is specified, then ALL operations must be specified (if any isn't, a warning is printed). Please note that this means that your mod might start printing warnings three years down the line if a new uninstall action is coded."

    - name: MODDER
      detail: MODDER String list
      doc: Enable additional debug info. By default, these messages are verbose but do not halt the installation. Some options are configurable, see the MODDER in-depth description.
    - name: VERSION
      detail: VERSION String
      doc: "\"String\" (variables evaluated) will be appended to every component's name in the weidu.log file."
    - name: SCRIPT_STYLE
      detail: SCRIPT_STYLE style
      doc: This flag determines how WeiDU will read in BAF and BCS files and write out BAF and BCS files. Possible options for "style" include BG (the default), IWD1, IWD2, and PST. See the Scripting Styles tutorial.
    - name: NO_IF_EVAL_BUG
      doc: This action solves a long-standing bug with the IF_EVAL action. Since solving it is not directly possible without damaging backwards compatibility, you have to use this action (preferably in an ALWAYS statement) to solve the bug for yourself. IF_EVAL will not work with this action in the TP2 - use PATCH_IF and BUT_ONLY_IF_IT_CHANGES instead.
    - name: QUICK_MENU
      detail: QUICK_MENU lots of parameters
      doc: Used to specify one or more groups of components that can be installed in a single step. See the QUICK_MENU tutorial for syntax, usage instructions, and caveats.
    - name: AUTO_EVAL_STRINGS
      doc: EVALUATE_BUFFER is used whenever variables are evaluated. In particular, you can now "forget" about using it in FUNCTIONs and arrays. Note, TP2 defines multiple instances of EVALUATE_BUFFER, like EVALUATE_BUFFER, but these are not affected by AUTO_EVAL_STRINGS.

tp2-language:
  type: 14 #keyword
  items:
    - name: LANGUAGE
      detail: LANGUAGE languageName languageDirectory defaultLanguageTRA list
      doc: The languageName is the name of the language as it is presented to the user. "American English" and "Italiano" are examples. The languageDirectory is the name of the subdirectory in which you have stored the TRA files for that language. Examples include "american" and "spanish". The variable named LANGUAGE is set to languageDirectory if the user selects this language.. Finally, all of the TRA files in the defaultLanguageTRA list are loaded as soon as the user selects a language.

tp2-component-flag:
  type: 14 # keyword
  items:
    - name: DEPRECATED
      detail: DEPRECATED String
      doc: Mark the given component as deprecated. If it is currently installed, it will be uninstalled and the given String will be displayed. The user will never be asked to install the given component -- it will be silently skipped in all listings. However, it will still take up a "component number".
    - name: REQUIRE_COMPONENT
      detail: REQUIRE_COMPONENT modToUninstall modComponent String
      doc: Make this component so that it can only be installed if another component is installed. If that other component is not installed, the String will be displayed and the user will not get a chance to install this component. This is in some sense the opposite of the UNINSTALL TP2 Action. For example, REQUIRE_COMPONENT "setup-ease.tp2" "0" "You must have infinite stacking installed!" prevents a component from being installed unless the infinite stacking part of the Ease-of-Use mod is installed.
    - name: FORBID_COMPONENT
      detail: FORBID_COMPONENT modToUninstall modComponent String
      doc: Make this component so that it can only be installed if another component is not installed. This does the opposite of REQUIRE_COMPONENT.
    - name: REQUIRE_PREDICATE
      detail: REQUIRE_PREDICATE value String
      doc: This component can only be installed if the value evaluates to true (non-zero).
    - name: SUBCOMPONENT
      detail: SUBCOMPONENT String [ value ]
      doc: At most one component of the given subcomponent group can be installed at any time. All subcomponents of the same group are listed together for the user. See the SUBCOMPONENT tutorial.
    - name: FORCED_SUBCOMPONENT
      detail: FORCED_SUBCOMPONENT String [ value ]
      doc: See the SUBCOMPONENT tutorial.
    - name: GROUP
      detail: GROUP String [ value ]
      doc: Used for grouping components; the user will be asked to display these or not. See the GROUP tutorial.
    - name: INSTALL_BY_DEFAULT
      doc: If WeiDU would ask the user whether to install this component or not, and this component is not already installed, WeiDU will instead install it by default (without asking the user). If there is an error or the component is already installed, WeiDU will ask the user. The --uninstall command-line argument overrides this. See also REQUIRE_COMPONENT and ALWAYS.
    - name: DESIGNATED
      detail: DESIGNATED forcedNumber
      doc: Normally module components are numbered based on their order in the TP2 file (starting from 0). This flag sets the current component number to forcedNumber. The next component (if it lacks a DESIGNATED flag) will be forcedNumber+1. You can easily shoot yourself in the foot by setting forcedNumber too low (e.g., so that multiple components have the same number).
    - name: NO_LOG_RECORD
      doc: Normally all module components are recorded in WeiDU.log and can be uninstalled later. This component flag prevents this component from writing a log record when it is successfully installed. As a result it is “invisible” to WeiDU, can be installed multiple times, and cannot be uninstalled with WeiDU. Do not use this flag without a real reason.
    - name: LABEL
      detail: LABEL String
      doc: Defines the LABEL, or unique textual identifier, of this module. Any component can have zero or more LABELs. Will print a warning if two components in the same tp2 share a LABEL. Do not alter a component's LABEL once you publish that mod.


tp2-action:
  type: 3 # function
  items:
    - name: COPY
      detail: COPY optNoBackup optGlob fromFile toFile ... patch list when list
      doc: 'You may specify as many fromFile-toFile pairs as you like. Each fromFile is copied to its associated toFile. If there are any WeiDU variables inside explicit %s in toFile or fromFile, they are replaced by their values. All of the patches are applied. If there are any when conditions and any of them are false, the copy does not happen. A typical example is COPY "mymod/sword.itm" "override/m#sword.itm".
      COPY commands set the user-defined SOURCE_DIRECTORY, SOURCE_FILESPEC, SOURCE_FILE, SOURCE_RES, SOURCE_EXT, DEST_DIRECTORY, DEST_FILESPEC, DEST_FILE,DEST_RES and DEST_EXT variables based on fromFile and toFile as follows. If fromFile is mymod/cre/bigboss.cre, then SOURCE_DIRECTORY is mymod/cre, SOURCE_FILESPEC is mymod/cre/bigboss.cre, SOURCE_FILE is bigboss.cre, SOURCE_RES is bigboss and SOURCE_EXT is cre. The DEST_ variables are similarly based on toFile. In addition, SOURCE_SIZE is set to the size (in bytes) of the source file.
      This is generally only useful if you have enabled globbing. Any user-defined variables in toFile are replaced with their values. You may also reference these variables in patches.'

    - name: COPY_EXISTING
      detail: COPY_EXISTING optNoBackup fromFile toFile ...
      doc: Behaves like COPY except that the fromFiles are drawn from the game BIFFs or override directory. This is useful for making changes to files that other mods may have changed as well.

    - name: COPY_EXISTING_REGEXP
      detail: COPY_EXISTING_REGEXP optNoBackup optGlob fromFileRegexp toDirOrFile ... patch list when list
      doc: "Behaves like COPY_EXISTING except that fromFileRegexp may contain regular expressions (regexps). Additionally, toDirOrFile may reference matched groups in fromFileRegexp with \\1, \\2, etc. If toDirOrFile is an existing directory or lacks a file extension, it will be treated as a directory and all matching files in the game BIFFs will be copied there. Otherwise, toDirOrFile will be treated as a file. If GLOB is specified, matching files in override will also be patched and copied. If a file appears in both the BIFFs and the override folder, it will only be copied once. For example, if HARM.ITM is in the BIFFs and HARM2.ITM is in override, this code will copy and patch them both:
      COPY_EXISTING_REGEXP GLOB ~HARM.*.ITM~ ~override~
        SAY // ... whatever"

    - name: COPY_LARGE
      detail: COPY_LARGE optNoBackup optGlob fromFile toFile ...
      doc: "Behaves like COPY except that the fromFiles can be of arbitrary size (the limit should be over a Gigabyte), but on the other side of the coin you can't apply patches to the copying.
      Like COPY, COPY_LARGE sets the variables SOURCE_DIRECTORY, SOURCE_FILESPEC, SOURCE_FILE, SOURCE_RES, SOURCE_EXT, SOURCE_SIZE, DEST_DIRECTORY, DEST_FILESPEC, DEST_FILE, DEST_RES and DEST_EXT."

    - name: COPY_RANDOM
      detail: COPY_RANDOM ( file1 list ) [ ( fileN list ) list ] patch list when list
      doc: This command works like COPY_EXISTING but the destination for any given source file in the file1-list is some other different file in the file1-list. Similarly, the destination for any file in the fileN-list is some other file in the fileN-list. This allows you to randomly shuffle categories of game resources.

    - name: COPY_ALL_GAM_FILES
      detail: COPY_ALL_GAM_FILES patch list when list
      doc: Copies Default.gam from the biff and the ones in the save/ and mpsave/ saved games, applying the list of patches. If there are any when conditions and any of them are false, the copy does not happen. NO BACKUP is applied to files in the save/ and mpsave/ directories. The savegame from the biffs is backed up as usual.

    - name: MOVE
      detail: MOVE optNoBackup fromFile toFile ... ( directory-file-regexp ) toFile ...
      doc: "If optNoBackup is specified, in addition to the usual effects, fromFile may be moved to toFile even if one or both contain spaces in their names. Do not use this feature without a real reason. You may specify as many fromFile--toFile pairs as you like. Each fromFile is moved to its associated toFile.
      
      If fromFile is a file, toFile can be a file or a directory; if fromFile is a directory, toFile must be a directory; if fromFile doesn't exist, an error is raised. If toFile already exists, MOVE is equivalent to COPY_LARGE.
      
      MOVE also supports the directory-file-regexp construct in place of fromFile; in this form, it must be wrapped in parenthesis, toFile must be a directory, and no error is raised if no file is matched. Examples:

      MOVE ~sourceFile~ ~destinationFile~
      MOVE ~sourceFile~ ~destinationDirectory~
      MOVE ~sourceDirectory~ ~destinationDirectory~
      MOVE (~sourceDirectory~ ~^[A-M].*\\.itm$~) ~destinationDirectory

      Safety notes: when uninstalling, MOVE is restored first, then all generic actions are restored, then AT_*_UNINSTALL is handled. As such, do your AT_NOW, then do your COPY, then do your MOVEs (exception: if you MOVE for biffing purposes, it is safe to call MAKE_BIFF after MOVE. Do not use the --make-biff command-line argument)."

    - name: DELETE
      detail: DELETE optNoBackup file ...
      doc: Removes one or more files from the file system. If file is a directory, it will be recursively deleted together with anything it contains. Do not use without a real reason.

    - name: DISABLE_FROM_KEY
      detail: DISABLE_FROM_KEY file ...
      doc: Removes one or more files from the chitin.key, while leaving the containing bif file itself untouched. Do not use without a real reason.

    - name: CREATE
      detail: CREATE type [ VERSION version ] resref [ patch list ]
      doc: Creates a new file of the specified type with the resource reference resref and a correct file extension for the file type. If there are any patches, they are applied to contents of the new file. Any existing file with the same name will be backed up, as normal. The file will be created structurally correct but will contain no non-zero data aside from the structural details. The file version will be native to the current game, or default to "V1.0", but can be overridden with the VERSION option, which takes a string specifying the desired version. CREATE supports the file types ARE, CRE, EFF, ITM, SPL and STO and all their known file versions (aside from EFF V1.0, which is never found as a file).

    - name: COMPILE
      detail: COMPILE [ EVALUATE_BUFFER ] sourceFile list [ patch list ] [ USING traFile list ]
      doc: "This command compiles D and BAF source files. If sourceFile is a directory, all D and BAF files within that directory are processed individually. If there is EVALUATE_BUFFER, all %variables% in the files are substituted with their values.
      After the special EVALUATE_BUFFER is executed, all other patches are executed.

      First, this loads all of the traFiles presented. If any of their paths contain %s, the %s is replaced with the languageDirectory of from the Language the user selected. If you specified AUTO_TRA mymod/%s above, WeiDU will also attempt to load mymod/languageDirectory/sourceFile.tra for every sourceFile in the list. Once all of the TRA files are loaded, the D and BAF files are compiled. Any DLGs or BCSs they create or modify are placed in the override directory."

    - name: CLEAR_MEMORY
      doc: Removes all variables from the memory, then reloads the automatic ones (TP2_AUTHOR, TP2_FILE_NAME, TP2_BASE_NAME, MOD_FOLDER, LANGUAGE, WEIDU_ARCH, WEIDU_OS, COMPONENT_NUMBER, all numeric constants such as NAME1, the soundsets, or SCRIPT_OVERRIDE). INTERACTIVE is automatically set when you call the next component. Do not use this feature without a real reason.

    - name: CLEAR_ARRAYS
      doc: Removes the names and contents of all arrays from the memory (while still keeping their values).
    - name: CLEAR_CODES
      doc: Removes all loaded functions and macros from the memory.
    - name: CLEAR_INLINED
      doc: Removes all inlined files from the memory.
    - name: CLEAR_EVERYTHING
      doc: Runs CLEAR_MEMORY, CLEAR_ARRAY, CLEAR_CODES and CLEAR_INLINED.
    - name: CLEAR_IDS_MAP
      doc: Force WeiDU to remove all loaded IDSes in memory (otherwise, if you compile a script, append to an IDS and compile another script, WeiDU will not handle the new IDS entry).
    - name: ACTION_CLEAR_ARRAY
      detail: ACTION_CLEAR_ARRAY String
      doc: "'Forgets' that the array string exists until its values are recalled. The actual variables' values are kept, the only effect is that PHP_EACH will not consider old values."

    - name: SILENT
      doc: Makes WeiDU skip all messages; it's reenabled once a component is installed (or fails to), or a PRINT, PATCH_PRINT, VERBOSE or PATCH_VERBOSE is found.
    - name: VERBOSE
      doc: Undoes the latest SILENT command.
    - name: MKDIR
      detail: MKDIR dirName list
      doc: Instructs WeiDU to create all of the directories in the list.
    - name: RANDOM_SEED
      detail: RANDOM_SEED someInteger
      doc: Sets the random number generator seed to someInteger. This allows you to get reproducible results when using random functions. If you specify a string that is not a valid integer the system initializes itself (e.g., by using the current time).
    - name: ACTION_READLN
      detail: ACTION_READLN variable
      doc: Waits for the user to provided an enter-terminated string and store it in variable. Said string will be stored and re-used during non-interactive reinstalls. See the READLN tutorial.

    - name: APPEND
      detail: APPEND optNoBackup filename newText when list [ KEEP_CRLF ]
      doc: "If there are no when conditions or they are all true, the ASCII text newText is appended to the existing file filename (which is read from the game BIFFs or the override folder). Any variables in newText are replaced by their values.
      If KEEP_CRLF is not present, double newlines in the file (but not in newText) will be removed; otherwise, they're kept.
      In any event, if the file ends with CRLF only newText and an ending CRLF will be written; otherwise, if the file does not end with CRLF, it will be written before newText."

    - name: APPEND_OUTER
      detail: APPEND_OUTER optNoBackup filename newText when list [ KEEP_CRLF ]
      doc: "If there are no when conditions or they are all true, the ASCII text newText is appended to the existing file filename (which is treated as a path to a file). Any variables in newText are replaced by their values.
      If KEEP_CRLF is not present, double newlines in the file (but not in newText) will be removed; otherwise, they're kept.
      In any event, if the file ends with CRLF only newText and an ending CRLF will be written; otherwise, if the file does not end with CRLF, it will be written before newText."

    - name: APPEND_COL
      detail: APPEND_COL optNoBackup filename newText [ prepend ] when list
      doc: "If there are no when conditions or they are all true, the string newText is appended column-wise to the existing file filename (which is read from the game BIFFs or the override folder).
      You must have the same number of whitespace-separated words in newText as there are columns in filename. Prepend empty cells are assumed to be at the beginning of newText. A cell containing exactly $ is printed as empty."

    - name: APPEND_COL_OUTER
      detail: APPEND_COL_OUTER optNoBackup filename newText [ prepend ] when list
      doc: "If there are no when conditions or they are all true, the string newText is appended column-wise to the existing file filename (which is treated as a path to a file).
      You must have the same number of whitespace-separated words in newText as there are columns in filename. Prepend empty cells are assumed to be at the beginning of newText. A cell containing exactly $ is printed as empty."

    - name: EXTEND_TOP
      detail: EXTEND_TOP existingBCS newFile patch list [ USING traName list ]
      doc: Loads existingFile (which may be BAF or BCS), prepends all of newBCS to the top of it, applies all of the patches, and then copies it to the override folder. User variables in the filenames existingFile and newFile are replaced by their values. Use EVALUATE_BUFFER if you want to evaluate variables inside the body of newFile before parsing it.

    - name: EXTEND_BOTTOM
      detail: EXTEND_BOTTOM existingBCS newFile patch list [ USING traName list ]
      doc: As EXTEND_TOP, but the newFile file is put at the bottom of the existingBCS file. User variables in the filenames existingFile and newFile are replaced by their values.

    - name: EXTEND_TOP_REGEXP
      detail: EXTEND_TOP_REGEXP existingBCSregexp newFile patch list [ USING traName list ]
      doc: As EXTEND_TOP, but the newFile file is put at the top of the every BCS file that matches the regexp existingBCSregexp.
    - name: EXTEND_BOTTOM_REGEXP
      detail: EXTEND_BOTTOM_REGEXP existingBCSregexp newFile patch list [ USING traName list ]
      doc: See EXTEND_TOP_REGEXP.

    - name: ACTION_IF
      detail: ACTION_IF value THEN BEGIN TP2 Action list END [ ELSE BEGIN TP2 Action list END ]
      doc:  If value evaluates to true (non-zero), the TP2 Actions in the THEN-branch are executed. Otherwise, if an ELSE-branch is present, its commands are executed. Otherwise nothing happens.
    - name: ACTION_MATCH
      detail: ACTION_MATCH value WITH [ guardvalue ... [ WHEN conditionvalue ] BEGIN TP2 Action list END ] ... DEFAULT TP2 Action list END
      doc: The value is case-insensitively matched against the guard values. If value matches one of the guard values, the associated action list is executed. If there is a condition, it additionally needs to evaluate to true for the values to match. If none of the values match, the DEFAULT action list is executed. See the MATCH and TRY tutorial for additional information.

    - name: ACTION_TRY
      detail: ACTION_TRY TP2 Action list WITH [ guardvalue ... [ WHEN conditionvalue ] BEGIN TP2 Action list END ] ... DEFAULT TP2 Action list END
      doc: If evaluating the action list results in an error, the error is matched, as per ACTION_MATCH. N.B. TRY is generally not safe to use because many errors are intended to be fatal and if the mod installation were to proceed anyway, it might do so in an inconsistent state, with resource leaks or with other errors. ACTION_RERAISE mitigates or eliminates these risks, since the unsafe part is allowing the installation to continue and re-raising the error allows it to fail, like intended. See the MATCH and TRY tutorial for additional information.

    - name: ACTION_RERAISE
      doc: When used inside an ACTION_TRY, the matched error is re-raised. See the MATCH and TRY tutorial for additional information.

    - name: AT_EXIT
      detail: AT_EXIT commandToRun [ EXACT ]
      doc: "Whenever this component attempts to be installed, commandToRun is executed. Variables (e.g., %LANGUAGE%) in the string commandToRun are replaced by their values. Note that the command is executed even if the component does not install correctly, so AT_EXIT should probably be the last command in a component.
      
      If commandToRun consists of a single TP2 filename, WeiDU will enqueue that TP2 file and run it when the current one is done (asking the user all the standard questions about languages and which components to install).

      If commandToRun consists of the word VIEW followed by a file, a system-specific viewer will be used to present the file to the user. For example, on Windows systems notepad will be used to view txt files and a web browser will be used to view html files. Note: also NOTEPAD and EXPLORER work like this, but use of those are reserved to differently able modders.
      Otherwise, commandToRun is executed by the underlying operating system (and is thus system dependant). If you want to do something that WeiDU doesn't handle, like extracting WAVs from an MP3, make a batch file and run it from here.
      Slashes and backslashes will be converted appropriately for the underlying operating system. If EXACT is specified, / and \ will instead be preserved as they are. The most common usage is:

        AT_INTERACTIVE_EXIT ~VIEW mymod\\README.txt~

      This causes your README file to be displayed using a system appropriate viewer. Here's a more complicated example that pulls up a language-specific README if one is available:

        ACTION_IF FILE_EXISTS ~mymod\\README.%LANGUAGE%.txt~ THEN BEGIN
          AT_INTERACTIVE_EXIT ~VIEW mymod\\README.%LANGUAGE%.txt~
        END ELSE BEGIN
          AT_INTERACTIVE_EXIT ~VIEW mymod\\README.txt~
        END"

    - name: AT_INTERACTIVE_EXIT
      detail: AT_INTERACTIVE_EXIT commandToRun [ EXACT ]
      doc: As AT_EXIT, but the command is only executed if the user specifically asked for the component to be installed or upgraded.
    - name: AT_UNINSTALL
      detail: AT_UNINSTALL commandToRun [ EXACT ]
      doc: As AT_EXIT, but when this component is removed, commandToRun is executed.
    - name: AT_INTERACTIVE_UNINSTALL
      detail: AT_INTERACTIVE_UNINSTALL commandToRun [ EXACT ]
      doc: As AT_EXIT, but whenever the user specifically asks for this component to be removed, commandToRun is executed. Only the %LANGUAGE% variable is guaranteed to be replaced, so do not count on any others.
    - name: AT_UNINSTALL_EXIT
      detail: AT_UNINSTALL_EXIT commandToRun [ EXACT ]
      doc: As AT_UNINSTALL, but executed at the end of the WeiDU run (after printing 'SUCCESFULLY INSTALLED xyz').
    - name: AT_INTERACTIVE_UNINSTALL_EXIT
      detail: AT_INTERACTIVE_UNINSTALL_EXIT commandToRun [ EXACT ]
      doc: As AT_UNINSTALL_EXIT, but only whenever the user specifically asks for this component to be removed.
    - name: AT_NOW
      detail: AT_NOW [ variable ] commandToRun [ EXACT ]
      doc: As AT_EXIT, but commandToRun is executed when found, rather than at the end of the installation. Use with oggdec, tisunpack, wav2acm... but not with readmes (you'll create dozens of windows), nor with --make-biff (you'll crash the installation). If the optional variable is provided, a TP2 variable is of that name is assigned the return value of commandToRun.
    - name: AT_INTERACTIVE_NOW
      detail: AT_INTERACTIVE_NOW [ variable ] commandToRun [ EXACT ]
      doc: As AT_NOW, but commandToRun is executed only if the installation is run interactively.

    - name: MAKE_BIFF
      detail: MAKE_BIFF name-of-biff BEGIN directory-file-regexp list END
      doc: Create a biff Data/name-of-biff.bif from the files that can be matched by directory-file-regexp. The chitin.key file is restored as a normal file, and reloaded whenever the component is installed or uninstalled (which means that its contents will be available exactly when the biff exists), while the .bif file itself is deleted or on uninstall as usual.
    - name: LOAD_TRA
      detail: LOAD_TRA traName list
      doc: Loads all traName files (variable substitution is done; the file can be inlined) to be used in the following tp2 actions, as if you had declared them in LANGUAGE.
    - name: WITH_TRA
      detail: WITH_TRA traName list BEGIN TP2 Action list END
      doc: Creates a new TRA scope copied from the surrounding scope, loads all traName files (variable substitution is done; the file can be inlined) and evaluates the TP2 Actions. When WITH_TRA exits, the new TRA scope is discarded, that is, all TRA changes made by WITH_TRA or any of its enclosed actions are forgotten.
    - name: WITH_SCOPE
      detail: WITH_SCOPE BEGIN TP2 Action list END
      doc: Creates a new variable scope copied from the surrounding scope and evaluates the TP2 Actions inside the new scope. When WITH_SCOPE exits, the new scope is discarded, all new variables defined inside the scope and all changes to existing variables are forgotten.
    - name: UNINSTALL
      detail: UNINSTALL modToUninstall modComponent
      doc: If the given component of the given mod is currently installed, uninstall it before proceeding. Do not use this action without a real reason. This should only be used if you release a new version of a component under a new name. For example, many Tactics Mod components replace old Solaufein mod components. In order to prevent such a component from being installed twice, the Tactics version uninstalls the Solaufein version.

    - name: COPY_KIT
      detail: COPY_KIT oldKit newKit ( diffName diffValue list )
      doc: "Copies a copy of the oldKit kit called newKit. This copy is non-player selectable, while all other fields can be edited by setting diffName to the field to be changed and diffValue to the new value. Valid values for diffName are: clasweap, weapprof, abclasrq, abclsmod, abdcdsrq, abdcscrq, dualclas, alignmnt, clab, lower, mixed, help, luabbr, 25stweap, unusabilities.
      Currently, lower, mixed and help can only be numbers referring to a TLK string. Unusabilities requires to be both kit and class unusables, there isn't a way to BAND or BOR them."

    - name: ADD_KIT
      detail: ADD_KIT internalKitName String1 String2 String3 String4 String6 String7 String8 String9 String10 String11 String12 String13 SAY text1 SAY text2 SAY text3
      doc: "This command allows you to add new kits to the BGII. See the example file mymod.tp2 or the tutorial at http://gibberlings3.net/forums/index.php?showtopic=584 for information on how to do this.
      ADD_KIT sets the variable %internalKitName% to the number your kit occupies in kitlist.2da. This value is exactly 0x4000 less than the number your kit is assigned in kit.ids. Also observe that the kit DWORD in the CRE file format uses a reversed WORD order, unlike all other fields in the CRE file format."

    - name: ADD_MUSIC
      detail: ADD_MUSIC internalMusicName newMUSFile
      doc: "newMUSFile is copied to the music directory and added to songlist.2da under the name internalMusicName. The variable %internalMusicName% is set to the number of this new entry in songlist.2da. If newMUSFile already exists, the variable %internalMusicName% is set to the existing entry in songlist.2da and all other operations are skipped. Variables are evaluated.
      Some versions of the Infinity Engine cannot handle more than 100 entries in songlist.2da. ADD_MUSIC will fail under those circumstances unless the appropriate versions of ToB Hacks or ToBEx are installed or the game is GemRB or BGEE."

    - name: ADD_SCHOOL
      detail: ADD_SCHOOL schoolName removalString
      doc: Creates a new (guaranteed-unique) spell school (as per mschool.2da), associate removalString (can be a tra reference) to its removal, and sets the schoolName variable to the school identifier. If mschool.2da already contains schoolName, the variable is set to the school's current identifier and no other operation is performed.

    - name: ADD_SECTYPE
      detail: ADD_SECTYPE sectypeName removalString
      doc: Creates a new (guaranteed-unique) spell secondary type (as per msectype.2da), associate removalString (can be a tra reference) to its removal, and sets the sectypeName variable to the sectype identifier. If msectype.2da already contains sectypeName, the variable is set to the sectype's current identifier and no other operation is performed.

    - name: ADD_AREA_TYPE
      detail: ADD_AREA_TYPE areaTypeName
      doc: "Adds a new (guaranteed-unique) area type to areatype.ids, and sets the areaTypeName variable to the index of the bit the type is associated with: the type can be set with WRITE_SHORT 0x48 THIS | (1 << areaTypeName). If areatype.ids already contains areaTypeName, the variable is set to the type's current identifier and no other operation is performed.
      
      Also note that only 8 area types can be added to an unmodded installation of BG2; as such, don't add a new area type type unless you really need it (most likely, another modder is already using a type with a similar name, and you can share the type between your mods without issue)."

    - name: ADD_PROJECTILE
      detail: ADD_PROJECTILE modpath/PROName.PRO
      doc: Appends an entry for PROName to PROJECTL.IDS and assigns it the next available ProRef number. Then copies the file modpath/PROName.PRO to the override folder. The new ProRef number can be accessed through the variable %PROName% and used to updated the Projectile type field of an ITM or SPL file's Item Ability or Spell Ability sub-structures.

    - name: ADD_SPELL
      detail: ADD_SPELL newSPLfile type level idsName patch list [ IF_EXISTING patch list END ] [ ON_DISABLE patch list END ]
      doc: "Adds newSPLfile as a spell of type and level into the game (IE, SPPR102 or whatnot), in the first empty slot possible, appends the idsName to spell.ids, and sets %idsName% to the 4-digit code associated with idsName in Spell.ids. While you copy newSPLfile to the override, you also apply the patches listed.

      If Spell.ids already contains a spell named idsName, of the same type and level than the one you're adding, then that spell is overwritten (rather than adding a duplicate version). If you have the IF_EXISTING section, its patches are applied to the current version instead.


      If Spell.ids already contains a spell named idsName, but of of different type and/or level than the one you're adding, then the current reference is removed from spell.ids, and then the action proceeds as usual. In this case, if there is the ON_DISABLE section, the patches declared there will be applied to the older spell."

    - name: ADD_JOURNAL
      detail: ADD_JOURNAL [ EXISTING ] [ MANAGED ] [ TITLE ( text ) ] reference list [ USING traFile list ]
      doc: "If the game is not of an EE-type, this action does nothing. If the game is of an EE-type, this action patches BGEE.SQL or BGEE.LUA (depending on game version) with the provided quests and journal entries, so they will work with the EE-type journal system.

      For each of the provided references, which are taken to be journal entries, the first line of text, up to a newline character, is taken to be the title of the journal entry. Titles isolated in this way have any trailing whitespace and full stops trimmed. The title is added as a separate string to the TLK, together with the complete journal entry. The game files patched with the strrefs of the title and journal entry. Each unique title is given a unique quest id and journal entries that share titles end up sharing quest ids.

      If EXISTING is specified, the strref of the title is matched against the existing title strrefs. If a match is found, the journal entry is added under the quest id of the existing quest. Otherwise it is added as a new quest. Note that TITLE should be given a string reference in this case. ADD_JOURNAL cannot guarantee correct results if EXISTING is used without TITLE or if TITLE is given a string or tra reference instead of a string reference.

      If MANAGED is specified, all provided journal entries are given a unique, non-zero quest-group number. They share the same quest-group number regardless of whether they share the same title. If EXISTING is also specified, the quest-group numbers for all existing journal entries that match the provided titles are assigned a quest-group number, provided they do not already have one. This option does nothing unless the game version supports quest groups.

      If TITLE is specified, the provided text is used as the title for all provided journal entries. The titles of each individual journal entry remains unchanged, they are just all listed under the same title.
"
    - name: STRING_SET
      detail: STRING_SET indexOrString newValue list [ USING traFile ]
      doc: This command replaces each given string in the user's TLK file with the associated newValue. If a traFile is given, that file is is read once before all of the replacements take place and its contents are forgotten after.

    - name: STRING_SET_EVALUATE
      detail: STRING_SET_EVALUATE value newValue list [ USING traFile ]
      doc: This command replaces the string at index value in the user's TLK file with the associated newValue. If a traFile is given, that file is is read once before all of the replacements take place and its contents are forgotten after. If the index value equals the current number of strings in the TLK file (for example, through NEXT_STRREF), newValue will be added to the TLK file as a new string. This addition is made with no deduplication. Use with caution, as this will continue to grow the TLK file each time the mod is reinstalled.

    - name: STRING_SET_RANGE
      detail: "STRING_SET_RANGE #min #max USING traFile"
      doc: For every integer i between min and max (inclusive) we do STRING_SET i @i USING traFile (except that this command should be executed more rapidly). The command will fail if @i is not defined (either by traFile or by some other tra file in scope) for some i between min and max.

    - name: ALTER_TLK_RANGE
      detail: ALTER_TLK_RANGE value value BEGIN patch list END
      doc: Executes the given patch list on all the strings *currently* in dialog.tlk between the two given values (both inclusive). This means that strings added in the current mod installation will not be patched, and strings already altered via ALTER_TLK* and/or STRING_SET* will be patched from the pre-patch condition.

    - name: ALTER_TLK_LIST
      detail: ALTER_TLK_LIST BEGIN value list END BEGIN patch list END
      doc: Executes the given patch list on all the strings *currently* in dialog.tlk from the given list. This means that strings added in the current mod installation will not be patched, and strings already altered via ALTER_TLK* and/or STRING_SET* will be patched from the pre-patch condition.

    - name: ALTER_TLK
      detail: ALTER_TLK BEGIN patch list END
      doc: Executes the given patch list on all the strings *currently* in dialog.tlk. This means that strings added in the current mod installation will not be patched, and strings already altered via ALTER_TLK* and/or STRING_SET* will be patched from the pre-patch condition. Consider using ALTER_TLK_RANGE with the base game's boundaries instead.
    
    - name: REQUIRE_FILE
      detail: REQUIRE_FILE filename warningString
      doc: If filename does not exist (or the bif file is not referenced inside the chitin.key), warningString is displayed and this component cannot be installed. This is checked before any actions are executed.

    - name: FORBID_FILE
      detail: FORBID_FILE filename warningString
      doc: If filename does exist (or the bif file is referenced inside the chitin.key), warningString is displayed and this component cannot be installed. This is checked before any actions are executed.
    - name: FAIL
      detail: FAIL warningString
      doc: If this TP2 Action is executed, warningString is displayed and the component fails to install.
    - name: ABORT
      detail: ABORT string
      doc: The string is displayed and installation of the component is undone. No error is implied.
    - name: WARN
      detail: WARN displayString
      doc: The string DisplayString is echoed to the user. Useful for debugging or status reports. If displayString contains %variable% references, their values will be displayed. Additionally, INSTALLED WITH WARNINGS is printed at the end of the install.
    - name: PRINT
      detail: PRINT displayString
      doc: The string DisplayString is echoed to the user. Useful for debugging or status reports. If displayString contains %variable% references, their values will be displayed.
    - name: LOG
      detail: LOG displayString
      doc: The string DisplayString is echoed to setup-mymod.debug. If displayString contains %variable% references, their values will be displayed.
    - name: OUTER_TEXT_SPRINT
      detail: OUTER_TEXT_SPRINT variable stringWithVars
      doc: Any WeiDU variables (enclosed in %s) inside stringWithVars are replaced by their values and the resulting string (constructed at mod-installation time!) is assigned to the variable variable.
    - name: OUTER_SPRINT
      detail: OUTER_SPRINT variable stringWithVars
      doc: Like OUTER_TEXT_SPRINT, but stringWithVars can be an @reference, and will break --traify. Use OUTER_TEXT_SPRINT instead.
    - name: OUTER_SNPRINT
      detail: OUTER_SNPRINT value variable stringWithVars
      doc: "If value evaluates to zero or a positive number, N, the first N characters of the evaluated contents of stringWithVars are assigned to variable. If value evaluates to a negative number, N, it's instead the last N characters. Thus:
        SPRINT author Jason
        SNPRINT 3 myvar \"1:%author%\"
        ... assigns 1:J to myvar."
    - name: OUTER_SET
      detail: OUTER_SET variable = value
      doc: Update variable so that it is equal to value.
# OUTER_SET variable += value	Equivalent to OUTER_SET variable = variable + value.
# OUTER_SET variable -= value	Equivalent to OUTER_SET variable = variable - value.
# OUTER_SET variable *= value	Equivalent to OUTER_SET variable = variable * value.
# OUTER_SET variable /= value	Equivalent to OUTER_SET variable = variable / value.
# OUTER_SET variable &= value	Equivalent to OUTER_SET variable = variable BAND value.
# OUTER_SET variable |= value	Equivalent to OUTER_SET variable = variable BOR value.
# OUTER_SET variable <<= value	Equivalent to OUTER_SET variable = variable BLSL value.
# OUTER_SET variable >>= value	Equivalent to OUTER_SET variable = variable BLSR value.
    - name: OUTER_INNER_PATCH
      detail: OUTER_INNER_PATCH buffString BEGIN patch list END
      doc: Any WeiDU variables inside %s within buffString are replaced by their values. All of the patches given are evaluated as if the contents of the current file were buffString. Any modifications to buffString are thrown away. This is considered an action, not a patch.
    - name: OUTER_PATCH
      detail: OUTER_PATCH buffString BEGIN patch list END
      doc: Equal to OUTER_INNER_PATCH, if you feel that OUTER_INNER sounds wrong.
    - name: OUTER_INNER_PATCH_SAVE
      detail: OUTER_INNER_PATCH_SAVE savevar buffString BEGIN patch list END
      doc: As with OUTER_INNER_PATCH, except that any modifications to buffString are stored inside savevar.
    - name: OUTER_PATCH_SAVE
      detail: OUTER_PATCH_SAVE savevar buffString BEGIN patch list END
      doc: Equal to OUTER_INNER_PATCH_SAVE, if you feel that OUTER_INNER sounds wrong.
    - name: OUTER_WHILE
      detail: OUTER_WHILE value BEGIN TP2 Action list END
      doc: If value is non-zero, execute the given TP2 Action list and then repeat, re-evaluating the value. Be very careful when using this command. You can easily describe an infinite loop. See the WHILE loop tutorial for more information.
    - name: OUTER_FOR
      detail: OUTER_FOR ( patch list ; value ; patch list ) BEGIN TP2 Action list END
      doc: The TP2 Action OUTER_FOR (init;pred;inc) BEGIN body END is equivalent to init WHILE pred BEGIN INNER_ACTION BEGIN body END inc END, except that it's considered an action. Note that the predicate value cannot be empty.

    - name: ACTION_BASH_FOR
      detail: ACTION_BASH_FOR directory-file-regexp BEGIN TP2 Action list END
      doc: 'For all files that match directory-file-regexp, sets a bunch of variables and executes the actions for each file found. Assuming the file being copied is somedir/yourfile.cre, the following variables will be set:
        "%BASH_FOR_DIRECTORY%" = "somedir"
        "%BASH_FOR_FILESPEC%" = "somedir/yourfile.cre"
        "%BASH_FOR_FILE%" = "yourfile.cre"
        "%BASH_FOR_RES%" = "yourfile"
        "%BASH_FOR_EXT%" = "cre"
        "%BASH_FOR_SIZE%" = <size of somedir/yourfile.cre>'

    - name: ACTION_DEFINE_ARRAY
      detail: ACTION_DEFINE_ARRAY String1 BEGIN String2 list END
      doc: Sets the array $string1(0),$string1(1) etc. to the various elements in string2.
    - name: ACTION_SORT_ARRAY_INDICES
      detail: ACTION_SORT_ARRAY_INDICES String ArrayIndicesSortType
      doc: Sorts the indices of the array given by String according to the order ArrayIndicesSortType. String is evaluated for variables and you can use the array construct.
    - name: GET_FILE_ARRAY
      detail: GET_FILE_ARRAY String path regexp
      doc: The array $string(0), $string{1} etc is set to the file names, including path, that match regexp in path. The path is relative to the installation directory (e.g. save/000000000-Auto-Save).
    - name: GET_DIRECTORY_ARRAY
      detail: GET_DIRECTORY_ARRAY String path regexp
      doc: Like GET_FILE_ARRAY except regexp is matched against directories instead of files.
    - name: ACTION_DEFINE_ASSOCIATIVE_ARRAY
      detail: ACTION_DEFINE_ASSOCIATIVE_ARRAY String BEGIN key1 [ , key2 ... ] => result1 list END
      doc: 'Sets the array $string, indexed by the keys, to the corresponding results. The results can either be Strings or values. Example:
        ACTION_DEFINE_ASSOCIATIVE_ARRAY mix_with_blue BEGIN
          red => purple
          yellow => green
        END'

    - name: ACTION_FOR_EACH
      detail: ACTION_FOR_EACH String1 IN String list BEGIN TP2 Action list END
      doc: Will set the string1 variable to each value in string list and process each action.
    - name: ACTION_PHP_EACH
      detail: ACTION_PHP_EACH String1 AS String2 => String3 list BEGIN TP2 Action list END
      doc: For every value of the string1 array that has been created or read, sets string2_0 to the first array parameter, string2_1 to the second array parameter, etc. and string3 to the result of the array. string2 will also contain the first array parameter (as a synonym of string2_0). then executes the actions listed. More exhaustive documentation will be provided by SConrad.
    - name: INCLUDE
      detail: INCLUDE String list
      doc: Loads the file string as if it were a list of tp2 actions and executes it (as if it had been typed inside your tp2). These files have by convenience tph as an extension, due to no reason other than randomness (you can use .tp1 or .xyzsucks if you're so oriented). Please note that, to speed up inclusions, tph files are stored in memory, rather than re-read each time from the hard-disk. If you need automorphing code (IE, you want to edit your tph file), you can use REINCLUDE instead.
    - name: ACTION_INCLUDE
      detail: ACTION_INCLUDE String list
      doc: A synonym of INCLUDE.
    - name: REINCLUDE
      detail: REINCLUDE String list
      doc: Works like INCLUDE, but loads each time the tph file from the hard disk. This is slower, but required if you want to edit your tph file between an inclusion and another.
    - name: ACTION_REINCLUDE
      detail: ACTION_REINCLUDE String list
      doc: A synonym of REINCLUDE.

    - name: ACTION_TO_UPPER
      detail: ACTION_TO_UPPER variable
      doc: Turns to upper-case the contents of %variable% and store the results in variable.
    - name: ACTION_TO_LOWER
      detail: ACTION_TO_LOWER variable
      doc: Turns to lower-case the contents of %variable% and store the results in variable.
    - name: ACTION_GET_STRREF
      detail: ACTION_GET_STRREF value variable
      doc: The string reference value is looked up in DIALOG.TLK and the (male) string (without any quotes) is stored in the variable.
    - name: ACTION_GET_STRREF_F
      detail: ACTION_GET_STRREF_F value variable
      doc: The string reference value is looked up in DIALOGF.TLK and the female string (without any quotes) is stored in the variable. If there is no DIALOGF.TLK, the string from DIALOG.TLK is used instead.
    - name: ACTION_GET_STRREF_S
      detail: ACTION_GET_STRREF_S value variable
      doc: The string reference value is looked up in DIALOG.TLK and the sound reference associated with the (male) string is stored in the variable. If the string has no sound, the empty string is used instead.
    - name: ACTION_GET_STRREF_FS
      detail: ACTION_GET_STRREF_FS value variable
      doc: The string reference value is looked up in DIALOGF.TLK and the sound reference associated with the female string is stored in the variable. If there is no DIALOGF.TLK, the sound reference associated with the string from DIALOG.TLK is used instead. If the string has no sound, the empty string is used instead.

    - name: DECOMPRESS_BIFF
      detail: DECOMPRESS_BIFF file ...
      doc: 'Decompresses one or more biff files from either "BIF V1.0" or "BIFCV1.0" into "BIFFV1 ". The biff file is looked for in /data and the CD paths specified in baldur.ini. You should consequently not specify the biff path, merely the name. All matching biff files are decompressed, even ones that are duplicated between CD paths. The biff file is backed up to another file in the same directory before it is decompressed. Since multiple games can share the same biffs, this action is not uninstalled together with the mod.
      WeiDU will raise a Failure exception if the biff is not found in any of the paths.

      Decompressing a biff file can be helpful in preventing crashes related to area files, commonly WAV ambient sounds or TIS files. Do not use this action without a real reason.'

    - name: DEFINE_ACTION_MACRO
      detail: DEFINE_ACTION_MACRO String BEGIN TP2 Action list END
      doc: Define an action macro. Refer to the macros section for additional information.
    - name: DEFINE_PATCH_MACRO
      detail: DEFINE_PATCH_MACRO String BEGIN patch list END
      doc: Define a patch macro. Refer to the macros section for additional information.
    - name: DEFINE_ACTION_FUNCTION
      detail: DEFINE_ACTION_FUNCTION String [ INT_VAR variable = value ... ] [ STR_VAR variable = String ... ] [ RET variable ... ] [ RET_ARRAY variable ... ] BEGIN TP2 Action list END
      doc: Define an action function. Refer to the Functions section for additional information.
    - name: DEFINE_PATCH_FUNCTION 
      detail: DEFINE_PATCH_FUNCTION String [ INT_VAR variable = value ... ] [ STR_VAR variable = String ... ] [ RET variable ... ] [ RET_ARRAY variable ... ] BEGIN patch list END
      doc: Define a patch function. Refer to the Functions section for additional information.
    - name: LAUNCH_ACTION_MACRO
      detail: LAUNCH_ACTION_MACRO String
      doc: Launch an action macro. Refer to the macros section for additional information. You may use LAM as a synonym for LAUNCH_ACTION_MACRO.
    - name: LAUNCH_ACTION_FUNCTION
      detail: LAUNCH_ACTION_FUNCTION String [ INT_VAR variable [ = value ] ... ] [ STR_VAR variable [ = [ EVALUATE_BUFFER ] String ] ... ] [ RET variable [ = String ] ... ] [ RET_ARRAY variable [ = String ] ... ] END
      doc: Launch an action function. Refer to the Functions section for additional information. You may use LAF as a synonym for LAUNCH_ACTION_FUNCTION.
    - name: ACTION_TIME
      detail: ACTION_TIME String BEGIN TP2 Action list END
      doc: Measure the time taken to execute the TP2 Actions and report it under the label String together with the other time measurements at the end of the mod's debug file.


tp2-optglob:
  type: 14 # keyword
  items:
    - name: GLOB
      doc: Use local filesystem globbing. Globbing is generally architecture specific!
    - name: NOGLOB
      detail:
      doc: "Never use local file system globbing. Or use sane defaults: enable globbing with COPY_EXISTING_REGEXP, disable it with COPY."

tp2-optcase:
  type: 14 # keyword
  items:
    - name: CASE_SENSITIVE
      doc: Matching is case-sensitive.
    - name: CASE_INSENSITIVE
      doc: Matching is case-insensitive.

tp2-optexact:
  type: 14 # keyword
  items:
    - name: EXACT_MATCH
      doc: Only the given string is searched for.
    - name: EVALUATE_REGEXP
      doc: Matching is evaluated following the usual regexp conventions.

tp2-ArrayIndicesSortType:
  type: 14 # keyword
  items:
    - name: LEXICOGRAPHICALLY
      doc: The sorting is in ascending lexicographical order. This means each row of indices are interpreted as a string and that, for example, 10 is sorted before 2.
    - name: NUMERICALLY
      doc: The sorting is in ascending numerical order. This requires that the first column of indices can be interpreted as numbers; any strings will raise a warning and the sort order will be undefined.

tp2-patch:
   type: 3 # function
   items:
    - name: SAY
      detail: SAY offset String
      doc: The string-ref associated with String is written at offset. This is commonly
        used to change the name or description of a spell or item.
    - name: PATCH_FAIL
      detail: PATCH_FAIL warningString
      doc: If this TP2 Action is execution, warningString is displayed and the component
        fails to install.
    - name: PATCH_ABORT
      detail: PATCH_ABORT string
      doc: The string is displayed and installation of the component is undone. No error
        is implied.
    - name: PATCH_WARN
      detail: PATCH_WARN displayString
      doc: The string DisplayString is echoed to the user. Useful for debugging or status
        reports. If displayString contains %variable% references, their values will be
        displayed. Additionally, INSTALLED WITH WARNINGS is printed at the end of the
        install.
    - name: PATCH_PRINT
      detail: PATCH_PRINT displayString
      doc: 'The string DisplayString is echoed to the user. Useful for debugging or status
        reports. If displayString contains %variable% references, their values will be
        displayed. See also PRINT. Example: COPY_EXISTING_REGEXP ~.*\.CRE~ ~override~
        READ_BYTE 0x272 race READ_BYTE 0x273 class PATCH_IF class = 3 THEN BEGIN PATCH_PRINT
        ~%SOURCE_FILE% is a cleric with race = %race%.~ END'
    - name: PATCH_LOG
      detail: PATCH_LOG displayString
      doc: The string DisplayString is echoed to setup-mymod.debug. If displayString contains
        %variable% references, their values will be displayed.
    - name: SAY_EVALUATED
      detail: SAY_EVALUATED offset stringWithVars
      doc: 'Any WeiDU variables (enclosed in %s) inside stringWithVars are replaced by
        their values and the resulting string (constructed at mod-installation time!)
        is added to DIALOG.TLK and its string reference it written to the offset. Example:
        COPY_EXISTING_REGEXP ~RING.*.ITM~ ~override~ READ_LONG 0x38 cost SAY_EVALUATED
        IDENTIFIED_DESC ~I Am %SOURCE_RES%, I Cost %cost%~'
    - name: TO_UPPER
      detail: TO_UPPER variable
      doc: Turns to upper-case the contents of %variable% and store the results in variable.
    - name: TO_LOWER
      detail: TO_LOWER variable
      doc: Turns to lower-case the contents of %variable% and store the results in variable.
    - name: TEXT_SPRINT
      detail: TEXT_SPRINT variable stringWithVars
      doc: Any WeiDU variables (enclosed in %s) inside stringWithVars are replaced by
        their values and the resulting string (constructed at mod-installation time!)
        is assigned to the variable variable.
    - name: SPRINT
      detail: SPRINT variable stringWithVars
      doc: Like TEXT_SPRINT, but stringWithVars can be an @reference, and will break --traify.
        Use TEXT_SPRINT instead.
    - name: SNPRINT
      detail: SNPRINT value variable stringWithVars
      doc: "If value evaluates to zero or a positive number, N, the first N characters\
        \ of the evaluated contents of stringWithVars are assigned to variable. If value\
        \ evaluates to a negative number, N, it's instead the last N characters.\
        \ Thus: SPRINT author Jason SNPRINT 3 myvar \"1:%author%\" ... assigns 1:J to\
        \ myvar."
    - name: SPRINTF
      detail: SPRINTF variable stringWithVars ( variable or value list )
      doc: In stringWithVars, any instance of %s, %d and %x will consume one variable
        of the list of variables and format the contents of the variable as a string,
        decimal number or hexadecimal number, respectively. Any normal text in stringWithVars
        is reproduced verbatim. Variables enclosed in % are not evaluated. The result
        is stored in the variable given as the first argument. SET ten = 10 SPRINTF foo
        "%s %d %x quux" ("bar" 10 ten) will set the variable foo to the string ~bar 10
        0xa quux~
    - name: SOURCE_BIFF
      detail: SOURCE_BIFF variable filename
      doc: If filename is in a biff (whether it is also in the override or not), sets
        variable to the name of the containing biff (the name is printed as E.G. data/items.bif).
    - name: SPACES
      detail: SPACES variable stringWithVars
      doc: '%variable% will be inited to a string the same length as stringWithVars, but
        made entirely of spaces. SPACES var ~123~ will create %var% = " ".'
    - name: QUOTE
      detail: QUOTE variable stringWithVars
      doc: '%variable% will be inited to a string that will match exactly stringWithVars.
        QUOTE var ~some\thing^~ will create %var% = "some\\thing\^".'
    - name: REPLACE
      detail: REPLACE optcase optexact regexp text
      doc: 'All occurrences of regexp in the file are replaced with the ASCII printing
        of the string reference for text. So if regexp is "FRED" and the text ends up
        being strref #1234, "FRED" will be replaced with "1234". This is usually used
        to replace string references in BCS files (where they are stored textually). Put
        a command like DisplayString(Myself,99999) in your BCS file and use something
        like REPLACE 99999 "Hello, World".'
    - name: REPLACE_TEXTUALLY
      detail: REPLACE_TEXTUALLY optcase optexact regexp string [ ( sizeValue ) ]
      doc: All occurrences of the given regexp in the file are replaced with the given
        string. variable substitution (e.g., kit and music names) is performed on both
        the string and the regexp. If you use the sizeValue field, optexact is automatically
        set to true (IE without regexp patterns). The regexp and the string are padded
        by zeros to be long exactly sizeValue bytes.
    - name: EVALUATE_BUFFER_SPECIAL
      detail: EVALUATE_BUFFER_SPECIAL string
      doc: "String must be one character long. Any WeiDU variables (like XmyvarX) \tinside\
        \ the current file are replaced by their values, where X is to be intended \t\
        as string. Example: <<<<<<<< .../mymod-inlined/script.baf IF See($myvar$) THEN\
        \ RESPONSE #100 Kill(%myvar%) END >>>>>>>> EXTEND_TOP ~sola.bcs~ ~.../mymod-inlined/script.baf~\
        \ SPRINT myvar = ~\"Anomen\"~ EVALUATE_BUFFER_SPECIAL ~$~ \tmyvar will be substituted\
        \ with Anomen, but %myvar% will be not.\tDo not use this without a real reason."
    - name: EVALUATE_BUFFER
      doc: 'Any WeiDU variables (like %myvar%) inside the current file (which should probably
        be a plain text file in order for this to make much sense) are replaced by their
        values. Example: <<<<<<<< .../mymod-inlined/script.baf IF See(%myvar%) THEN RESPONSE
        #100 Kill(%myvar%) END >>>>>>>> EXTEND_TOP ~sola.bcs~ ~.../mymod-inlined/script.baf~
        SPRINT myvar = ~"Anomen"~ EVALUATE_BUFFER Those two actions extend the top of
        sola.bcs with the script block IF See("Anomen") THEN RESPONSE #100 Kill("Anomen")
        END. You can also use EVALUATE_BUFFER in COMPILE actions or before strings in
        values. You may use EVAL as a synonym for EVALUATE_BUFFER.'
    - name: APPLY_BCS_PATCH
      detail: APPLY_BCS_PATCH patchFile
      doc: Applies patchFile to the current file. See --bcmp-from and similar command-line
        arguments for constructing these patches.
    - name: APPLY_BCS_PATCH_OR_COPY
      detail: APPLY_BCS_PATCH_OR_COPY patchFile copyFile
      doc: Applies patchFile to the current file, as APPLY_BCS_PATCH. However, if the
        patching fails the current file is replaced with copyFile instead.
    - name: WRITE_BYTE
      detail: WRITE_BYTE offset value
      doc: The first argument is the offset at which the second argument (an 8-bit byte
        value) is written. Performs READ_BYTE offset THIS and READ_SBYTE offset STHIS
        automatically (you can now write WRITE_BYTE 100 THIS 2).
    - name: WRITE_SHORT
      detail: WRITE_SHORT offset value
      doc: The first argument is the offset at which the second argument (a 16-bit short
        value) is written. Performs READ_SHORT offset THIS and READ_SSHORT offset STHIS
        automatically.
    - name: WRITE_LONG
      detail: WRITE_LONG offset value
      doc: The first argument is the offset at which the second argument (a 32-bit long
        word value) is written. Performs READ_LONG offset THIS and READ_SLONG offset STHIS
        automatically.
    - name: WRITE_ASCII
      detail: 'WRITE_ASCII offset ascString [ #requiredSize ]'
      doc: The ASCII ascString is written to the file starting at offset. If you specify
        a requiredSize then exactly that many bytes are written (if ascString is smaller,
        it is padded with NULs; if ascString is larger, it is truncated). If you do not
        specify a requiredSize, the terminating NUL is not written.
    - name: WRITE_ASCII_LIST
      detail: WRITE_ASCII_LIST offset ascString list
      doc: The given ASCII strings are written at offset, offset + 8, offset + 16... Automatically
        evaluates variables. You may use WRITE_ASCIIL as a synonym for WRITE_ASCII_LIST.
    - name: WRITE_ASCII_TERMINATE
      detail: WRITE_ASCII_TERMINATE offset ascString
      doc: The ASCII ascString is written to the file starting at offset. The terminating
        NUL is written. You may use WRITE_ASCIIT as a synonym for WRITE_ASCII_TERMINATE.
    - name: WRITE_EVALUATED_ASCII
      detail: 'WRITE_EVALUATED_ASCII offset ascString [ #requiredSize ]'
      doc: The ASCII ascString is evaluated (so %variable% is replaced by its value) and
        written to the file starting at offset (as in WRITE_ASCII). You may use WRITE_ASCIIE
        as a synonym for WRITE_EVALUATED_ASCII.
    - name: WRITE_FILE
      detail: WRITE_FILE offset filename
      doc: "The entire contents of \"filename\" (which may contain variables)\
        \ are loaded and copied over the current file starting at offset offset. \"
        filename\" must be a literal filename like mymod/data/file.bam. If there is\
        \ not enough room between offset and the end of the file for the contents of \"
        filename\" the patch will fail with an error message."
    - name: INSERT_FILE
      detail: INSERT_FILE offset filename
      doc: "Just like WRITE_FILE except that the entire contents of \"filename\"\
        \ are inserted at offset, just as if you had done an INSERT_BYTES with the size\
        \ of \"filename\" to that offset followed by a WRITE_FILE to that offset."
    - name: APPEND_FILE
      detail: APPEND_FILE [ TEXT ] filename
      doc: Appends the contents of filename onto the current file. If TEXT is specified,
        the contents of filename and the current file is separated by a newline character
        (LF) unless the first character of filename or the last character of the current
        file is a newline character.
    - name: APPEND_FILE_EVALUATE
      detail: APPEND_FILE_EVALUATE [ TEXT ] filename
      doc: Just like APPEND_FILE except that %variables% in the contents of filename are
        evaluated before the appending.
    - name: REPLACE_BCS_BLOCK
      detail: REPLACE_BCS_BLOCK [ EVALUATE_BUFFER ] optcase oldFile newFile [ ON_MISMATCH
        patch list END ]
      doc: If the current file is a BCS file, the segment of it corresponding to oldFile
        is replaced with the contents of newFile. oldFile and newFile may be BCS or BAF
        files. If they are BAF files they will not get the benefit of AUTO_TRA.If EVALUATE_BUFFER
        is given, variables inside oldFile and newFile are evaluated, but only they are
        BAF files.If the segment corresponding to oldFile is not found and the ON_MISMATCH
        section is present, those patches are run; if oldFile is not found and ON_MISMATCH
        is not present, a warning message is printed.You may use R_B_B as a synonym for
        REPLACE_BCS_BLOCK.
    - name: INSERT_BYTES
      detail: INSERT_BYTES offset value
      doc: The first argument is the offset, the second argument is the count. The file
        will be expanded at the given offset with count bytes worth of zeroes.
    - name: DELETE_BYTES
      detail: DELETE_BYTES offset value
      doc: The first argument is the offset, the second argument is the count. The file
        will shrink as count bytes are deleted starting at the given offset.
    - name: READ_BYTE
      detail: READ_BYTE offset variable [ ELSE value ]
      doc: An 8-bit value is read from the file at the given offset and is stored in the
        given variable. If offset is out-of-bounds and the ELSE is present, the ELSE-value
        is assigned to variable. If offset is out-of-bounds and the ELSE is not present,
        the patch fails with a visible error.
    - name: READ_SBYTE
      detail: READ_SBYTE offset variable [ ELSE value ]
      doc: As READ_BYTE, but the value is interpreted as signed.
    - name: READ_SHORT
      detail: READ_SHORT offset variable [ ELSE value ]
      doc: A 16-bit value is read from the file at the given offset and is stored in the
        given variable. See READ_BYTE.
    - name: READ_SSHORT
      detail: READ_SSHORT offset variable [ ELSE value ]
      doc: As READ_SHORT, but the value is interpreted as signed.
    - name: READ_LONG
      detail: READ_LONG offset variable [ ELSE value ]
      doc: A 32-bit value is read from the file at the given offset and is stored in the
        given variable. See READ_BYTE.
    - name: READ_SLONG
      detail: READ_SLONG offset variable [ ELSE value ]
      doc: As READ_LONG, but the value is interpreted as signed.
    - name: READ_ASCII
      detail: READ_ASCII offset variable [ ELSE string ] [ ( value ) [ NULL ] ]
      doc: A nul-terminated string is read from the file at the given offset and is stored
        in the given variable. The terminating nul is not stored. The default read size
        is 8 bytes. If an explicit size value is specified then that many bytes are read
        into the variable, even if some of them are nuls, except if NULL is present, in
        which case a nul-terminated string is read, without storing the terminating null.
        See READ_BYTE. If the offset is out-of-bounds and the ELSE clause is present,
        the string is evaluated as in WRITE_EVALUATED_ASCII and then assigned into variable.
    - name: READ_STRREF
      detail: READ_STRREF offset variable [ ELSE string ]
      doc: A 32-bit Infinity Engine string reference is read from the file at the given
        offset. The string reference is looked up in DIALOG.TLK and the (male) string
        (without any quotes) is stored in the variable. In some sense this is the opposite
        of SAY_EVALUATED.
    - name: READ_STRREF_F
      detail: READ_STRREF_F offset variable [ ELSE string ]
      doc: A 32-bit Infinity Engine string reference is read from the file at the given
        offset. The string reference is looked up in DIALOGF.TLK and the female string
        (without any quotes) is stored in the variable.
    - name: READ_STRREF_S
      detail: READ_STRREF_S offset variable [ ELSE string ]
      doc: A 32-bit Infinity Engine string reference is read from the file at the given
        offset. The string reference is looked up in DIALOG.TLK and the sound reference
        associated with the (male) string is stored in the variable. If the string has
        no sound, the empty string is used instead.
    - name: READ_STRREF_FS
      detail: READ_STRREF_FS offset variable [ ELSE string ]
      doc: A 32-bit Infinity Engine string reference is read from the file at the given
        offset. The string reference is looked up in DIALOGF.TLK and the sound reference
        associated with the female string is stored in the variable. If there is no DIALOGF.TLK,
        the sound reference associated with the string from DIALOG.TLK is used instead.
        If the string has no sound, the empty string is used instead.
    - name: GET_OFFSET_ARRAY
      detail: GET_OFFSET_ARRAY String seven values
      doc: 'The seven values are: 1. Offset 2. Read length of "Offset" 3. Iterations 4.
        Read length of "Iterations" 5. Index 6. Read length of "Index" 7. Length between
        iterations. WeiDU comes with a number of pre-defined sets of values for GET_OFFSET_ARRAY.
        These sets are: ARE_V10_ACTORS (0x54 4 0x58 2 0 0 0x110) ARE_V10_REGIONS (0x5c
        4 0x5a 2 0 0 0xc4) ARE_V10_SPAWN_POINTS (0x60 4 0x64 4 0 0 0xc8) ARE_V10_ENTRANCES
        (0x68 4 0x6c 4 0 0 0x68) ARE_V10_CONTAINERS (0x70 4 0x74 2 0 0 0xc0) ARE_V10_AMBIENTS
        (0x84 4 0x82 2 0 0 0xd4) ARE_V10_DOORS (0xa8 4 0xa4 4 0 0 0xc8) ARE_V10_ANIMATIONS
        (0xb0 4 0xac 4 0 0 0x4c) ARE_V91_ACTORS (0x64 4 0x68 2 0 0 0x110) CRE_V10_KNOWN_SPELLS
        (0x2a0 4 0x2a4 4 0 0 0xc) CRE_V10_SPELL_MEM_INFO (0x2a8 4 0x2ac 4 0 0 0x10) CRE_V10_EFFECTS
        (0x2c4 4 0x2c8 4 0 0 0x108) CRE_V10_ITEMS (0x2bc 4 0x2c0 4 0 0 0x14) ITM_V10_HEADERS
        (0x64 4 0x68 2 0 0 0x38) ITM_V10_GEN_EFFECTS (0x6a 4 0x70 2 0x6e 2 0x30) SPL_V10_HEADERS
        (0x64 4 0x68 2 0 0 0x28) SPL_V10_GEN_EFFECTS (0x6a 4 0x70 2 0x6e 2 0x30) STO_V10_ITEMS_PURCHASED
        (0x2c 4 0x30 4 0 0 0x4) STO_V10_ITEMS_SOLD (0x34 4 0x38 4 0 0 0x1c) STO_V10_DRINKS
        (0x4c 4 0x50 4 0 0 0x14) STO_V10_CURES (0x70 4 0x74 4 0 0 0xc) WMP_AREAS (0x34
        4 0x30 4 0 0 0xf0) WMP_LINKS (0x38 4 0x3c 4 0 0 0xd8) GET_OFFSET_ARRAY performs
        "Iterations" number of reads and sets the array $string(0), $string(1) etc to
        the result of these reads. A more detailed explanation can be had in the GET_OFFSET_ARRAY
        and GET_OFFSET_ARRAY2 tutorial.'
    - name: GET_OFFSET_ARRAY2
      detail: GET_OFFSET_ARRAY2 String eight values
      doc: "The eight values are: 1. Offset2 2. Offset 3. Read length of \"Offset\" 4.\
        \ Iterations 5. Read length of \"Iterations\" 6. Index 7. Read length of \"Index\"\
        \ 8. Length between iterations WeiDU comes with a number of pre-defined sets of\
        \ values for GET_OFFSET_ARRAY2. These sets are: ARE_V10_ITEMS (0x78 4 0x44 4 0x40\
        \ 4 0x14) ARE_V10_REGION_VERTICES (0x7c 4 0x2a 2 0x2c 4 0x4) ARE_V10_CONTAINER_VERTICES\
        \ (0x7c 4 0x54 2 0x50 4 0x4) ARE_V10_DOOR_OPEN_OUTLINE_VERTICES (0x7c 4 0x30 2\
        \ 0x2c 4 0x4) ARE_V10_DOOR_CLOSED_OUTLINE_VERTICES (0x7c 4 0x32 2 0x34 4 0x4)\
        \ ARE_V10_DOOR_OPEN_CELL_VERTICES (0x7c 4 0x4c 2 0x48 4 0x4) ARE_V10_DOOR_CLOSED_CELL_VERTICES\
        \ (0x7c 4 0x4e 2 0x50 4 0x4) CRE_V10_SPELL_MEM (0x2b0 4 0xc 4 0x8 4 0xc) ITM_V10_HEAD_EFFECTS\
        \ (0x6a 4 0x1e 2 0x20 2 0x30) SPL_V10_HEAD_EFFECTS (0x6a 4 0x1e 2 0x20 2 0x30)\
        \ WMP_NORTH_LINKS (0x38 4 0x54 4 0x50 4 0xd8) WMP_WEST_LINKS (0x38 4 0x5c 4 0x58\
        \ 4 0xd8) WMP_SOUTH_LINKS (0x38 4 0x64 4 0x60 4 0xd8) WMP_EAST_LINKS (0x38 4 0x6c\
        \ 4 0x68 4 0xd8) As you can see, the value for Offset2 isn't included in\
        \ the sets, since it varies.\"Offset2\" corresponds to the result from GET_OFFSET_ARRAY.\
        \ \"Offset\" is read from the start of the file. \"Iterations\" and \"Index\"\
        \ are read from Offset2 + value. Apart from that GET_OFFSET_ARRAY2 functions like\
        \ GET_OFFSET_ARRAY. A more detailed explanation can be had in the GET_OFFSET_ARRAY\
        \ and GET_OFFSET_ARRAY2 tutorial."
    - name: DEFINE_ASSOCIATIVE_ARRAY
      detail: DEFINE_ASSOCIATIVE_ARRAY String BEGIN key1 [ , key2 ... ] => result1 list
        END
      doc: 'Sets the array $string, indexed by the keys, to the corresponding results.
        The results can either be Strings or values. Example: DEFINE_ASSOCIATIVE_ARRAY
        mix_with_blue BEGIN red => purple yellow => green END You may use PATCH_DEFINE_ASSOCIATIVE_ARRAY
        as a synonym for DEFINE_ASSOCIATIVE_ARRAY.'
    - name: GET_STRREF
      detail: GET_STRREF value variable
      doc: The string reference value is looked up in DIALOG.TLK and the (male) string
        (without any quotes) is stored in the variable.
    - name: GET_STRREF_F
      detail: GET_STRREF_F value variable
      doc: The string reference value is looked up in DIALOGF.TLK and the female string
        (without any quotes) is stored in the variable. If there is no DIALOGF.TLK, the
        string from DIALOG.TLK is used instead.
    - name: GET_STRREF_S
      detail: GET_STRREF_S value variable
      doc: The string reference value is looked up in DIALOG.TLK and the sound reference
        associated with the (male) string is stored in the variable. If the string has
        no sound, the empty string is used instead.
    - name: GET_STRREF_FS
      detail: GET_STRREF_FS value variable
      doc: The string reference value is looked up in DIALOGF.TLK and the sound reference
        associated with the female string is stored in the variable. If there is not DIALOGF.TLK,
        the sound reference associated with the string from DIALOG.TLK is used instead.
        If the string has no sound, the empty string is used instead.
    - name: SET
      detail: SET variable = value
      doc: Update variable so that it is equal to value.
    - name: variable
      detail: variable = value
      doc: Update variable so that it is equal to value.
    - name: '['
      detail: '[ SET ] variable += value'
      doc: Equivalent to SET variable = variable + value.
    - name: '['
      detail: '[ SET ] variable -= value'
      doc: Equivalent to SET variable = variable - value.
    - name: '['
      detail: '[ SET ] variable *= value'
      doc: Equivalent to SET variable = variable * value.
    - name: '['
      detail: '[ SET ] variable /= value'
      doc: Equivalent to SET variable = variable / value.
    - name: '['
      detail: '[ SET ] variable &= value'
      doc: Equivalent to SET variable = variable BAND value.
    - name: '['
      detail: '[ SET ] variable |= value'
      doc: Equivalent to SET variable = variable BOR value.
    - name: '['
      detail: '[ SET ] variable <<= value'
      doc: Equivalent to SET variable = variable BLSL value.
    - name: '['
      detail: '[ SET ] variable >>= value'
      doc: Equivalent to SET variable = variable BLSR value.
    - name: WHILE
      detail: WHILE value BEGIN patch list END
      doc: If value is non-zero, execute the given patch list and then repeat, re-evaluating
        the value. Be very careful when using this command. You can easily describe an
        infinite loop. See the WHILE loop tutorial for more information.
    - name: FOR
      detail: FOR ( patch list ; value ; patch list ) BEGIN patch list END
      doc: The patch FOR (init;pred;inc) BEGIN body END is equivalent to init WHILE pred
        BEGIN body inc END. Note that the predicate value cannot be empty.
    - name: PATCH_BASH_FOR
      detail: PATCH_BASH_FOR directory-file-regexp BEGIN patch list END
      doc: 'for all files that match directory-file-regexp, sets a bunch of variables
        and executes the patches for each file found. Assuming the file being copied is
        somedir/yourfile.cre, the following variables will be set: "%BASH_FOR_DIRECTORY%"
        = "somedir" "%BASH_FOR_FILESPEC%" = "somedir/yourfile.cre" "%BASH_FOR_FILE%" =
        "yourfile.cre" "%BASH_FOR_RES%" = "yourfile" "%BASH_FOR_EXT%" = "cre" "%BASH_FOR_SIZE%"
        = <size of somedir/yourfile.cre>'
    - name: DEFINE_ARRAY
      detail: DEFINE_ARRAY String1 BEGIN String2 list END
      doc: Sets the array $string1(0),$string1(1) etc. to the various elements in string2.
    - name: PATCH_DEFINE_ARRAY
      detail: PATCH_DEFINE_ARRAY String1 BEGIN String2 list END
      doc: Same as DEFINE_ARRAY.
    - name: SORT_ARRAY_INDICES
      detail: SORT_ARRAY_INDICES String
      doc: Semantically identical to ACTION_SORT_ARRAY_INDICES
    - name: PATCH_FOR_EACH
      detail: PATCH_FOR_EACH String1 IN String list BEGIN patch list END
      doc: will set the string1 variable to each value in string list and process each
        patch.
    - name: PHP_EACH
      detail: PHP_EACH String1 AS String2 => String3 list BEGIN patch list END
      doc: "For every value of the string1 array that has been created or read, sets string2_0\
        \ to the first array parameter, string2_1 to the second array parameter, etc.\
        \ and string3 to the result of the array. string2 will also contain \t\tthe first\
        \ array parameter (as a synonym of string2_0). then executes the patches listed.\
        \ More exhaustive documentation will be provided by SConrad."
    - name: PATCH_PHP_EACH
      detail: PATCH_PHP_EACH String1 AS String2 => String3 list BEGIN patch list END
      doc: A synonym of PHP_EACH.
    - name: CLEAR_ARRAY
      detail: CLEAR_ARRAY String
      doc: "'Forgets' that the array string exists until its values are recalled.\
        \ The actual variables' values are kept, the only effect is that *PHP_EACH\
        \ will not consider old values."
    - name: PATCH_CLEAR_ARRAY
      detail: PATCH_CLEAR_ARRAY String
      doc: A synonym of CLEAR_ARRAY.
    - name: PATCH_IF
      detail: PATCH_IF value [ THEN ] BEGIN patch list END [ ELSE BEGIN patch list END
        ]
      doc: If value is non-zero, execute the first patch list once. Otherwise, execute
        the second patch list (if any). As a convenient shorthand, you may omit the BEGIN-END
        in the ELSE branch if the ELSE branch contains exactly one patch.
    - name: PATCH_MATCH
      detail: PATCH_MATCH value WITH [ guardvalue ... [ WHEN conditionvalue ] BEGIN patch
        list END ] ... DEFAULT patch list END
      doc: The value is case-insensitively matched against the guard values. If value
        matches one of the guard values, the associated patch list is executed. If there
        is a condition, it additionally needs to evaluate to true for the values to match.
        If none of the values match, the DEFAULT patch list is executed.See the MATCH
        and TRY tutorial for additional information.
    - name: PATCH_TRY
      detail: PATCH_TRY patch list WITH [ patternvalue ... [ WHEN guardvalue ] BEGIN patch
        list END ] ... DEFAULT patch list END
      doc: If evaluating the patch list results in an error, the error is matched, as
        per PATCH_MATCH.N.B. TRY is generally not safe to use because many errors are
        intended to be fatal and if the mod installation were to proceed anyway, it might
        do so in an inconsistent state, with resource leaks or with other errors. PATCH_RERAISE
        mitigates or eliminates these risks, since the unsafe part is allowing the installation
        to continue and re-raising the error allows it to fail, like intended.See the
        MATCH and TRY tutorial for additional information.
    - name: PATCH_RERAISE
      doc: When used inside a PATCH_TRY, the matched error is re-raised.See the MATCH
        and TRY tutorial for additional information.
    - name: PATCH_INCLUDE
      detail: PATCH_INCLUDE String list
      doc: "loads the file string as if it were a list of tp2 patches and executes it\
        \ (as if \t\tit had been typed inside your tp2). These files have by convention\
        \ tpp as an extension, due to no reason other than randomness (you can use .tp1\
        \ or .xyzsucks if you're so oriented). \t\tPlease note that, to speed up\
        \ inclusions, tpp files are stored in memory, \t rather than re-read each time\
        \ from the hard-disk. If you need automorphing code \t\t(IE, you want to edit\
        \ your tpp file), you can use PATCH_REINCLUDE instead."
    - name: PATCH_REINCLUDE
      detail: PATCH_REINCLUDE String list
      doc: Works like PATCH_INCLUDE, but loads each time the tph file from the hard disk.
        This is slower, but required if you want to edit your tpp file between an inclusion
        and another.
    - name: PATCH_WITH_TRA
      detail: PATCH_WITH_TRA traName list BEGIN patch list END
      doc: Creates a new TRA scope copied from the surrounding scope, loads all traName
        files (variable substitution is done; the file can be inlined) and evaluates the
        patches. When PATCH_WITH_TRA exits, the new TRA scope is discarded, that is, all
        TRA changes made by PATCH_WITH_TRA or any of its enclosed patches are forgotten.
    - name: PATCH_WITH_SCOPE
      detail: PATCH_WITH_SCOPE BEGIN patch list END
      doc: Creates a new variable scope copied from the surrounding scope and evaluates
        the patches inside the new scope. When PATCH_WITH_SCOPE exits, the new scope is
        discarded, all new variables defined inside the scope and all changes to existing
        variables are forgotten.
    - name: SET_2DA_ENTRY
      detail: SET_2DA_ENTRY value value value value
      doc: "The first value is the row, the second is the column and the third is the\
        \ required column count. The entry on the given column of the given row is set\
        \ to the fourth value, but only rows with at least as many columns as the required\
        \ column count are considered. The fourth value, the new entry, is evaluated specially:\
        \ if it can be evaluated like a value (e.g., \"3+4\") it will\
        \ be evaluated and its integer result will be written as an ASCII string. Otherwise\
        \ if it is a single string (that is not a variable in scope) that string will\
        \ be written at the new value. See the SET_2DA_ENTRY tutorial for more information."
    - name: SET_2DA_ENTRY_LATER
      detail: SET_2DA_ENTRY_LATER string value value value
      doc: Defines an change to a 2DA file to be made at some point in the future. The
        change is stored in variables derived from the first parameter, string. The first
        two values are the row and column of the 2DA table to be changed and the third
        value the new value of the 2DA entry. Use SET_2DA_ENTRIES_NOW to flush the queued
        changes and update the 2DA table. If you use SET_2DA_ENTRY_LATER together with
        READ_2DA_ENTRY_FORMER you must use different string variables for the two. See
        the SET_2DA_ENTRY_LATER tutorial.
    - name: SET_2DA_ENTRIES_NOW
      detail: SET_2DA_ENTRIES_NOW string value
      doc: Flush the changes to the 2DA table that have been queued by SET_2DA_ENTRY_LATER.
        The first parameter, string, should be the same string you used for SET_2DA_ENTRY_LATER.
        The second value is the required column count. Rows with fewer columns are disregarded.
        See the SET_2DA_ENTRIES_NOW tutorial.
    - name: PRETTY_PRINT_2DA
      doc: Indents the 3rd line in the current file (which should be a 2da file).
    - name: PRETTY_PRINT_2DA
      detail: PRETTY_PRINT_2DA value
      doc: "Indents the value'th line (counting from 0) in the current file (which\
        \ should be a 2da file)."
    - name: INSERT_2DA_ROW
      detail: INSERT_2DA_ROW value1 value2 String
      doc: String (after variable substitution) will be inserted as a new line in the
        table. Value1 is the row count, value2 is the required column count. If row count
        is the same as the number of long enough lines in the file, then the line will
        be inserted at the end; if row count is lesser than the number of lines, it will
        be inserted just before the nth line in the original file (starting count from
        0); finally, if row count is greater than the number of lines, the component will
        fail to install. <<<<<<<< ~.../mymod-inlined/2dafile~ asd foo a b c d e f g h
        i >>>>>>>> COPY ~.../mymod-inlined/2dafile~ ~.../mymod-inlined/2dafile~ INSERT_2DA_ROW
        3 3 ~4 4 4~ INSERT_2DA_ROW 2 3 ~3 3 3~ INSERT_2DA_ROW 1 3 ~2 2 2~ INSERT_2DA_ROW
        0 3 ~1 1 1~ will result in asd foo 1 1 1 a b c 2 2 2 d e f 3 3 3 g h i 4 4 4
    - name: REMOVE_2DA_ROW
      detail: REMOVE_2DA_ROW value1 value2
      doc: the Value1-th row from the 2da file containing at least value2 items will be
        removed.
    - name: PATCH_READLN
      detail: PATCH_READLN variable
      doc: Waits for the user to provided an enter-terminated string and store it in variable.
        Said string will be stored and re-used during non-interactive reinstalls. See
        the READLN tutorial.
    - name: PATCH_RANDOM_SEED
      detail: PATCH_RANDOM_SEED value
      doc: See RANDOM_SEED.
    - name: ADD_STORE_ITEM
      detail: ADD_STORE_ITEM [ + ] itemName [ position ] charge1 charge2 charge3 flags
        stack [ unlimited ]
      doc: "Add the item itemName to the current STO file. An optional + signifies that\
        \ the new instance of the item should overwrite any existing instance of the same\
        \ item. The item's number of charges are given by the respective charge argument,\
        \ which must take the form of #integer or ( value ). The optional position argument\
        \ must be one of AFTER String, BEFORE String, LAST, FIRST or AT value. AFTER will\
        \ place the new item behind the item given by String. BEFORE will place the item\
        \ before the item provided by String. LAST will place the new item after all existing\
        \ items. FIRST will place the new item as the first item in the store. AT will\
        \ place the new item at the position given by value, with the first item having\
        \ position 0. If no position argument is given, ADD_STORE_ITEM defaults to FIRST.\
        \ The argument flags must be a string consisting of one of none, identified, unstealable,\
        \ stolen, identified&stolen or identified&unstealable. The argument stack sets\
        \ the number of item the store carries in the stack and must take the form of\
        \ #integer or ( value ). The optional argument unlimited should be one of the\
        \ strings limited or unlimited and controls whether the store should carry an\
        \ inexhaustible stack of the new item, or not. limited is the default behaviour.\
        \ See the ADD_STORE_ITEM tutorial for more information."
    - name: REMOVE_STORE_ITEM
      detail: REMOVE_STORE_ITEM itmName list
      doc: "Remove the listed items from the current store. Does nothing if an item is\
        \ not for sale. \tMultiple instances are removed."
    - name: READ_2DA_ENTRY
      detail: READ_2DA_ENTRY value value value variable
      doc: The first value is the row, the second is the column and the third is the required
        column count. The variable specified is set to the entry on the given column of
        the given row, but only column with at least as many columns as the required column
        count are considered. This is the reverse of SET_2DA_ENTRY.
    - name: READ_2DA_ENTRIES_NOW
      detail: READ_2DA_ENTRIES_NOW string value
      doc: The contents of the 2DA table is read in one go into an array derived from
        the first parameter, string. The second parameter, value, is the required column
        count. Rows with fewer columns are disregarded. The parameter string is also used
        to set a variable named after string that is set to the number of rows in the
        2DA table with the required number of columns. Retrieve values from the constructed
        array with READ_2DA_ENTRY_FORMER. If you use READ_2DA_ENTRIES_NOW together with
        SET_2DA_ENTRY_LATER you must use different string variables for the two. See the
        READ_2DA_ENTRIES_NOW tutorial.
    - name: READ_2DA_ENTRY_FORMER
      detail: READ_2DA_ENTRY_FORMER string value value variable
      doc: Retrieves values from an array constructed by READ_2DA_ENTRIES_NOW. The first
        parameter, string, is the name of the array. The following two values are the
        2DA row and column from which to read the entry. The value of the 2DA entry is
        stored in the last parameter, variable. See the READ_2DA_ENTRY_FORMER tutorial.
    - name: COUNT_2DA_ROWS
      detail: COUNT_2DA_ROWS value variable
      doc: The first value is the required column count. This command counts the number
        of rows in the current file (which should be a 2DA file) that have at least as
        many columns as the required column count and stores the result in the variable.
    - name: COUNT_2DA_COLS
      detail: COUNT_2DA_COLS variable
      doc: This command counts the number of columns in the current file (which should
        be a 2DA file) and stores the result in the variable.
    - name: COUNT_REGEXP_INSTANCES
      detail: COUNT_REGEXP_INSTANCES optcase optexact regexp variable
      doc: This command counts the number of times regexp appears in the current file
        and stores the result in the variable. Variable substitution is performed on regexp
        prior to regexp handling (EG, if %var% = ~abc~, ~[%var%]~ is evaluated as ~[abc]~).
    - name: LOOKUP_IDS_SYMBOL_OF_INT
      detail: LOOKUP_IDS_SYMBOL_OF_INT variable idsFile value
      doc: "The symbolic constant associated with value in idsFile (which may contain\
        \ user variables) is stored in variable. If that doesn't work, value is stored\
        \ in variable. Example: LOOKUP_IDS_SYMBOL_OF_INT foo ~spell~ 1101 SPRINT myfile\
        \ \"SPELL\" LOOKUP_IDS_SYMBOL_OF_INT bar ~%myfile%~ (0x44c + 1) LOOKUP_IDS_SYMBOL_OF_INT\
        \ baz ~spell~ 77777 Both foo and bar are CLERIC_BLESS while baz is 777777."
    - name: COMPILE_BAF_TO_BCS
      doc: DEPRECATED. Use DECOMPILE_AND_PATCH instead.The current file, which must be
        a valid BAF script, is compiled to a BCS. In general you should use the COMPILE
        TP2 Action instead, unless you are using other patch commands to modify the file
        under consideration.
    - name: DECOMPILE_BCS_TO_BAF
      doc: DEPRECATED. Use DECOMPILE_AND_PATCH instead.The current file, which must be
        a valid BCS script, is decompiled to a BAF.
    - name: DECOMPILE_DLG_TO_D
      doc: DEPRECATED. Use DECOMPILE_AND_PATCH instead.The current file, which must be
        a valid DLG file, is decompile to a textual D file (with string refs and no comments).
        Once you have a D file you can use other patch commands to change the actions
        and triggers around. You should use D actions (like REPLACE_ACTION_TEXT) instead
        whenever possible.
    - name: COMPILE_D_TO_DLG
      doc: DEPRECATED. Use DECOMPILE_AND_PATCH instead.The current file, which must be
        a valid D file that defines a single DLG file (via an obvious BEGIN action) is
        compiled to a DLG. Typically this is only used after a DECOMPILE_DLG_TO_D.
    - name: DECOMPILE_AND_PATCH
      detail: DECOMPILE_AND_PATCH BEGIN patch list END
      doc: Acts like DECOMPILE_BCS_TO_BAF // or DLG_TO_D patch list COMPILE_BAF_TO_BCS
        // or D_TO_DLG except it enforces that the DECOMPILE is followed by the compile,
        can indiscriminately patch BCS and DLG files, and is guaranteed not to leave a
        decompiled file in the override (if decompiling, patching or recompiling fails,
        a warning is printed and the original version of the file is left in the override).
    - name: REFACTOR_TRIGGER
      detail: REFACTOR_TRIGGER optcase optexact String String
      doc: "Works like REPLACE_TEXTUALLY, except that it only works on triggers (for both\
        \ D and BAF files) and applies Boolean Algebra to ensure that the structure of\
        \ the trigger is not broken (like REPLACE_TEXTUALLY would do if you are substituting\
        \ one trigger with several and the matching trigger is inside an OR() block and/or\
        \ negated).Caveats: \n this command is very slow, so you should use REPLACE_TEXTUALLY\
        \ if you are substituting a trigger with another, as well as using IF to \tavoid\
        \ calling this patch on script files that do not contain the trigger \tyou are\
        \ looking for. \nthe resulting file will have messed up whitespace, so remember\
        \ that if you plan on using REPLACE_TEXTUALLY later (the file will work correctly\
        \ \tin-game). Applying another (empty) DECOMPILE_AND_PATCH will fix this issue.\
        \ \nthe searching regexp must match exactly against a single trigger (so REFACTOR_TRIGGER\
        \ ~A() B()~ ~C()~ or \tREFACTOR_TRIGGER ~A(~ ~C() A(~ will not work). The substituting\
        \ \tstring can contain multiple triggers."
    - name: REFACTOR_BAF_TRIGGER
      detail: REFACTOR_BAF_TRIGGER optcase optexact String String
      doc: Synonym for REFACTOR_TRIGGER.
    - name: REFACTOR_D_TRIGGER
      detail: REFACTOR_D_TRIGGER optcase optexact String String
      doc: Synonym for REFACTOR_TRIGGER.
    - name: REPLACE_EVALUATE
      detail: REPLACE_EVALUATE optcase findRegexp BEGIN patch list END replaceRegexp
      doc: 'For every instance of the regexp findRegexp found, the patch list is evaluated
        (with the variable MATCHi set to the ith matched group in findRegexp), variable
        substitution is performed on replaceRegexp, and then findRegexp is replaced by
        replaceRegexp. Note that REPLACE_EVALUATE defines up to 200 MATCHi variables,
        but that MATCH1 is normally the variable matching the first group in findRegexp.
        Due to details of the implementation, MATCH0 normally evaluates to the string
        matched by the whole of findRegexp. Any writes done by the patch list (e.g., SAY
        or WRITE_ASCII) are ignored: SET should be the main component of the patch list.
        For example: COPY ~nice.baf~ ~mean.baf~ REPLACE_EVALUATE ~Give(\([0-9]+\),\([0-9]+\))~
        BEGIN SET result = (MATCH1 + MATCH2) / 2 END ~Take(%result%)~ This COPY TP2 Action
        would replace Give(10,20) with Take(15). optcase allows you to decide if the matching
        is case-sensitive or not. Matching is case-sensitive by default.'
    - name: ADD_GAM_NPC
      detail: ADD_GAM_NPC npcCRE npcARE xCoord yCoord
      doc: "See the ADD_GAM_NPC tutorial for more information about this action, which\
        \ is used when adding NPCs to Baldur's Gate 1. BG2 mods should not use this\
        \ command."
    - name: ADD_MAP_NOTE
      detail: ADD_MAP_NOTE xCoord yCoord color String
      doc: 'If the file currently being patched is an ARE area file, this patch command
        adds a map note to it. Valid colors include: gray, violent, green, orange, red,
        blue, darkblue, lightgray. Example: COPY_EXISTING ~ar0202.are~ ~override/ar0202.are~
        ADD_MAP_NOTE #123 #777 ~violet~ ~This is my new map note! Yippee!~ Special thanks
        to Japh for coding this feature.'
    - name: ADD_KNOWN_SPELL
      detail: ADD_KNOWN_SPELL splName spellLevel spellType
      doc: 'When applied to a CRE file, this patch causes the given spell to be known.
        Note that spellLevel counts from 0 (e.g., you should say #2 for a third-level
        Fireball). Possible values for spellType are priest, innate and wizard. Example:
        COPY_EXISTING ~some.cre~ ~override/some.cre~ ADD_KNOWN_SPELL ~SPPR314~ #2 ~priest~
        // Unholy Blight is now known as a 3rd level priest spell Special thanks to Japh
        for coding this feature.'
    - name: ADD_MEMORIZED_SPELL
      detail: ADD_MEMORIZED_SPELL splName spellLevel spellType [ ( value ) ]
      doc: 'When applied to a CRE file, this patch causes the given spell to be memorized
        one more time (or value times if specified). Note that spellLevel counts from
        0 (e.g., you should say #2 for a third-level Fireball). Possible values for spellType
        are priest, innate and wizard. Example: COPY_EXISTING ~some.cre~ ~override/some.cre~
        ADD_MEMORIZED_SPELL ~SPPR314~ #2 ~priest~ ( 5 ) // Unholy Blight is now memorized
        five times as 3rd priest'
    - name: REMOVE_KNOWN_SPELL
      detail: REMOVE_KNOWN_SPELL splName list
      doc: 'When applied to a CRE file, this patch causes all of the listed spells to
        be removed. Example: COPY_EXISTING ~aerie.cre~ ~override/aerie.cre~ REMOVE_KNOWN_SPELL
        ~sppr101~ ~sppr102~ Special thanks to Japh for coding this feature.'
    - name: REMOVE_MEMORIZED_SPELL
      detail: REMOVE_MEMORIZED_SPELL splName list
      doc: 'When applied to a CRE file, this patch causes all of the listed spells to
        be removed from their memory. Example: COPY_EXISTING ~aerie.cre~ ~override/aerie.cre~
        REMOVE_MEMORIZED_SPELL ~sppr101~ ~sppr102~'
    - name: SET_BG2_PROFICIENCY
      detail: SET_BG2_PROFICIENCY String value
      doc: "Removes all effects from the current CRE file that alter the proficiency specified\
        \ by \tString (relative to Stats.ids). After that, if value is different from\
        \ zero, add an effect \tto set said proficiency to value."
    - name: ADD_CRE_ITEM
      detail: ADD_CRE_ITEM itmName charge1 charge2 charge3 flags slot [ EQUIP ] [ TWOHANDED
        ] [ NOMOVE ]
      doc: 'Add the item itmName to the current CRE file, with the number of charges determined
        by charge1, charge2 and charge3, respectively. Each charge should be an integer,
        either in the form of #integer or ( value ). The argument flags must be a string
        consisting of one of none, identified, unstealable, stolen, undroppable, identified&stolen,
        identified&unstealable, identified&undroppable, unstealable&undroppable, stolen&undroppable,
        identified&stolen&undroppable, identified&unstealable&undroppable. The argument
        slot should be a whitespace-separated list of entries chosen from helmet, armor,
        shield, gloves, lring, rring, amulet, belt, boots, weapon1, weapon2, weapon3,
        weapon4, quiver1, quiver2, quiver3, quiver4, cloak, qitem1, qitem2, qitem3, inv1,
        inv2, inv3, inv4, inv5, inv6, inv7, inv8, inv9, inv10, inv11, inv12, inv13, inv14,
        inv15, inv16. On PST, there are the additional slots tattoo1, tattoo2, tattoo3,
        earring1, earring2, inv17, inv18, inv19 and inv20. On IWD2, there are the additional
        slots shield1, shield2, shield3, shield4, inv17, inv18, inv19, inv20, inv21, inv22,
        inv23 and inv24. ADD_CRE_ITEM will add the item to the first empty slot in the
        list. If no slot is empty, the item will be placed in the first slot in the list
        and the item that previously occupied the slot will be moved to the general inventory.
        If the general inventory is full, the moved item will be discarded. Additionally,
        slot may contain one or more entries chosen from inv, qitem, quiver, weapon, ring.
        These entries unfold to the full range of corresponding slots. For example, qitem
        unfolds to qitem1, qitem2 and qitem3. On PST, you may additionally use tattoo
        and earring. On IWD2, you may additionally use shield. The optional argument EQUIP
        only applies to the weapon slots only and will make the creature have the weapon
        selected. The optional argument TWOHANDED also only applies to weapon slots and
        will cause items in the shield slot to be unequipped. The optional argument NOMOVE
        will cause the new item to be added to the specified slot(s) only if there is
        an empty slot, otherwise the new item is placed in the inventory. See the ADD_CRE_ITEM
        tutorial.'
    - name: REPLACE_CRE_ITEM
      detail: 'REPLACE_CRE_ITEM itmName #charge1 #charge2 #charge3 flags slot [ EQUIP
        ] [ TWOHANDED ]'
      doc: "If there's an item in the slot position, replace it; otherwise, process\
        \ ADD_CRE_ITEM"
    - name: REMOVE_CRE_ITEM
      detail: REMOVE_CRE_ITEM itmName list
      doc: "Remove the listed items from the current creature. Does nothing if an item\
        \ is not possessed. \tMultiple instances are removed."
    - name: REMOVE_CRE_ITEMS
      doc: Remove all items from the current creature.
    - name: REMOVE_CRE_EFFECTS
      doc: Remove all effects from the current creature.
    - name: REMOVE_KNOWN_SPELLS
      doc: Remove all known spells from the current creature.
    - name: REMOVE_MEMORIZED_SPELLS
      doc: Remove all memorized spells from the current creature.
    - name: PATCH_SILENT
      doc: "makes WeiDU skip all messages; it's reenabled once a component is installed\
        \ (or fails to), or a PRINT, PATCH_PRINT, VERBOSE or PATCH_VERBOSE is found."
    - name: PATCH_VERBOSE
      doc: undoes the latest SILENT or PATCH_SILENT command.
    - name: INNER_PATCH
      detail: INNER_PATCH buffString BEGIN patch list END
      doc: 'Any WeiDU variables inside %s within buffString are replaced by their values.
        All of the patches given are evaluated as if the contents of the current file
        were buffString. Any modifications to buffString are thrown away (making this
        mostly useful for reads). Example: INNER_PATCH "ABC" BEGIN READ_BYTE 0x2 "myvar"
        END PATCH_PRINT "myvar is %myvar%" This sequence will always print myvar is 67
        (since 67 is the ASCII code for C).'
    - name: INNER_PATCH_SAVE
      detail: INNER_PATCH_SAVE savevar buffString BEGIN patch list END
      doc: 'As with INNER_PATCH, except that any modifications to buffString are stored
        inside savevar. Example: SPRINT foo "ABC" INNER_PATCH_SAVE bar "%foo%" BEGIN WRITE_BYTE
        0x2 65 END PATCH_PRINT "foo is %foo%, bar is %bar%" This sequence will always
        print foo is ABC, bar is ABA (since 65 is the ASCII code for A).'
    - name: INNER_PATCH_FILE
      detail: INNER_PATCH_FILE resource BEGIN patch list END
      doc: 'Any WeiDU variables inside %s within resource are replaced by their values.
        If the resulting resource is present in the game or in the override folder, the
        patches given are evaluated as if the current file were that resource. If not,
        nothing happens. Any modifications to that resource are thrown away (making this
        mostly useful for reads). Example: INNER_PATCH_FILE "SW1H01.ITM" BEGIN READ_BYTE
        0x1 "myvar" END PATCH_PRINT "myvar is %myvar%" This sequence will always print
        myvar is 84 (since 84 is the ASCII code for T and SW1H01.ITM starts with ITM).'
    - name: INNER_ACTION
      detail: INNER_ACTION BEGIN TP2 Action list END
      doc: See the INNER_ACTION tutorial, but loosely the current COPY is paused, the
        given TP2 Actions are executed, and then the current COPY is resumed. Note that
        an INNER_ACTION should never modify a file that is being modified by the current
        action. For example, never put APPEND foo.2da inside of COPY_EXISTING foo.2da
        . More formally, if the inner action and the outer action both modify the same
        file, the results are undefined.
    - name: EDIT_SAV_FILE
      detail: EDIT_SAV_FILE level [ ADD_IF_MISSING ] [ filename list ] BEGIN TP2 Patch
        list END
      doc: The current file should be a SAV file. EDIT_SAV_FILE will iterate over the
        files contained within the SAV file, set the variable SAV_FILE to the name of
        the current file and evaluate the patch list against the decompressed contents
        of SAV_FILE. The file contents are then recompressed into the SAV file using the
        specified compression level. level can be 0 to 9, where 0 means no compression,
        1 is the fastest compression and 9 is the best compression.If the list of filenames
        is non-empty, only files whose name appear in that list are patched (the comparison
        is case-insensitive, variables and arrays are parsed if using EVALUATE_BUFFER
        or AUTO_EVAL_STRINGS). If the optional ADD_IF_MISSING is provided, the file will
        be loaded if it exists (determined with FILE_EXISTS_IN_GAME) and the patches are
        applied. If the file does not exist, the patches will instead be applied to the
        empty buffer. The resulting file is added to the SAV itself.
    - name: DECOMPRESS_REPLACE_FILE
      detail: DECOMPRESS_REPLACE_FILE start length uncompressedlength
      doc: "Decompress (ZLIB) the start...start+length-1 portion of the current \tfile\
        \ (requires to specify the uncompressed length as well). The result overwrites\
        \ \tthe current file. It's equivalent to \tDECOMPRESS_INTO_FILE start length\
        \ uncompressedlength 0 BUFFER_LENGTH"
    - name: DECOMPRESS_INTO_FILE
      detail: DECOMPRESS_INTO_FILE start length uncompressedlength overwritefrom overwriteto
      doc: "Decompress (ZLIB) the start...start+length-1 portion of the current \tfile\
        \ (requires to specify the uncompressed length as well). The result overwrites\
        \ \tthe overwritefrom...overwriteto-1 portion of the current file."
    - name: DECOMPRESS_INTO_VAR
      detail: DECOMPRESS_INTO_VAR start length uncompressedlength varName
      doc: "Decompress (ZLIB) the start...start+length-1 portion of the current \tfile\
        \ (requires to specify the uncompressed length as well). The result is stored\
        \ \tinto varName."
    - name: COMPRESS_REPLACE_FILE
      detail: COMPRESS_REPLACE_FILE start length level
      doc: "Compress (ZLIB) the start...start+length-1 portion of the current \tfile (level\
        \ is 0 to 9; 0 means don't compress, 1 is fastest compression, 9 is best\
        \ \tcompression). The result overwrites \tthe current file. It's equivalent\
        \ to \tDECOMPRESS_INTO_FILE start length uncompressedlength 0 BUFFER_LENGTH"
    - name: COMPRESS_INTO_FILE
      detail: COMPRESS_INTO_FILE start length level overwritefrom overwriteto
      doc: "Compress (ZLIB) the start...start+length-1 portion of the current \tfile (level\
        \ is 0 to 9; 0 means don't compress, 1 is fastest compression, 9 is best\
        \ \tcompression). The result overwrites \tthe overwritefrom...overwriteto-1 portion\
        \ of the current file."
    - name: COMPRESS_INTO_VAR
      detail: COMPRESS_INTO_VAR start length level varName
      doc: "Compress (ZLIB) the start...start+length-1 portion of the current \tfile (level\
        \ is 0 to 9; 0 means don't compress, 1 is fastest compression, 9 is best\
        \ \tcompression). The result is stored into varName."
    - name: LAUNCH_PATCH_MACRO
      detail: LAUNCH_PATCH_MACRO String
      doc: Launch a patch macro. Refer to the macros section for additional information.
        You may use LPM as a synonym for LAUNCH_PATCH_MACRO.
    - name: LAUNCH_PATCH_FUNCTION
      detail: LAUNCH_PATCH_FUNCTION String [ INT_VAR variable [ = value ] ... ] [ STR_VAR
        variable [ = [ EVALUATE_BUFFER ] String ] ... ] [ RET variable [ = String ] ...
        ] [ RET_ARRAY variable [ = String ] ... ] END
      doc: Launch a patch function. Refer to the Functions section for additional information.
        You may use LPF as a synonym for LAUNCH_PATCH_FUNCTION.
    - name: PATCH_TIME
      detail: PATCH_TIME String BEGIN patch list END
      doc: "Measure the time taken to execute the patches and report it under the label\
        \ String together with the other time measurements at the end of the mod'\
        s debug file."
    - name: ADD_ITEM_EQEFFECT
      doc: Adds an equipping effect to an item. All variables except probability1 are 0 by default. This is a PATCH macro and function.\
      - SET opcode to opcode
      - SET target to target type
      - SET timing to timing type
      - SET parameter1 to first parameter
      - SET parameter2 to second parameter
      - SET power to power
      - SET resist_dispel to magic resistance/dispel type
      - SET duration to duration
      - SET probability1 to probability 1 (default 100)
      - SET probability2 to probability 2
      - SPRINT resource to resource (8 chars max)
      - SET dicenumber to number of dices to be thrown
      - SET dicesize to size of dices to be thrown
      - SET savingthrow to type of savingthrow to be allowed against the effect
      - SET savebonus to saving throw bonus
      - SET special to the special parameter (only valid for functions; not macros)
      - SET header to number of extended header (starting from 1) the effect should be added to (by default the effect is added to every header).
      - SET insert_point to the position of the effect. If this variable is 0 the effect will be inserted as the first effect of the extended header. If this variable is negative or greater than the number of effects, the effect will be inserted as the last effect. The effect is added as the first effect by default.

tp2-when:
  type: 14 # keyword
  items:
    - name: IF_SIZE_IS
      detail: IF_SIZE_IS fileSize
      doc: True if the input file size is fileSize. You may use I_S_I as a synonym for
        IF_SIZE_IS.
    - name: IF
      detail: IF regexp
      doc: True if the input file contains regexp.
    - name: UNLESS
      detail: UNLESS regexp
      doc: False if the input file contains regexp.
    - name: BUT_ONLY_IF_IT_CHANGES
      doc: True only if the file is actually changed by patching actions. Unlike all other
        when clauses, this one is evaluated just before the result would be written out
        to the disk. You may use BUT_ONLY as a synonym for BUT_ONLY_IF_IT_CHANGES.
    - name: IF_EXISTS
      doc: True only if the file exists. For COPY, this check is done with FILE_EXISTS.
        For COPY_EXISTING, COPY_EXISTING_REGEXP, COPY_RANDOM, APPEND and APPEND_COL this
        check is done with FILE_EXISTS_IN_GAME. For COPY_ALL_GAM_FILES, this when clause
        is redundant.

tp2-value:
  type: 14 # keyword
  items:
    - name: MODULO
      detail: value MODULO value
      doc: An operation that returns the remainder of a division between two numbers.
        If the second value is 0, the returned value is 0. You may use REM as a synonym.
    - name: BYTE_AT
      detail: BYTE_AT offset
      doc: The 8-bit value from the file at the given offset.
    - name: SBYTE_AT
      detail: SBYTE_AT offset
      doc: The 8-bit signed value from the file at the given offset.
    - name: SHORT_AT
      detail: SHORT_AT offset
      doc: The 16-bit value from the file at the given offset.
    - name: SSHORT_AT
      detail: SSHORT_AT offset
      doc: The 16-bit signed value from the file at the given offset.
    - name: LONG_AT
      detail: LONG_AT offset
      doc: The 32-bit value from the file at the given offset.
    - name: SLONG_AT
      detail: SLONG_AT offset
      doc: The 32-bit signed value from the file at the given offset.
    - name: NOT
      detail: NOT value
      doc: Negation. If the value is 0, the result is 1. Otherwise the result is 0.
    - name: ABS
      detail: ABS Value
      doc: Absolute value. If the value is >= 0, the result is x. Otherwise the result
        is -x.
    - name: BAND
      detail: value BAND value
      doc: 'Bitwise And. 0b101 BAND 0b110 = 0b100. Synonym: &.'
    - name: BOR
      detail: value BOR value
      doc: 'Bitwise Or. 0b101 BOR 0b110 = 0b111. Synonym: |.'
    - name: BXOR
      detail: value BXOR value
      doc: 'Bitwise Exclusive Or. 0b101 BXOR 0b110 = 0b011. Synonym: ^^.'
    - name: BNOT
      detail: BNOT value
      doc: 'Bitwise Not. BNOT 0b111 = 0b1111111111111111111111111111000. Synonym: `.'
    - name: BLSL
      detail: value BLSL value
      doc: 'Bitwise Logical Shift Left. 0b101 BLSL 2 = 0b10100. Synonym: <<.'
    - name: BLSR
      detail: value BLSR value
      doc: 'Bitwise Logical Shift Right. 0b101 BLSR 2 = 0b1. Synonym: >>.'
    - name: BASR
      detail: value BASR value
      doc: 'Bitwise Arithmetic Shift Right. This is an arithmetic shift: the sign bit
        of the first value is replicated and inserted in the vacated bits. 0b101 BASR
        2 = 0b1.'

    - name: STRING_COMPARE
      detail: String STRING_COMPARE String
      doc: "This is legacy syntax for STRING_EQUAL: This expression evaluates to 0 if\
        \ and only if its two string arguments are equal (have the same length and the\
        \ same contents). Otherwise it will evaluate to a negative or positive integer,\
        \ depending on whether the first string argument would sort lexicographically\
        \ before or after the second string argument. variables within the strings (e.g.,\
        \ \"%mykit%\") are replaced by their values. Note that variables that\
        \ you want expanded must be put in %'s, otherwise the raw text will be used.\
        \ You may use STR_CMP as a synonym for STRING_COMPARE. This function works just\
        \ like C's strcmp. Note also that STRING_EQUAL and STRING_COMPARE are similar,\
        \ but STRING_EQUAL has more intuitive return values."
    - name: STRING_COMPARE_CASE
      detail: String STRING_COMPARE_CASE String
      doc: 'This is legacy syntax for STRING_EQUAL_CASE: As STRING_COMPARE, but the comparison
        ignores case. That is, "ANOMEN" and "aNoMeN" are considered equal.'
    - name: STRING_EQUAL
      detail: String STRING_EQUAL String
      doc: "This expression evaluates to 1 if and only if its two string arguments are\
        \ equal (have the same length and the same contents), otherwise it values to 0.\
        \ variables within the strings (e.g., \"%mykit%\") are replaced by their\
        \ values. Note that variables that you want expanded must be put in %'s,\
        \ otherwise the raw text will be used. Note also that STRING_EQUAL and STRING_COMPARE\
        \ are similar, but STRING_EQUAL has more intuitive return values."
    - name: STRING_EQUAL_CASE
      detail: String STRING_EQUAL_CASE String
      doc: As STRING_EQUAL, but the comparison ignores case. That is, "ANOMEN" and "aNoMeN"
        are considered equal. You may use STR_EQ as a synonym for STRING_EQUAL_CASE.
    - name: STRING_MATCHES_REGEXP
      detail: String STRING_MATCHES_REGEXP String
      doc: "As STRING_COMPARE_CASE, but the second string is treated as a regexp. Thus\
        \ \"AR1005\" STRING_MATCHES_REGEXP \"AR[0-9]+\" evaluates to 0 (\"no difference\"
        ). You may use STRING_COMPARE_REGEXP as a synonym."
    - name: STRING_CONTAINS_REGEXP
      detail: String STRING_CONTAINS_REGEXP String
      doc: "As STRING_MATCHES_REGEXP, but it evaluates to 0 if the first string contains\
        \ the second regexp. Thus \"AR1005\" STRING_CONTAINS_REGEXP \"[w-z]\" evaluates\
        \ to 1 (\"mismatch\").Be warned that this does the exact opposite of what\
        \ the name suggests."
    - name: GAME_IS
      detail: GAME_IS String
      doc: "Returns true if the IE game variant is one of the entries in String, otherwise\
        \ it returns false. String is a list of whitespace-separated entries, chosen from\
        \ (case doesn't matter) bg2=soa, tob, iwd2, pst, bg1, totsc, iwd=iwd1, how,\
        \ totlm, tutu, tutu_totsc, bgt, ca, iwd_in_bg2, bgee, bg2ee, eet, iwdee, pstee.\
        \ In the list, bg2=soa means that bg2 and soa are synonyms, and you can use whichever\
        \ one you like. Please note that the items in the list are defined to be mutually\
        \ exclusive (except tob will detect both plain ToB and ToB with BGT installed,\
        \ for legacy purposes), so bg2 will detect a SoA-only game, without either ToB\
        \ or Tutu installed. As such, a mod which is usable with any flavor of BG2 and\
        \ any flavor of Tutu or BG: EE would contain REQUIRE_PREDICATE GAME_IS ~bg2 tob\
        \ tutu tutu_totsc bgee bg2ee~ ."
    - name: ENGINE_IS
      detail: ENGINE_IS String
      doc: "Functions like GAME_IS except bg2=soa will detect SoA-based Tutu games in\
        \ addition to SoA games, and tob will detect ToB-based Tutu games in addition\
        \ to ToB and BGT games. As such, a mod that requires Throne of Bhaal's engine\
        \ enhancements could use REQUIRE_PREDICATE ENGINE_IS ~tob~ ."
    - name: GAME_INCLUDES
      detail: GAME_INCLUDES String
      doc: Returns true if the IE game variant includes the game content specified by
        String. String is a single game chosen from bg1, totsc, bg2=soa, tob, pst, iwd=iwd1,
        how, totlm, iwd2, ca, sod. In the list, bg2=soa means that bg2 and soa are synonyms,
        and you can use whichever one you like. Please note that unlike GAME_IS you only
        specify a single game, rather than a list of games. As an example, GAME_INCLUDES
        ~tob~ will return true for any game which includes the ToB content, such as ToB
        itself, BGT or BG2EE.
    - name: IDS_OF_SYMBOL
      detail: IDS_OF_SYMBOL ( File String )
      doc: Will return the number associated with String in File.ids, or -1 if String
        is not associated in File.ids.
    - name: VARIABLE_IS_SET
      detail: VARIABLE_IS_SET String
      doc: "Returns true if the variable String is set (there's a variable called\
        \ either String or %String%, regardless of whether it is a string or an integer)."
    - name: IS_AN_INT
      detail: IS_AN_INT String
      doc: "Returns true if the variable String is set to an integer (there's a variable\
        \ called either String or %String% with integer value)."
    - name: TRA_ENTRY_EXISTS
      detail: TRA_ENTRY_EXISTS ( String String list )
      doc: "returns true if the variable String maps to a valid TRA entry. \tIf the String\
        \ list is empty the tra entry is looked for into the loaded TRAs, \totherwise\
        \ it's looked for into the listed TRA files."
    - name: IS_SILENT
      doc: Returns true if the output is currently silenced, false otherwise.
    - name: MOD_IS_INSTALLED
      detail: MOD_IS_INSTALLED modTp2Name modComponent
      doc: Returns true if the modComponent of modTp2Name is installed. The syntax is
        the same as with REQUIRE_COMPONENT.
    - name: INSTALL_ORDER
      detail: INSTALL_ORDER modTp2Name1 modComponent1 AFTER modTp2Name2 modComponent2
      doc: Returns true if the modComponent1 of modTp2Name1 is installed after the modComponent2
        of modTp2Name2 (and both components are installed). The syntax is the same as
        with REQUIRE_COMPONENT.
    - name: INSTALL_ORDER
      detail: INSTALL_ORDER modTp2Name1 modComponent1 BEFORE modTp2Name2 modComponent2
      doc: Returns true if the modComponent1 of modTp2Name1 is installed before the modComponent2
        of modTp2Name2 (and both components are installed). The syntax is the same as
        with REQUIRE_COMPONENT.
    - name: ID_OF_LABEL
      detail: ID_OF_LABEL modTp2Name String
      doc: Returns the numerical identifier (component number) of the component in modTp2Name
        which has the given LABEL. Returns -231 if no such tp2 exists, said tp2 has no
        component with that LABEL, or two or more components have that LABEL. In the last
        two cases will print a WARNING.
    - name: STATE_WHICH_SAYS
      detail: STATE_WHICH_SAYS text FROM String
      doc: "String must be an in-game or in-override .dlg file. Returns: \n Fails the\
        \ installation if it can't evaluate the text (an @x reference out of bounds)\
        \ \n-3 if the text is not currently in the tlk or in the list of strings to add\
        \ \n-2 if the text is spoken (= SAY ~Foo~) at least twice in the file String \n\
        -1 if the text is never spoken in the file String Otherwise it returns the number\
        \ of the state in which text is spoken in the file String. @x references are taken\
        \ from the loaded TRA files (the ones defined in the Language part)."
    - name: STATE_WHICH_SAYS
      detail: STATE_WHICH_SAYS value IN String1 FROM String2
      doc: As above, except that @x references are taken from the String1 tra file. In
        particular, one %s in String1 is expanded to the list of directories; for example
        (as of Sola v102), solarom/%s/epilogue.tra would match solarom/american/epilogue.tra
        solarom/french/epilogue.tra solarom/german/epilogue.tra solarom/italian/epilogue.tra
        solarom/polski/epilogue.tra solarom/portuguese/epilogue.tra solarom/russian/epilogue.tra
    - name: RESOLVE_STR_REF
      detail: RESOLVE_STR_REF ( text )
      doc: Resolves the given text (adding it to the tlk), and returns its TLK index (so
        you can pass the result of this command to a function which then uses WRITE_LONG
        rather than SAY).
    - name: NEXT_STRREF
      doc: Returns the next available string reference in the TLK file.
    - name: RANDOM
      detail: RANDOM ( value value )
      doc: A random-number generator. The first value is the lower bound, the second value
        is the upper bound. A random integer between the lower bound and the upper bound
        (inclusive) is returned. Thus RANDOM(3 5) can return 3, 4 or 5. If the lower bound
        is greater than the upper bound, zero is returned. See also RANDOM_SEED.
    - name: BUFFER_LENGTH
      doc: Returns the length of the string currently being patched, or 0 if outside of
        a patch expression.
    - name: INDEX
      detail: INDEX ( optcase optexact string1 string2 [ value ] )
      doc: Returns the index of the first regexp match of string1 inside string2, or -1
        if not found. If provided, value specifies from what point of string2 the searching
        should begin (instead of 0).
    - name: RINDEX
      detail: RINDEX ( optcase optexact string1 string2 [ value ] )
      doc: Returns the index of the last regexp match of string1 inside string2, or -1
        if not found. If provided, value specifies from what point of string2 the searching
        should begin (instead of STRING_LENGTH string2).
    - name: INDEX_BUFFER
      detail: INDEX_BUFFER ( optcase optexact string [ value ] )
      doc: Returns the index of the first regexp match of string inside the current string,
        or -1 if not found. If provided, value specifies from what point of the string
        the searching should begin (instead of 0).
    - name: RINDEX_BUFFER
      detail: RINDEX_BUFFER ( optcase optexact string [ value ] )
      doc: Returns the index of the last regexp match of string inside the current string,
        or -1 if not found. If provided, value specifies from what point of the string
        the searching should begin (instead of BUFFER_LENGTH).
    - name: STRING_LENGTH
      detail: STRING_LENGTH String
      doc: Returns the length of the argument String (after variable evaluation).
    - name: FILE_CONTAINS
      detail: FILE_CONTAINS fileName regexp
      doc: Evaluates to 1 if the file fileName contains the regular expression regexp
        and 0 otherwise. Case is ignored.
    - name: FILE_CONTAINS_EVALUATED
      detail: FILE_CONTAINS_EVALUATED ( fileName varsRegexp )
      doc: 'First, all WeiDU variables enclosed in %s in varsRegexp and fileName are substituted.
        The expression is 1 if the resulting regexp occurs in fileName and 0 otherwise.
        If fileName does not exist or has size 0, the result is 0. The comparison ignores
        case. See also FILE_CONTAINS. Example: COPY_EXISTING_REGEXP ~.*\.CRE~ ~override~
        READ_BYTE 0x273 class READ_ASCII 0x280 deathvar PATCH_IF (class = 14) AND // class
        14 = CLERIC_MAGE (NOT FILE_CONTAINS_EVALUATED(~pdialog.2da~ ~%deathvar%~)) THEN
        BEGIN ADD_CRE_ITEM ~POTN08~ #10 #10 #10 ~IDENTIFIED~ ~INV15~ END BUT_ONLY_IF_IT_CHANGES
        The example gives ten healing potions to all cleric-mages who cannot join the
        party. Notably it excludes Aerie since she has the death variable Aerie and pdialog.2da
        contains AERIE.'
    - name: FILE_EXISTS
      detail: FILE_EXISTS fileName
      doc: Evaluates to 1 if the file exists in the filesystem (or the bif file is referenced
        inside the chitin.key) and evaluates to 0 otherwise. The results of FILE_EXISTS
        are undefined if fileName is a directory.
    - name: DIRECTORY_EXISTS
      detail: DIRECTORY_EXISTS dirName
      doc: Evaluates to 1 if dirName is a directory and exists in the filesystem and evaluates
        to 0 otherwise.
    - name: FILE_EXISTS_IN_GAME
      detail: FILE_EXISTS_IN_GAME fileName
      doc: "Evaluates to 1 if the file exists as a game resource and has non-zero size.\
        \ Evaluates to 0 otherwise. BIFFs and the override directory are searched in the\
        \ standard manner. Evaluates to 0 for a file that does not exist but has been\
        \ ALLOW_MISSING'd."
    - name: FILE_MD5
      detail: FILE_MD5 fileName md5sum
      doc: Evaluates to 1 if the file exists and has the given MD5 checksum. Evaluates
        to 0 otherwise. Two different files are exceptionally unlikely to have the same
        MD5 checksum. In any event, the discovered checksum is printed to the log. If
        the file does not exist, it evaluates to 0.
    - name: FILE_IS_IN_COMPRESSED_BIFF
      detail: FILE_IS_IN_COMPRESSED_BIFF fileName
      doc: Evaluates to 1 if the file is stored in a compressed biff (ignoring copies
        in the override). Evaluates to 0 otherwise (the file is not in a biff, or it is
        in an uncompressed biff).
    - name: BIFF_IS_COMPRESSED
      detail: BIFF_IS_COMPRESSED fileName
      doc: Evaluates to 1 if the file is a compressed biff. Evaluates to 0 otherwise.FileName
        must match against the contents of what is stored in chitin.key (similar to how
        command-line arguments that touch bif files work). For example, data/AREA000A.bif.
        Notably, SOURCE_BIFF outputs file names compatible with this command.
    - name: FILE_SIZE
      detail: FILE_SIZE fileName fileSize
      doc: Evaluates to 1 if the size of the file fileName is exactly fileSize. Evaluates
        to 0 otherwise.
    - name: SIZE_OF_FILE
      detail: SIZE_OF_FILE fileName
      doc: Returns the size of fileName or -1 if the file does not exist. Variables in
        fileName are evaluated. fileName can be a file on the local file system or an
        inlined file.
    - name: VALID_SCRIPT_ACTIONS
      detail: VALID_SCRIPT_ACTIONS variable
      doc: Variable can be an array construct and should be or evaluate to a string of
        whitespace-separated Infinity Engine actions. Returns true if the string compiles
        into BCS without unrecoverable errors, otherwise false.
    - name: VALID_SCRIPT_TRIGGERS
      detail: VALID_SCRIPT_TRIGGERS variable
      doc: Variable can be an array construct and should be or evaluate to a string of
        whitespace-separated Infinity Engine triggers. Returns true of the string compiles
        into BCS without unrecoverable errors, otherwise false.
    - name: EVALUATE_BUFFER
      detail: EVALUATE_BUFFER variable
      doc: 'User variables inside the given string are evaluated one additional time.
        You may prepend EVALUATE_BUFFER when a value is called for and you would normally
        use a string. You may also use it for SET and SPRINT statements. Example: SPRINT
        x ~y~ SET y = 5 SPRINT z EVALUATE_BUFFER ~tricky %%x%%~ SET EVALUATE_BUFFER "%x%"
        += 77 PATCH_PRINT "y is %y% ; z is %z%" This prints out y is 82 ; z is tricky
        5. You may also do hackery like FILE_SIZE "myfile" "%%indirection%%". Be very
        careful with this feature.'
#    - name: $array(index
#      detail: $array(index list)
#      doc: The so-called array construct. See the tutorial.
    - name: '%WEIDU_ARCH%'
      doc: The special variable WEIDU_ARCH is set to either "x86", "amd64" or "mac" at
        WeiDU startup and can be used to determine the architecture of the WeiDU binary.
    - name: '%WEIDU_OS%'
      doc: The special variable WEIDU_OS is set to either "win32" or "osx" or "unix" at
        WeiDU startup and can be used to determine the operating system for which the
        WeiDU binary was compiled.
    - name: '%COMPONENT_NUMBER%'
      doc: The special variable COMPONENT_NUMBER is set to the number of the component
        being installed.
    - name: '%INTERACTIVE%'
      doc: "The special variable INTERACTIVE is set to 1 if the install is being done\
        \ interactively (IE you launched setup-mymod.exe and you're installing mymod),\
        \ or is set to 0 if the install is being done non-interactively (IE you launched\
        \ setup-mymod.exe and now weidu is reinstalling othermod due to the domino uninstall\
        \ and reinstall)."
    - name: NAME1
      doc: The offset within an infinity engine resource where the unidentified general
        name (e.g., "Battle Axe") is stored.
    - name: NAME2
      doc: "The offset within an infinity engine resource where the identified general\
        \ name (e.g., \"K'logarath +4\") is stored."
    - name: UNIDENTIFIED_DESC
      doc: The offset within an infinity engine resource where the unidentified description is stored.
    - name: IDENTIFIED_DESC
      doc: The offset within an infinity engine resource where the identified description is stored.
    - name: BIO
      doc: The offset within an infinity engine resource where NPC Biography is stored.
    - name: AREA_CITY
    - name: AREA_DAY
    - name: AREA_DUNGEON
    - name: AREA_FOREST
    - name: AREA_NIGHT
    - name: ATTACK1
    - name: ATTACK2
    - name: ATTACK3
    - name: ATTACK4
    - name: BATTLE_CRY1
    - name: BATTLE_CRY2
    - name: BATTLE_CRY3
    - name: BATTLE_CRY4
    - name: BATTLE_CRY5
    - name: BORED
    - name: COMPLIMENT1
    - name: COMPLIMENT2
    - name: COMPLIMENT3
    - name: CRITICAL_HIT
    - name: CRITICAL_MISS
    - name: DAMAGE
    - name: DESC
    - name: DIALOG_DEFAULT
    - name: DIALOG_HOSTILE
    - name: DYING
    - name: EXISTANCE1
    - name: EXISTANCE2
    - name: EXISTANCE3
    - name: EXISTANCE4
    - name: EXISTANCE5
    - name: HAPPY
    - name: HURT
    - name: IDENTIFIED_DESC
    - name: INITIAL_MEETING
    - name: INSULT
    - name: INTERACTION1
    - name: INTERACTION2
    - name: INTERACTION3
    - name: INTERACTION4
    - name: INTERACTION5
    - name: INVENTORY_FULL
    - name: LEADER
    - name: MISCELLANEOUS
    - name: MORALE
    - name: PICKED_POCKET
    - name: REACT_TO_DIE_GENERAL
    - name: REACT_TO_DIE_SPECIFIC
    - name: RESPONSE_TO_COMPLIMENT2
    - name: RESPONSE_TO_COMPLIMENT3
    - name: RESPONSE_TO_INSULT1
    - name: RESPONSE_TO_INSULT2
    - name: RESPONSE_TO_INSULT3
    - name: SELECT_ACTION1
    - name: SELECT_ACTION2
    - name: SELECT_ACTION3
    - name: SELECT_ACTION4
    - name: SELECT_ACTION5
    - name: SELECT_ACTION6
    - name: SELECT_ACTION7
    - name: SELECT_COMMON1
    - name: SELECT_COMMON2
    - name: SELECT_COMMON3
    - name: SELECT_COMMON4
    - name: SELECT_COMMON5
    - name: SELECT_COMMON6
    - name: SELECT_RARE1
    - name: SELECT_RARE2
    - name: SPECIAL1
    - name: SPECIAL2
    - name: SPECIAL3
    - name: TARGET_IMMUNE
    - name: TIRED
    - name: UNHAPPY_ANNOYED
    - name: UNHAPPY_BREAKING
    - name: UNHAPPY_SERIOUS
    - name: HIDDEN_IN_SHADOWS
    - name: SPELL_DISRUPTED
    - name: SET_A_TRAP
    - name: STORE_NAME
    - name: SCRIPT_OVERRIDE
    - name: SCRIPT_CLASS
    - name: SCRIPT_RACE
    - name: SCRIPT_GENERAL
    - name: SCRIPT_DEFAULT
    - name: DEATHVAR
    - name: DIALOG
    - name: AREA_SCRIPT
    
    - name: BIT0
    - doc: 0b00000000000000000000000000000001
    - name: BIT1
    - doc: 0b00000000000000000000000000000010
    - name: BIT2
    - doc: 0b00000000000000000000000000000100
    - name: BIT3
    - doc: 0b00000000000000000000000000001000
    - name: BIT4
    - doc: 0b00000000000000000000000000010000
    - name: BIT5
    - doc: 0b00000000000000000000000000100000
    - name: BIT6
    - doc: 0b00000000000000000000000001000000
    - name: BIT7
    - doc: 0b00000000000000000000000010000000
    - name: BIT8
    - doc: 0b00000000000000000000000100000000
    - name: BIT9
    - doc: 0b00000000000000000000001000000000
    - name: BIT10
    - doc: 0b00000000000000000000010000000000
    - name: BIT11
    - doc: 0b00000000000000000000100000000000
    - name: BIT12
    - doc: 0b00000000000000000001000000000000
    - name: BIT13
    - doc: 0b00000000000000000010000000000000
    - name: BIT14
    - doc: 0b00000000000000000100000000000000
    - name: BIT15
    - doc: 0b00000000000000001000000000000000
    - name: BIT16
    - doc: 0b00000000000000010000000000000000
    - name: BIT17
    - doc: 0b00000000000000100000000000000000
    - name: BIT18
    - doc: 0b00000000000001000000000000000000
    - name: BIT19
    - doc: 0b00000000000010000000000000000000
    - name: BIT20
    - doc: 0b00000000000100000000000000000000
    - name: BIT21
    - doc: 0b00000000001000000000000000000000
    - name: BIT22
    - doc: 0b00000000010000000000000000000000
    - name: BIT23
    - doc: 0b00000000100000000000000000000000
    - name: BIT24
    - doc: 0b00000001000000000000000000000000
    - name: BIT25
    - doc: 0b00000010000000000000000000000000
    - name: BIT26
    - doc: 0b00000100000000000000000000000000
    - name: BIT27
    - doc: 0b00001000000000000000000000000000
    - name: BIT28
    - doc: 0b00010000000000000000000000000000
    - name: BIT29
    - doc: 0b00100000000000000000000000000000
    - name: BIT30
    - doc: 0b01000000000000000000000000000000
    - name: BIT31
    - doc: 0b10000000000000000000000000000000
    
    - name: WNL
      doc: Windows new line
    - name: MNL
      doc: (pre-OSX) Macintosh new line
    - name: LNL
      doc: Linux/Unix/OSX new line
    - name: TAB
      doc: tabulation character
      
    - name: REGISTRY_BG1_PATH
      doc: The path of BG1 (as read from the registry), or empty if not available.
    - name: REGISTRY_BG2_PATH
      doc: The path of BG2 (as read from the registry), or empty if not available.
    - name: REGISTRY_PST_PATH
      doc: The path of PST (as read from the registry), or empty if not available.
    - name: REGISTRY_IWD1_PATH
      doc: The path of IWD1 (as read from the registry), or empty if not available.
    - name: REGISTRY_IWD2_PATH
      doc: The path of IWD2 (as read from the registry), or empty if not available.
    - name: USER_DIRECTORY
      doc: "Evaluates to the directory in which user files are kept. This is the game path on non-EE-type games. On EE-type games, the USER_DIRECTORY variable is constructed from two parts, the user directory and a game-specific directory. If the file engine.lua exists, WeiDU will attempt to read the game-specific directory from it. If the engine.lua does not exist or does not contain the necessary information, WeiDU will use default paths. On Windows, the user directory is the user's personal directory, as read from the Windows registry. On macOS, the user directory is \"$HOME/Documents\". On Linux, the user directory is \"$HOME/.local/share\". In both cases, $HOME is the user's home directory, as read from the pwd database. The default game-specific path for BG: EE is \"Baldur's Gate - Enhanced Edition\"; for BGII: EE it is \"Baldur's Gate II - Enhanced Edition\"; for IWD: EE it is \"Icewind Dale - Enhanced Edition\"; and for PST: EE it is \"Planescape Torment - Enhanced Edition\"."
    - name: SAVE_DIRECTORY
      doc: Evaluates to the directory in which the current game type stores its saved games. This is "%USER_DIRECTORY%/save".
    - name: MPSAVE_DIRECTORY
      doc: Evaluates to the directory in which the current game type stores its multiplayer saved games. The determination is done the same way as with the save directory, but for the directory mpsave instead.
    - name: EE_LANGUAGE
      doc: Evaluates to the Enhanced Edition language directory the user has selected, for example, en_US. This variable is undefined on non-EE games.
