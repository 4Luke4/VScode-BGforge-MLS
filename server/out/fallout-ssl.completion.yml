# types https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.languageserver.protocol.completionitemkind?view=visualstudiosdk-2017
preprocessor_directives:
  type: 14 # keyword
  items:
    - name: elif
    - name: endif
#    - name: '#else'
#    - name: '#if'
    - name: ifdef
    - name: ifndef
    - name: include
    - name: define
    - name: undef

keywords:
  type: 14 # keyword
  items:
    - name: begin
    - name: end
    - name: procedure
engine-procedures:
  type: 3 # function
  items:
    - name: combat_p_proc
      doc: |-
        Called in combat (every turn?).
    - name: critter_p_proc
      doc: |-
        This procedure is called every "heartbeat", which means it's run ten times each second, except during combat.
    - name: damage_p_proc
      doc: |-
        Called when the critter takes damage.
    - name: description_p_proc
      doc: |-
        Called when the player inspects the object (binoculars).
    - name: destroy_p_proc
      doc: |-
        Called on death of the critter or destruction of the object (except when using `destroy_object(self_obj)`).
    - name: look_at_p_proc
      doc: |-
        Called when the player passes the cursor over any object.
    - name: map_enter_p_proc
      doc: |-
        Called once by the engine each time the map is entered from another map. It is not run when the elevation is changed.
    - name: map_update_p_proc
      doc: |-
        Called roughly once every 30 seconds. It is also called each time you exit a dialogue, each time you exit the pipboy screen and each time you use an item. In addition to that, it is run once when you enter the map, and, seemingly, twice when you change elevation.
    - name: pickup_p_proc
      doc: |-
        Called when the player is caught stealing from this critter.
    - name: start
      doc: |-
        This procedure is only supposed to be called by the engine when the script is first run, then never again, unless specifically called from somewhere else.
    - name: talk_p_proc
      doc: |-
        Called when the player tries to initiate dialogue with the critter.
    - name: timed_event_p_proc
      doc: |-
        This procedure is called by the function `add_timer_event(ObjPtr obj, int time, int fixed_param)`. ObjPtr points to the object whose script's `timed_event_p_proc` procedure you want to access. Time is the number of game ticks (1 game tick = 1/10 seconds) you want to pass before the `timed_event_p_proc` is called. `fixed_param` is a variable you can set to differentiate between various timed events. In `timed_event_p_proc`, you can check the value of `fixed_param` against whatever number you used when calling `add_timer_event`. This allows for multiple uses of `timed_event_p_proc` in the same script.
    - name: use_obj_on_p_proc
      doc: |
        Called when:
        - A critter uses an object on another critter. (Or themselves).
        - A critter uses an object from inventory screen AND this object does not have "Use" action flag set and it's not active flare or explosive.
        - Player or AI uses any drug.
    - name: use_p_proc
      doc: |
        Called when:
        - A critter uses an object from inventory which have "Use" action flag set or it's an active flare or dynamite.
        - Player uses an object from main interface.
    - name: use_skill_on_p_proc
      doc: |-
        Called when a skill is used on the object.
base-functions:
  type: 3
  items:
    - name: AddNamedEvent
      detail: void AddNamedEvent(ObjectPtr name, Procedure proc)
      doc: |-
        Adds named handler (proc) for event (name). Can be signaled only once, and removed afterwards.
    - name: AddNamedHandler
      detail: void AddNamedHandler(ObjectPtr name, Procedure proc)
      doc: |-
        Adds named handler (proc) for event (name). Can be signaled many times.
    - name: ClearNamed
      detail: void ClearNamed(string event)
      doc: |-
        Removes all handlers for named event.
    - name: SignalNamed
      detail: void SignalNamed(string event)
      doc: |-
        Calls events and/or handler for given name (event). See AddNamedEvent and AddNamedHandler to add handlers. This basically just calls the appropriate procedures.
    - name: action_being_used
      detail: int action_being_used
      doc: |-
        Returns the current skill being used on a script object.
    - name: activateregion
    - name: add_mult_objs_to_inven
      detail: void add_mult_objs_to_inven(ObjectPtr who, ObjectPtr item, int count)
      doc: |-
        Adds (count) instances of an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item.
    - name: add_obj_to_inven
      detail: void add_obj_to_inven(ObjectPtr who, ObjectPtr item)
      doc: |-
        Adds an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item.
    - name: add_timer_event
      detail: void add_timer_event(ObjectPtr obj, int time, int info)
      doc: |-
        Adds a timed event call to the queue, at a given time offset, to call an object's (obj) script. Info is used to let scripts differentiate between timed event calls so that they can be hooked in multiple times. Info is read back by the script using the fixed_param operator. Note that time is in ticks (you can use game_ticks(seconds_num) to get the time in ticks from time in seconds).
    - name: anim
      detail: void anim(ObjectPtr who, int anim, int direction)
      doc: |-
        Sets up a single-frame animation (anim) for the object (who) that runs in the given direction.
    - name: anim_action_frame
      detail: int anim_action_frame(ObjectPtr who, int frame)
      doc: |-
        Returns the action frame of the given art frame on a given object (who). This can be used as the delay in an animation registration sequence.
    - name: anim_busy
      detail: int anim_busy(ObjectPtr who)
      doc: |-
        Returns True if object (who) is currently animating, otherwise False. This can be used to determine if a given object has completed an animation.
    - name: animate_move_obj_to_tile
      detail: void animate_move_obj_to_tile(ObjectPtr who, int tile, int speed)
      doc: |-
        Sets up an animation for a critter (who) to walk to a given tile (hex) at a given speed (speed). Speed (walk/run) can also have a flag attached (see define.h) to force the object (who) to stop it's current animation (for instance, if it was already walking somewhere) and then walk/run to the new location (tile).
    - name: animate_rotation
      detail: void animate_rotation(int direction)
      doc: |-
        (Fallout 2 only) Changes the orientation (facing) of the self-object to the given direction (0-5).
    - name: animate_run_to_tile
      detail: void animate_run_to_tile(int tile)
      doc: |-
        (Fallout 2 only) Sets up an animation for the self-object to RUN to a given tile (hex).
    - name: animate_set_frame
      detail: void animate_set_frame(int newFrame)
      doc: |-
        Changes the current animation frame of the self-object to the given frame # (newFrame). This can be used to make lights go to broken lights or to alarm/siren lights, for example. Should be used in place of animate_stand for 2-frame anims.
    - name: animate_stand
      detail: void animate_stand
      doc: |-
        Sets up an animation for the currently focused object (self) to run it's stand animation. This can be used to open doors, open container items (Refridgerator, for example) or to run a critter's fidget animation.
    - name: animate_stand_obj
      detail: void animate_stand_obj
      doc: |-
        Sets up an animation for an object (obj) to run it's stand animation. This can be used to open doors, open container items (refridgerator, for example) or to run a critter's fidget animation.
    - name: animate_stand_reverse
      detail: void animate_stand_reverse
      doc: |-
        Sets up an animation for the currently focused object (self) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc.
    - name: animate_stand_reverse_obj
      detail: void animate_stand_reverse_obj(ObjectPtr obj)
      doc: |-
        Sets up an animation for an object (obj) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc.)
    - name: art_anim
      detail: void art_anim(int fid)
      doc: |-
        Returns the animation that this fid represents (ANIM_stand, ANIM_pickup, etc.)
    - name: attack
      detail: void attack(ObjectPtr who)
      doc: |-
        Causes the focused object (self) to attempt to attack an object (who). This is a macro to attack_complex().
    - name: attack_complex
      detail: void attack_complex(ObjectPtr who, int called_shot, int num_attacks, int bonus, int min_damage, int max_damage, int attacker_results, int target_results
      doc: |-
        Causes the current object (self - must be a critter) to attempt to attack a critter (who) with various parameters modifying the combat: called_shot - 0/1/specific means none/random/specific (head, torso, etc.) num_attacks - the # of extra attacks the self object gets before the target bonus - the bonus to hit the target on the first turn only min_damage - the minimum damage that will be done the first attack max_damage - the maximum damage that will be done the first attack attacker_results - what state the attacker ends in after the first attack target_results - what state the target ends in after the first attack
    - name: attack_setup
      detail: void attack_setup(ObjectPtr who, ObjectPtr victim)
      doc: |-
        Sets up an attack from who on victim, without expecting this script to be involved. Can be used to setup attacks on critters from the map script.
    - name: car_current_town
      detail: int car_current_town
      doc: |-
        Returns the current town area the car can be found at. Area #'s can be found in scripts/headers/maps.h
    - name: car_give_gas
      detail: int car_give_gas(int amount)
      doc: |-
        (Fallout 2 only) Gives the car a given amount of gas.
    - name: car_give_to_party
      detail: int car_give_to_party
      doc: |-
        Gives the car to the party, and takes them to the worldmap.
    - name: combat_difficulty
      detail: int combat_difficulty
      doc: |-
        Returns the current Combat difficulty level of the game (defined in the options screen). Value is 0-2.
    - name: combat_is_initialized
      detail: int combat_is_initialized
      doc: |-
        Returns True if the system is currently in combat mode, False otherwise.
    - name: create_object
      detail: ObjectPtr create_object(int pid, int tile_num, int elev
      doc: |-
        Creates a new object of prototype (pid), placing it at a given tile number and at a given elevation (0-2). If the prototype indicates a script should be attached, then it will be.
    - name: create_object_sid
      detail: ObjectPtr create_object_sid(int pid, int tile_num, int elev, int sid
      doc: |-
        Creates a new object of prototype (pid), placing it at a given tile # and at a given elevation (0-2). If sid is not -1, then it indicates that the default script should be overriden by this new script #.
    - name: critter_add_trait
      detail: int critter_add_trait(ObjectPtr who, int trait_type, int trait, int amount
      doc: |-
        Adds a particular trait (trait) of a given type (trait_type) to a particular critter (who). Possible traits under the SPECIAL system are limited to Perks, Traits, Object-instance information (such as team #'s, ai-packet #'s, etc.)
    - name: critter_attempt_placement
      detail: int critter_attempt_placement(ObjectPtr who, int hex, int elev)
      doc: |-
        Attempts to place a critter at a given destination hex & elevation (0-2), if it fails, then it tries to find a nearby hex that is that is as near as possible to the start hex. No LONGER checks to see if the hex is visible on-screen.
    - name: critter_damage
      detail: void critter_damage(ObjectPtr who, int dmg_amount)
      doc: |-
        - Macro: `critter_dmg(who, amount, (DMG_normal_dam BWOR DMG_NOANIMATE))`
        - Inflicts damage on a critter (who) of a given amount, killing it if necessary. Normal damage, no animation.
    - name: critter_dmg
      detail: void critter_dmg(ObjectPtr who, int dmg_amount, int flags)
      doc: |-
        Inflicts damage on a critter (who) of a given amount, killing it if necessary. Use `DMG_*` flags to customize behaviour.
    - name: critter_heal
      detail: void critter_heal(ObjectPtr who, int amount)
      doc: |-
        Heals a critter for a given amount (if given a value above their MaxHP will go up to their maximum HP). [Note: can also input negative amounts, causing the critter to be hurt for that amount. This is useful because it bypasses all resistances and thresholds
    - name: critter_injure
      detail: int critter_injure(ObjectPtr who, int how)
      doc: |-
        Injures a given critter (who) by crippling given limbs/body parts (defined by DAM_CRIP_ARM_LEFT, DAM_BLIND, etc. in define.h)
    - name: critter_inven_obj
      detail: ObjectPtr critter_inven_obj(ObjectPtr who, int where)
      doc: |-
        Returns a pointer to an object that is in a given spot (NULL if none). The appropriate values for where are: INVEN_TYPE_WORN, INVEN_TYPE_RIGHT_HAND, and INVEN_TYPE_LEFT_HAND.
    - name: critter_is_fleeing
      detail: int critter_is_fleeing(ObjectPtr who)
      doc: |-
        Returns True if the critter object (who) has its FLEE flag set.
    - name: critter_mod_skill
      detail: int critter_mod_skill(ObjectPtr who, int skill, int amount)
      doc: |-
        Modifies a given skill in a given critter object (who) by a given amount. NOTE: this currently is only valid on the player (obj_dude) object.
    - name: critter_rm_trait
      detail: int critter_rm_trait(ObjectPtr who, int trait_type, int trait, int amount)
      doc: |-
        Removes a particular trait (trait) of a given type (trait_type) from a particular critter (who).
    - name: critter_set_flee_state
      detail: int critter_set_flee_state(ObjectPtr who, bool flee_on
      doc: |-
        Sets the FLEE flag on or off. This controls whether the critter flees during combat.
    - name: critter_skill_level
      detail: int critter_skill_level(ObjectPtr who, int skillNum)
      doc: |-
        Returns the current skill level of a particular object's (who) skill (skillNum).
    - name: critter_state
      detail: int critter_state(ObjectPtr who)
      doc: |-
        Returns the state of a given critter object (from combat data), used to determine if a critter is dead, unconscious, etc.
    - name: critter_stop_attacking
      detail: int critter_stop_attacking(ObjectPtr who)
      doc: |-
        Flags the critter object (who) as no longer wishing to be active in combat.
    - name: cur_map_index
      detail: int cur_map_index
      doc: |-
        Returns the index # of the current map, to be matched with the define-constant in define.h.
    - name: cur_town
      detail: int cur_town
      doc: |-
        Returns the index # of the current town, to be matched with the define-constant in define.h.
    - name: days_since_visited
      detail: int days_since_visited
      doc: |-
        Returns the number of days since this map was last visited, or (-1) if it has never been visited before.
    - name: debug_msg
      detail: void debug_msg(string text)
      doc: |-
        Prints a string to the debug monitor. Should be used exclusively for debug information, instead of display_msg()! The user will never see these messages unless they have debugging enabled and activated. If they have debugging enabled and DEBUGLOG set, the messages will only show up in debug.log file.
    - name: destroy_mult_objs
      detail: int destroy_mult_objs(ObjectPtr item, int count)
      doc: |-
        Destroys count number of instances of an item object. This function will figure out which inventory this item is in (if it isn't on the ground). If it is on the ground, of course, there is only one instance of this object, so only one will be destroyed.
    - name: destroy_object
      detail: int destroy_object(ObjectPtr obj)
      doc: |-
        Destroys an object (obj), which will call its script in the destroy_proc section if the object is *NOT* the calling object.
    - name: dialogue_reaction
      detail: void dialogue_reaction(int mood)
      doc: |-
        Set up a reaction animation in the dialogue system.
    - name: dialogue_system_enter
      detail: void dialogue_system_enter
      doc: |-
        Tells the dialog system that this object is requesting the talk system. This is used when the script wants to start dialog instead of waiting for the player to initiate it. The script will be called back in its talk_proc section.
    - name: difficulty_level
      detail: int difficulty_level
      doc: |-
        Returns the current Game difficulty level of the game (defined in the options screen).
    - name: display_msg
      detail: void display_msg(string message)
      doc: |-
        Displays a string on the in-game PDA display (lower-left hand corner).
    - name: do_check
      detail: int do_check(ObjectPtr who, int check, int modifier)
      doc: |-
        Do a check/test-roll versus one of the various basic traits (strength, perception, etc.). Note: these cannot generate Critical Success or Critical Failure as they are a basic X==Y check.
    - name: drop_obj
      detail: drop_obj(ObjectPtr obj)
      doc: |-
        Causes the critter self-object to remove a given object (obj) from it's inventory and place it on the ground at its hex. This animates the self_obj.
    - name: drug_influence
      detail: int drug_influence(ObjectPtr who)
      doc: |-
        Returns True if a given critter object (who) is currently under any drug influences, False otherwise.
    - name: dude_obj
      detail: ObjectPtr dude_obj
      doc: |-
        Returns a pointer to the dude object (the player).
    - name: elevation
      detail: int elevation(ObjectPtr obj)
      doc: |-
        Returns object's elevation
    - name: end_dialogue
      detail: void end_dialogue
      doc: |-
        Terminates the dialogue system.
    - name: endgame_movie
      detail: void endgame_movie
      doc: |-
        Plays the endgame movie.
    - name: endgame_slideshow
      detail: void endgame_slideshow
      doc: |-
        Plays the endgame slideshow. The slideshow will fade in to its palette, so it is proper to call gfade_out(1) and then expect this command to fix the palette for you.
    - name: explosion
      detail: int explosion
      doc: |-
        Sets up an explosion at a given tile number (where) on a given elevation, that will cause damage in a radius.
    - name: fixed_param
      detail: int fixed_param
      doc: |-
        Returns the value of the scripts fixed parameter. This is used with add_timer_event, for instance, to pass the info parameter back to the script.
    - name: float_msg
      detail: void float_msg(ObjectPtr who, string message, int type)
      doc: |-
        Attempts to create a floating-text message (str) attached to an object (who) using colors dictated by type. There are two special types, WARNING and SEQUENTIAL. WARNING is used to print a message centered on the screen (such as for end-of-quest notifications), and SEQUENTIAL will cycle through the colors, in an attempt to give critters different-colored messages to differentiate them.
    - name: gSay_End
      detail: void gSay_End(unsigned int var_index)
      doc: |-
        Ends a dialog sequence, which will bring up the sequence (actually display it).
    - name: gSay_Message
      detail: void gSay_Message(int msg_list, int msg_num, int reaction)
      doc: |-
        Sets up a sayMessage, which is a reply with just a [Done] option. The msg_list determines which message file to look in, and the msg_num determines which line to use from the file.
    - name: gSay_Option
      detail: gSay_Option(int msg_list, int msg_num, procedure target,  int reaction)
      doc: |-
        Sets up an option-choice for a reply block, getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure.
    - name: gSay_Reply
      detail: gSay_Reply(int msg_list, int msg_num)
      doc: |-
        Sets up a reply block (what the *CRITTER* says).
    - name: gSay_Start
      detail: void gSay_Start
      doc: |-
        Starts a new dialog sequence.
    - name: game_ticks
      detail: int game_ticks(int seconds)
      doc: |-
        Returns the number of game ticks equal to a given # of seconds.
    - name: game_time
      detail: int game_time
      doc: |-
        Returns the current game time in ticks.
    - name: game_time_advance
      detail: void game_time_advance(int amount)
      doc: |-
        Advances the current game time by (amount) ticks.
    - name: game_time_hour
      detail: int game_time_hour
      doc: |-
        Returns the current hour of the day in a normal format, but without the colon. For example, the current starting game time is 721 (which is 7:21 am).
    - name: game_ui_disable
      detail: void game_ui_disable
      doc: |-
        Disables game user-interface input from the player (to ‘lock-out' the player). You *MUST* make sure to re-enable the UI at some point afterwards.
    - name: game_ui_enable
      detail: void game_ui_enable
      doc: |-
        Re-enables game user-interface input from the player. This *MUST* be called relatively soon after disabling the UI or the player will be stuck, unable to do anything.
    - name: game_ui_is_disabled
      detail: int game_ui_is_disabled
      doc: |-
        Returns True if the game UI is currently disabled (the player is currently ‘locked-out'), and False otherwise.
    - name: gdialog_barter
      detail: int gdialog_barter
      doc: |-
        Tells the dialog system to switch to the barter screen. (Sets the barter modifier to 0).
    - name: gdialog_mod_barter
      detail: int gdialog_mod_barter(int modifier)
      doc: |-
        Tells the dialog system to switch to the barter screen, using a given modifier (+/- percent).
    - name: gdialog_set_barter_mod
      detail: void gdialog_set_barter_mod(int modifier)
      doc: |-
        Sets the current modifier for barter to a given percentage (modifier). Used to make barter easier/harder, even if the player initiates barter (as opposed to the script starting it.)
    - name: get_critter_stat
      detail: int get_critter_stat(ObjectPtr who, int stat)
      doc: |-
        Returns the value of a desired attribute/stat in a critter object (who).
    - name: get_day
      detail: int get_day
      doc: |-
        Returns the current day of the month.
    - name: get_month
      detail: int get_month
      doc: |-
        Returns the current month of the year.
    - name: get_pc_stat
      detail: get_pc_stat(int pcStat)
      doc: |-
        Returns the value of a desired pc-only stat of the obj_dude. These are found in define.h all starting with 'PCSTAT_'.
    - name: get_poison
      detail: int get_poison(ObjectPtr who)
      doc: |-
        (Fallout 2 only) Returns the value of a given critters' (who) poison level.
    - name: gfade_in
      detail: void gfade_in(int time)
      doc: |-
        Does a palette fade to black. The time parameter is currently not actually used.
    - name: gfade_out
      detail: void gfade_out(int time)
      doc: |-
        Does a palette fade from black to the game palette. The time parameter is currently not actually used.
    - name: giQ_Option
      detail: void giQ_Option(int iq_test, int msg_list, int msg_num, procedure target, int reaction)
      doc: |-
        Sets up an option-choice for a reply block if the player's IQ statistic is equal to or greater than a given value (iq_test), getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure.
    - name: give_exp_points
      detail: void give_exp_points
      doc: |-
        Adds experience points (points) to the player's total. These points may then be used by the player to enhance skills, etc.
    - name: global_var
      detail: int global_var(int var_index)
      doc: |-
        Returns the value of a global variable # (var_index).
    - name: goto_xy
      detail: void goto_xy(int map)
      doc: |-
        Unknown - moves the character to the specific map?
    - name: has_skill
      detail: int has_skill(ObjectPtr who, int skill)
      doc: |-
        Returns the level of the skill (0-17) of the target critter. (0 to 200 for Fallout 1), (0 to 300 for Fallout 2)
    - name: has_trait
      detail: int has_trait(int trait_type, ObjectPtr who, int trait
      doc: |-
        Returns the value of a given critter object's (who) trait of a given trait_type (see define.h). This can be used to determine if the player has a particular Perk, AI Packet, team num, current rotation, or Trait (finesse, bruiser, etc.).
    - name: how_much
      detail: int how_much(int val)
      doc: |-
        Returns the value of a completed skill vs. skill contest (how much the rolls differed by). This requires that you first call one of the contest roll commands, such as roll_vs_skill, skill_contest, etc.
    - name: inven_count
      detail: int inven_count(ObjectPtr what)
      doc: |-
        Returns the count of how many inventory slots are filled on a given object (what).
    - name: inven_ptr
      detail: ObjectPtr inven(ObjectPtr what, int slotNum)
      doc: |-
        Returns a pointer to the object in slot # (slotNum) in a given object (what).
    - name: inven_unwield
      detail: void inven_unwield(ObjectPtr who)
      doc: |-
        Attempts to cause a critter to unwield any wielded weapons/items. If animations are currently disabled, it will just instantly change the art.
    - name: is_critical
      detail: bool is_critical(int val)
      doc: |-
        Returns True if a given contest roll result is a critical result, otherwise False.
    - name: is_loading_game
      detail: bool is_loading_game
      doc: |-
        Returns True if the game is currently loading, False otherwise. This is used so that bad things don't happen on game load because a script is doing map_enter setup stuff.
    - name: is_skill_tagged
      detail: bool is_skill_tagged(int skillNum)
      doc: |-
        Returns True if a given skill is tagged.
    - name: is_success
      detail: int is_success(int val)
      doc: |-
        Returns True if a given contest roll result value is a success, otherwise False. Can generate Critical Success or Critical Failure as well.
    - name: item_caps_adjust
      detail: int item_caps_adjust(ObjectPtr obj, int amount)
      doc: |-
        Modifies the current caps count in an object (obj) by a given amount (amount). Can be positive or negative.
    - name: item_caps_total
      detail: int item_caps_total(ObjectPtr obj)
      doc: |-
        Returns the current caps total in a given object's (obj) inventory.
    - name: jam_lock
      detail: int jam_lock(ObjectPtr lockableObj)
      doc: |-
        Jams a lock, which prevents the player from picking the lock for approximately 24 hours. Meant to be used when a player critically fails to pick a lock.
    - name: kill_critter
      detail: void kill_critter(ObjectPtr who, int death_frame)
      doc: |-
        Kills a critter (obj) outright, placing it in the chosen death frame. Note: this does NOT animate the critter, and does NOT refresh the screen! It is meant to be used in scripts run when entering/exiting a map (map_init/map_exit).
    - name: kill_critter_type
      detail: void kill_critter_type(int pid)
      doc: |-
        Kills all critters of a given type (pid) outright. NOTE: This can result in the 'frozen bodies' issue! kill_critter should always be used instead if possible, for this reason. Frozen bodies causes no actual gameplay issues, but it looks unrealistic and ridiculous.
    - name: language_filter_is_on
      detail: bool language_filter_is_on
      doc: |-
        Returns True if the language filter is currently filtering harsh language, False otherwise.
    - name: load_map
      detail: void load_map(string map_name, int start_location)
      doc: |-
        Loads a new map (map_name), removing all scripts currently running and passing on the entrance location (start_location) to the new map's map_init script. Can also use the number representing the map in the map list (for example, between 0 to 64 in Fallout 1)
    - name: local_var
      detail: int local_var(unsigned int var_index)
      doc: |-
        Returns the value of a local variable of given index # (var_index). If the user is not allowed local vars up to this number in the list of critters, this can generate errors.
    - name: map_first_run
      detail: bool map_first_run
      doc: |-
        Returns True if the current map is being run for the first time (in other words, this map was not loaded from a save-game).
    - name: map_is_known
      detail: bool map_is_known(int mapIndex)
      doc: |-
        Returns True if a given map index is known, False otherwise.
    - name: map_known
      detail: bool map_known(int mapNum)
      doc: |-
        Returns True if a given map # (mapNum) is known, False otherwise.
    - name: map_var
      detail: int map_var(unsigned int var_index)
      doc: |-
        Returns the value of a map-global variable of a given index # (var_index).
    - name: message_str
      detail: char* message_str(int list, int msg_num)
      doc: |-
        Returns a string from the message module for a given list and a given # (msg_num).
    - name: move_obj_inven_to_obj
      detail: move_obj_inven_to_obj(ObjectPtr srcObj, ObjectPtr destObj)
      doc: |-
        Moves an object's (srcObj) entire inventory into another object's (destObj) inventory.
    - name: move_to
      detail: int move_to(ObjectPtr obj, int tile_num, int elev)
      doc: |-
        Immediately moves an object (obj) to the given tile number and elevation (0-2) on the current map.
    - name: obj_art_fid
      detail: int obj_art_fid(ObjectPtr obj)
      doc: |-
        Returns the fid # (used to index art) of a given object (obj).
    - name: obj_being_used_with
      detail: ObjectPtr obj_being_used_with
      doc: |-
        Returns a pointer to the object being used on another object.
    - name: obj_can_hear_obj
      detail: bool obj_can_hear_obj(ObjectPtr src_obj, ObjectPtr dst_obj)
      doc: |-
        Returns True if the source object (src_obj) is capable of hearing the destination object (dst_obj). This includes distance factors, current activity (standing/walking/running), and skill use (stealth/etc.).
    - name: obj_can_see_obj
      detail: bool obj_can_see_obj(ObjectPtr src_obj, ObjectPtr dst_obj)
      doc: |-
        Returns True if the source object (src_obj) has line-of-sight (LOS) with the destination object (dst_obj). This also takes into account perception & stealth rolls of the objects are critters.
    - name: obj_carrying_pid_obj
      detail: ObjectPtr obj_carrying_pid_obj(ObjectPtr who, int pid)
      doc: |-
        Returns an Object pointer to an instance of an object of type pid if an object (who) is carrying an object of that type.
    - name: obj_close
      detail: void obj_close(ObjectPtr what)
      doc: |-
        Attempts to close a given object (what) if it is of an openable type.
    - name: obj_drop_everything
      detail: void obj_drop_everything(ObjectPtr who)
      doc: |-
        Causes a critter object (who) to drop all objects in it's inventory and drop it on the ground at its feet.
    - name: obj_is_carrying_obj_pid
      detail: int obj_is_carrying_obj_pid(ObjectPtr obj, in pid)
      doc: |-
        Returns the quantity of objects with matching prototype index #'s (pid) carried in the inventory of another object (obj).
    - name: obj_is_locked
      detail: bool obj_is_locked(ObjectPtr what)
      doc: |-
        Returns True if a given object (what) is a locked object, False if it is unlocked or not a lockable object.
    - name: obj_is_open
      detail: bool obj_is_open(ObjectPtr what)
      doc: |-
        Returns True if a given object (what) is an open object, False if it is closed or not an openable object.
    - name: obj_is_visible_flag
      detail: bool obj_is_visible_flag(ObjectPtr who)
      doc: |-
        (Fallout 2 only) Returns True if a given object (who) is turned on (visible), False otherwise.
    - name: obj_item_subtype
      detail: int obj_item_subtype(ObjectPtr item_obj)
      doc: |-
        Returns the subtype of an object of type 'item'. Examples would be food, armor, weapons, etc.
    - name: obj_lock
      detail: void obj_lock(ObjectPtr what)
      doc: |-
        Attempts to lock a given object (what) if it is of a lockable type.
    - name: obj_name
      detail: string obj_name(ObjectPtr obj)
      doc: |-
        Returns a string representing the name of the given object (what).
    - name: obj_on_screen
      detail: bool obj_on_screen(ObjectPtr what)
      doc: |-
        Returns True if a given object (what) is currently being drawn on-screen, False if it is not.
    - name: obj_open
      detail: void obj_open(ObjectPtr what)
      doc: |-
        Attempts to open a given object (what) if it is of an openable type.
    - name: obj_pid
      detail: int obj_pid(ObjectPtr obj)
      doc: |-
        Returns the prototype id # (pid) of an object (obj).
    - name: obj_set_light_level
      detail: void obj_set_light_level(ObjectPtr obj, int intensity, int distance)
      doc: |-
        Set the light level for an object to a given intensity (0-100, percentage of possible maximum intensity), and distance of light in hexes (0-8).
    - name: obj_type
      detail: int obj_type(ObjectPtr obj)
      doc: |-
        Returns the type of an object (obj). This would be ‘Item', ‘Wall', ‘Scenery', etc.
    - name: obj_unlock
      detail: void obj_unlock(ObjectPtr what)
      doc: |-
        Attempts to unlock a given object (what) if it is of a lockable type.
    - name: override_map_start
      detail: void override_map_start(int x, int y, int elev, int rot)
      doc: |-
        Used when loading a new map, this forces the player (obj_dude) to start at a particular location (x/y), elevation (0-2) and rotation (0-5) when first coming up.
    - name: party_add
      detail: void party_add(ObjectPtr who)
      doc: |-
        Adds a given critter (who) into the list of party members. This will also setup those objects so that they will not be saved in maps, and certain other things.
    - name: party_member_count
      detail: int party_member_count(bool countHidden)
      doc: |-
        Returns the count of the currently in-party party members. (countHidden) determines whether or not to count the hidden members (hangers-on).
    - name: party_member_obj
      detail: ObjectPtr party_member_obj(int pid)
      doc: |-
        Returns an ObjectPtr to a party member that matches a given pid. If that critter isn't currently a member of the party, then it will return NULL.
    - name: party_remove
      detail: void party_remove(ObjectPtr who)
      doc: |-
        Removes a given critter (who) from the list of party members. This will also change those objects so that certain object- and map-level things will respond differently to them.
    - name: pickup_obj
      detail: void pickup_obj(ObjectPtr obj)
      doc: |-
        Causes the critter self-object to animate and attempt to pick up a given object (obj). If used in regard to a critter, this flag is pinged when a steal detect fails. In other words when detected stealing, pickup_obj is called for the person you were stealing from.
    - name: play_gmovie
      detail: void play_gmovie(int movieNum)
      doc: |-
        Plays one of the Fallout movies (full-screen, compressed, etc.).
    - name: play_sfx
      detail: play_sfx (string sfxFileName)
      doc: |-
        Starts a new sound effect to be played on the queue.
    - name: poison
      detail: void poison(ObjectPtr who, int amount)
      doc: |-
        Modifies the critter's poison level by a given amount, which can be negative
    - name: proto_data
      detail: int proto_data(int pid, int data_member)
      doc: |-
        Returns the value (can be int or string) of a data-member of a given prototype (pid).
    - name: radiation_dec
      detail: void radiation_dec(ObjectPtr who, int amount)
      doc: |-
        Decrements a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!
    - name: radiation_inc
      detail: void radiation_inc(ObjectPtr who, int amount)
      doc: |-
        Increments a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!
    - name: random
      detail: int random(int min, int max)
      doc: |-
        Returns a random value between (min) and (max), inclusive.
    - name: reg_anim_animate
      detail: void reg_anim_animate(ObjectPtr what, int anim, int delay)
      doc: |-
        Adds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)!
    - name: reg_anim_animate_forever
      detail: void reg_anim_animate_forever(ObjectPtr what, int anim, int delay)
      doc: |-
        Adds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! This animation will animate continuously until something in the system interrupts it. To be used *very* sparingly, for instance Gizmo's sign and the ‘pray' signs in the children of the cathedral (which will have to be toned down).
    - name: reg_anim_animate_reverse
      detail: void reg_anim_animate_reverse(ObjectPtr what, int anim, int delay)
      doc: |-
        Adds a single, in-place reversed animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! reg_anim_begin void Anim Tells the system to start an animation sequence-list.
    - name: reg_anim_clear
      detail: void reg_anim_clear(ObjectPtr object)
      doc: |-
        Terminates all animations that are currently registered for a given object.
    - name: reg_anim_end
      detail: void reg_anim_end
      doc: |-
        Activates the animation sequence-list. Without this call the animation will never occur. Note: All animation sequences must be registered at ONCE! In other words, you cannot let the script end and finish registering the animations later.
    - name: reg_anim_obj_move_to_obj
      detail: void reg_anim_obj_move_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)
      doc: |-
        Adds an animation to cause a critter object (who) to attempt to walk to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!
    - name: reg_anim_obj_move_to_tile
      detail: void reg_anim_obj_move_to_tile(ObjectPtr who, int dest_tile, int delay)
      doc: |-
        Adds an animation to cause a critter object (who) to attempt to walk to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!
    - name: reg_anim_obj_run_to_obj
      detail: void reg_anim_obj_run_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)
      doc: |-
        Adds an animation to cause a critter object (who) to attempt to run to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!
    - name: reg_anim_obj_run_to_tile
      detail: void reg_anim_obj_run_to_tile(ObjectPtr who, int dest_tile, int delay)
      doc: |-
        Adds an animation to cause a critter object (who) to attempt to run to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!
    - name: reg_anim_play_sfx
      detail: void reg_anim_play_sfx(ObjectPtr who, string sfx_name, int delay)
      doc: |-
        Adds an animation to cause an object (who) to attempt to play a given sound effect (sfx_name) at a given delay from the previous animation.
    - name: rm_fixed_timer_event
      detail: void rm_fixed_timer_event(ObjectPtr who, int fixed_val)
      doc: |-
        Removes (clears) all timer events hooked to a given object's (obj) script that have a given fixed_value (fixed_val).
    - name: rm_mult_objs_from_inven
      detail: int rm_mult_objs_from_inven(ObjectPtr who, ObjectPtr obj, int count)
      doc: |-
        Removes (count) instances of an object (obj) from another object's (who's) inventory. Note: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map. NOTE: This function returns the actual count that was removed (if you attempted to remove more instances than existed). You *MUST* store this value in a variable (though you don't have to actually do anything with it).
    - name: rm_obj_from_inven
      detail: void rm_obj_from_inven(ObjectPtr who, ObjectPtr obj)
      doc: |-
        Removes an object (obj) from another object's (who's) inventory. NOTE: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map.
    - name: rm_timer_event
      detail: void rm_timer_event(ObjectPtr obj)
      doc: |-
        Removes (clears) all timer events hooked to a given object's (obj) script.
    - name: roll_dice
      detail: Critter roll_dice(obj Critter, int skill)
      doc: |-
        Returns the value of the completed dice roll. NOTE: Avellone says this is unimplemented.
    - name: roll_vs_skill
      detail: int roll_vs_skill(ObjectPtr who, int skill, int modifier)
      doc: |-
        Returns the value of a completed skill roll made upon an object's (who's) skill level with a given skill, and modified by a given amount (may be zero). This value may then be passed to is_success and is_critical to determine the appropriate states, and the how_much call can be used to determine the difference succeeded or failed by.
    - name: rotation_to_tile
      detail: int rotation_to_tile(int srcTile, int destTile)
      doc: |-
        Returns the rotation (0...5) to face a particular tile (destTile) from a particular tile (srcTile).
    - name: running_burning_guy
      detail: int running_burning_guy
      doc: |-
        Returns the setting for the running-burning-guy in the game (defined in the options screen).
    - name: scr_return
      detail: void scr_return
      doc: |-
        Sets the return value for a scripts C-engine node, to be used by C code.
    - name: script_action
      detail: int script_action
      doc: |-
        Returns the action that has activated this script. Examples include requests for the description of an object (description_proc), notifications of a spatial script being activated by something hitting its boundary (spatial_proc), or a critter being given its heartbeat (critter_proc, in other words being told to move).
    - name: script_overrides
      detail: void script_overrides
      doc: |-
        Tells the C-engine that the script will override default behavior for the object. What this means is that the C-engine will not attempt to do things that it would normally do, in expectation that the script will handle those things itself. This is an IMPORTANT command! It is commonly used for the general player actions upon objects, such as looking at them (requesting a description), using them (opening doors, for example), or using items ON them (using a picklock or a key on a door lock).
    - name: self_obj
      detail: ObjectPtr self_obj
      doc: |-
        Returns a pointer to the object connected to this script.
    - name: set_critter_stat
      detail: int set_critter_stat(ObjectPtr who, int stat, int val)
      doc: |-
        Sets the value of a desired attribute/stat in a critter (who) to a given value (val).
    - name: set_exit_grids
      detail: void set_exit_grids(elevation markElev, int mapID, int elevation, int tileNum, int rotation)
      doc: |-
        Sets all exit grids on a given elevation (markElev) to point to a destination mapID (may be -1 which means stay on this map), elevation, tileNum, and rotation.
    - name: set_global_var
      detail: void set_global_var(unsigned int var_index, int value)
      doc: |-
        Sets the value of a global variable (var_index) to a given (value).
    - name: set_light_level
      detail: void set_light_level(int level).
      doc: |-
        Sets the ambient light level (1-100). The range is Full Darkness to Full Daylight. NOTE: level is NOT percentange, full darkness is not black screen. set_light_level(0) actually corresponds to 25% brightness, and as level increases, brightness makes 2 huge jumps in the middle (49-51). Thus, certain brightness levels simply cannot be set.
    - name: set_local_var
      detail: void set_local_var(unsigned int var_index, int value)
      doc: |-
        Sets the value of a local variable (var_index) to a given (value).
    - name: set_map_start
      detail: void set_map_start(int x, int y, int elev, int rot)
      doc: |-
        Sets the start location & rotation (0-5) for the next time this map is entered (loaded & run).
    - name: set_map_var
      detail: void set_map_var(unsigned int var_index, int value)
      doc: |-
        Sets the value of a map-global variable (var_index) to a given (value).
    - name: set_obj_visibility
      detail: void set_obj_visibility(ObjectPtr obj, bool visibility)
      doc: |-
        Sets the OBJ_OFF flag for an object (makes it not drawn).
    - name: signal_end_game
      detail: void signal_end_game
      doc: |-
        Tells the system that a script is indicating the game should be ended. This will return the player to the main-menu.
    - name: skill_contest
      detail: int skill_contest(int skill)
      doc: |-
        (Fallout 2 only) Returns the value of a completed skill vs skill contest (to run through is_success & is_critical).
    - name: source_obj
      detail: ObjectPtr source_obj
      doc: |-
        Returns a pointer to the source object (activator) for this action. The source object for a pickup_proc (pickup an object script_action) would be the critter picking the object up, for instance.
    - name: start_dialogue
      detail: void start_dialogue(ObjectPtr who, int mood)
      doc: |-
        Start the dialogue system focusing on a critter (who) and starting in a given (mood). This call sets up the appropriate dialog windows, head art, etc. If this call is not made before the normal dialog calls (sayReply, sayMessage, sayOption, etc.) then the dialog windows will not come up, and only grey boxes will appear with the text.
    - name: start_gialog
      detail: void start_gialog(int msgFileNum, ObjectPtr who, int mood, int headNum, int backgroundIdx)
      doc: |-
        Start the dialogue system focusing on a critter (who) and starting in a given (mood). This call sets up the appropriate dialog windows, head art, etc. If this call is not made before the normal dialog calls (sayReply, sayMessage, sayOption, etc.) then the dialog windows will not come up, and only grey boxes will appear with the text.
    - name: target_obj
      detail: ObjectPtr target_obj
      doc: |-
        Returns a pointer to the target object for this action. The target object is what is being acted upon.
    - name: terminate_combat
      detail: void terminate_combat
      doc: |-
        Combat Tells the combat system to terminate prematurely. USE WITH CAUTION. This doesn't prevent another (or even the SAME) script from re-starting combat, so make sure you turn off any hostile flags, etc.
    - name: tile_contains_obj_pid
      detail: bool tile_contains_obj_pid(int tile, int elev, int pid)
      doc: |-
        Returns True if a particular tile contains an object with a matching prototype index # (obj pid).
    - name: tile_contains_pid_obj
      detail: ObjectPtr tile_contains_pid_obj(int tile, int elev, int pid)
      doc: |-
        Returns a pointer to the first object that matches a particular pid # that is on a particular tile and elevation.
    - name: tile_distance
      detail: int tile_distance(int tile1, int tile2)
      doc: |-
        Returns the tile distance between two tile #'s
    - name: tile_distance_objs
      detail: int tile_distance_objs(ObjectPtr obj1, ObjectPtr obj2)
      doc: |-
        Returns the tile distance between two objects (between their tile #'s).
    - name: tile_is_visible
      detail: bool tile_is_visible(int tile)
      doc: |-
        Returns True if a given hex (tile) is currently visible, i.e. an object on it could conceivably be displayed on-screen. This includes hexes that may technically have bases that are off-screen, but on whom objects could exist that would bound into the actual display area.
    - name: tile_num
      detail: int tile_num(ObjectPtr obj)
      doc: |-
        Returns the tile number of object (obj).
    - name: tile_num_in_direction
      detail: int tile_num_in_direction(int start_tile, int direction, int distance)
      doc: |-
        Returns the tile number of a tile offset from a starting tile in a given direction (0-5, the next tile in that direction).
    - name: town_known
      detail: bool town_known(int townArea)
      doc: |-
        Returns True if a given town area (townArea) is known, False otherwise.
    - name: town_map
      detail: void town_map
      doc: |-
        (Fallout 1 only) Sends a request for the game engine to bring up the Town Map screen, for the player to go to different locations in an area (different areas in Vault13, for example).
    - name: use_obj
      detail: void use_obj(ObjectPtr obj)
      doc: |-
        Use a usable object
    - name: use_obj_on_obj
      detail: ObjectPtr use_obj_on_obj(ObjectPtr item, ObjectPtr targetObj)
      doc: |-
        Attempt to use an item object on a target object (targetObj). This could be used to have a critter use a Stimpack on the player, for instance, or to use a key on a door.
    - name: using_skill
      detail: bool using_skill(ObjectPtr who, int skill)
      doc: |-
        Returns True if an active skill is being used, False otherwise. Examples of active skills are Stealth and First Aid.
    - name: violence_level_setting
      detail: int violence_level_setting
      doc: |-
        (Fallout 2 only) Returns the current setting of the violence level. See define.h for values.
    - name: wield_obj
      detail: void wield_obj(ObjectPtr obj)
      doc: |-
        Sets up an animation causing a critter (self_obj) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand.
    - name: wield_obj_critter
      detail: void wield_obj_critter(ObjectPtr who, ObjectPtr obj)
      doc: |-
        Sets up an animation causing a critter (who) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand.
    - name: wm_area_set_pos
      detail: void wm_area_set_pos(int areaIdx, int xPos, int yPos)
      doc: |-
        Sets the World Map coordinates for a given area/town (areaIdx) to a given x and y position.
    - name: world_map
      detail: void world_map
      doc: |-
        Sends a request for the game engine to bring up the World Map screen, for the player to move around to different locations.
    - name: world_map_x_pos
      detail: int world_map_x_pos
      doc: |-
        Returns the current X position of the party on the World Map.
    - name: world_map_y_pos
      detail: int world_map_y_pos
      doc: |-
        Returns the current Y position of the party on the World Map.
sfall-functions:
  type: 3
  items:
    - name: set_npc_stat_max
      detail: void set_npc_stat_max(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: set_npc_stat_min
      detail: void set_npc_stat_min(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: set_pc_stat_max
      detail: void set_pc_stat_max(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: set_pc_stat_min
      detail: void set_pc_stat_min(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: set_stat_max
      detail: void set_stat_max(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: set_stat_min
      detail: void set_stat_min(int stat, int value)
      doc: |-
        The `set_stat_max/min` functions can be used to set the valid ranges on stats. Values returned by `get_current_stat` will be clamped to this range. The `set_pc_` function only affects the player, the `set_npc_` functions only affects other critters, and the `set_` functions affects both.
    - name: reg_anim_animate_and_hide
      detail: void reg_anim_animate_and_hide(ObjectPtr, int animID, int delay)
      doc: |-
        Exactly like `reg_anim_animate` but the object will automatically disappear after the last animation frame (but not destroyed).
    - name: reg_anim_callback
      detail: void reg_anim_callback(procedure proc)
      doc: |-
        Adds the given procedure to an animation sequence-list and executes it in the registered sequence.
    - name: reg_anim_change_fid
      detail: void reg_anim_change_fid(ObjectPtr, int FID, int delay)
      doc: |-
        Should work like `art_change_fid_num` but in `reg_anim` sequence.
    - name: reg_anim_combat_check
      detail: void reg_anim_combat_check(int enable)
      doc: |-
        Allows to enable all `reg_anim_*` functions in combat (including vanilla functions) if set to 0. It is automatically reset at the end of each frame, so you need to call it before `reg_anim_begin` - `reg_anim_end` block.
    - name: reg_anim_destroy
      detail: void reg_anim_destroy(ObjectPtr)
      doc: |-
        Given object is destroyed at the end of current animation set.
    - name: reg_anim_light
      detail: void reg_anim_light(ObjectPtr, int light, int delay)
      doc: |-
        Change light of any object. Light argument is a light radius (0-8), but you can use highest 2 bytes to pass light intensity as well (example: 0xFFFF0008 - intensity 65535 and radius 8). If highest 2 bytes are 0, intensity will not be changed. Intensity range is from 0 to 65535 (0xFFFF)
    - name: reg_anim_take_out
      detail: void reg_anim_take_out(ObjectPtr, holdFrameID, delay)
      doc: |-
        Plays "take out weapon" animation for given `holdFrameID`. It is not required to have such weapon in critter's inventory.
    - name: reg_anim_turn_towards
      detail: void reg_anim_turn_towards(ObjectPtr, int tile/target, delay)
      doc: |-
        Makes object change its direction to face given tile num or target object.
    - name: array_key
      detail: mixed array_key(int arrayID, int index)
      doc: |-
        Don't use it directly; it is generated by the compiler in foreach loops.
    - name: arrayexpr
      detail: int arrayexpr(mixed key, mixed value)
      doc: |-
        Don't use it directly; it is used by compiler to create array expressions.
    - name: create_array
      detail: int create_array(int size, int nothing)
      doc: |-
        Creates permanent array (but not "saved").
    - name: fix_array
      detail: void fix_array(int arrayID)
      doc: |-
        Changes "temporary" array into "permanent" ("permanent" arrays are not automatically saved into savegames).
    - name: free_array
      detail: void free_array(int arrayID)
      doc: |-
        Deletes any array.
    - name: get_array
      detail: mixed get_array(int arrayID, mixed key)
      doc: |-
        Returns array value by key or index (shorthand: arrayID[key]).
    - name: len_array
      detail: int len_array(int arrayID)
      doc: |-
        Returns number of elements or key=>value pairs in a given array.
    - name: load_array
      detail: int load_array(mixed key)
      doc: |-
        Load array from savegame data by the same key provided in "save_array".
    - name: resize_array
      detail: void resize_array(int arrayID, int size)
      doc: |-
        Changes array size.
    - name: save_array
      detail: void save_array(mixed key, int arrayID)
      doc: |-
        Array is saved (arrayID is associated with given "key").
    - name: scan_array
      detail: mixed scan_array(int arrayID, mixed value)
      doc: |-
        Searches for a first occurence of given value inside given array.
    - name: set_array
      detail: void set_array(int arrayID, mixed key, mixed value)
      doc: |-
        Sets array value (shorthand: arrayID[key] := value).
    - name: temp_array
      detail: int temp_array(int size, int nothing)
      doc: |-
        Works exactly like "create_array", only created array becomes "temporary."
    - name: art_cache_clear
      detail: void art_cache_clear()
      doc: |-
        Clears the cache of FRM image files loaded into memory.
    - name: art_exists
      detail: int art_exists(int artFID)
      doc: |-
        checks if given artFID exists in the game. Useful when you want to check if critter can use specific weapon: `art_exists((artFid bwand 0xffff0fff) bwor (weaponAnim * 0x1000))`.
    - name: refresh_pc_art
      detail: void refresh_pc_art
    - name: set_hero_race
      detail: void set_hero_race(int style)
    - name: set_hero_style
      detail: void set_hero_style(int style)
    - name: eax_available
      detail: int eax_available
    - name: play_sfall_sound
      detail: int play_sfall_sound(string file, int mode)
      doc: |
        Used to play `mp3/wav/wma` files. The path given is relative to the Fallout folder. Specify mode as 1 to loop the file continuously, 2 to replace the current background game music with playing the specified file in loop mode, or 0 to play the file once. If you don't wish to loop, `play_sfall_sound` returns 0. If you do loop, it returns an id which can be passed back to `stop_sfall_sound` when you want to stop the effect. All sounds effects will be stopped on game reload, looping or not. Does not require `AllowDShowSound` to be set to 1 in `ddraw.ini`.

        Starting from sfall 4.2.8/3.8.28, you can pass a value in the `mode` argument for a reduced sound volume. To set the volume, You need to convert the number to hexadecimal and use the argument format `0xZZZZ000Y`, where `ZZZZ` is the volume reduction value in range from 0 to 32767 (the value 32767 is mute), and `Y` is the playback mode.
    - name: set_eax_environment
      detail: void set_eax_environment(int environment)
    - name: stop_sfall_sound
      detail: void stop_sfall_sound(int soundID)
      doc: |-
        Stops looping `mp3/wav/wma` files previously launched by `play_sfall_sound`. All sounds effects will be stopped on game reload, looping or not. Does not require `AllowDShowSound` to be set to 1 in `ddraw.ini`.
    - name: car_gas_amount
      detail: int car_gas_amount()
      doc: |
        Returns the current amount of fuel in player's car (between 0 and 80000).
        To change fuel amount, use vanilla function: `metarule(METARULE_GIVE_CAR_GAS, amount)` - `amount` can be positive or negative.
    - name: set_car_current_town
      detail: void set_car_current_town(int town)
      doc: |-
        Changes the current town index for the player's car.
    - name: set_car_intface_art
      detail: void set_car_intface_art(int artIndex)
      doc: |
        - Changes the interface art (index in `intrface.lst`) for the car image on the world map interface
        - Should be called before going to the world map
        - Vanilla art index is 433
    - name: attack_is_aimed
      detail: bool attack_is_aimed()
      doc: |-
        Returns 1 if the aimed attack mode is selected, 0 otherwise.
    - name: block_combat
      detail: void block_combat(bool value)
      doc: |-
        Deny the player to enter combat mode.
    - name: combat_data
      detail: mixed combat_data
      doc: |
        - returns a pointer to the `C_ATTACK_*` data for the current combat attack process (see defined constants in `define_extra.h`)
        - can be used in conjunction with the `get_object_data` and `set_object_data` functions
          example: `sfall_func3("set_object_data", sfall_func0("combat_data"), C_ATTACK_UNUSED, 255);`
    - name: disable_aimed_shots
      detail: void disable_aimed_shots(int pid)
      doc: |-
        Allows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) stops a weapon from making aimed shots even if it normally coulld. Affects player and NPCs alike. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed.
    - name: force_aimed_shots
      detail: void force_aimed_shots(int pid)
      doc: |-
        Allows overriding the normal rules regarding which weapons are allowed to make aimed attacks. (e.g. weapons that cause explosive damage normally cannot normally make aimed shots.) Will allow a weapon to make aimed shots even if it normally couldn't. Affects player and NPCs alike. Does not override the effects of the fast shot trait. The list of edited weapons is not saved over game loads, so you need to call the function once at each reload. Use a pid of 0 to represent unarmed.
    - name: get_attack_type
      detail: int get_attack_type
    - name: get_bodypart_hit_modifier
      detail: int get_bodypart_hit_modifier(int bodypart)
      doc: |-
        Gets the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id's are from 0 to 8.
    - name: get_critical_table
      detail: int get_critical_table(int crittertype, int bodypart, int level, int valuetype)
      doc: |-
        Gets current critical table. For details see [critical hit tables](http://falloutmods.wikia.com/wiki/Critical_hit_tables). Requires `OverrideCriticalTable` to be set to 1 in `ddraw.ini`. (Disabled by default, because it noticably increases loading times.)
    - name: get_critter_current_ap
      detail: int get_critter_current_ap(CritterPtr)
      doc: |-
        Should only be used during the target critters turn while in combat. Calling it outside of combat typically returns the critters max ap, but don't rely on that behaviour. (Specifically, if the critter has never before entered combat, it will probably return the critters base ap ignoring any extra bonuses from perks etc.)
    - name: get_last_attacker
      detail: ObjectPtr get_last_attacker(ObjectPtr critter)
      doc: |-
        Will return the last critter to deliberately launch an attack against the argument critter. If a critter has not launched/received an attack, it will return 0. Outside of combat always returns 0.
    - name: get_last_target
      detail: ObjectPtr get_last_target(ObjectPtr critter)
      doc: |-
        Will return the last critter to be deliberately attacked. Outside of combat always returns 0.
    - name: reset_critical_table
      detail: void reset_critical_table(int crittertype, int bodypart, int level, int valuetype)
      doc: |-
        Resets the critical table to default (or to the contents of `CriticalOverrides.ini`, if it exists). For details see 'http://falloutmods.wikia.com/wiki/Critical_hit_tables'. Requires `OverrideCriticalTable` to be set to 1 in `ddraw.ini`. (Disabled by default, because it noticably increases loading times.)
    - name: set_bodypart_hit_modifier
      detail: void set_bodypart_hit_modifier(int bodypart, int value)
      doc: |-
        Alters the hit percentage modifiers for aiming at specific bodyparts. Valid bodypart id's are from 0 to 8. Changes are not saved, and will reset to the defaults (or to the values specified in ddraw.ini if they exist) at each reload.
    - name: set_critical_table
      detail: void set_critical_table(int crittertype, int bodypart, int level, int valuetype, int value)
      doc: |-
        Used for modifying the critical table. For details see [critical hit tables](http://falloutmods.wikia.com/wiki/Critical_hit_tables). Changes are not saved, and will reset to the defaults, (or to the contents of `CriticalOverrides.ini`, if it exists) at each game reload. Requires `OverrideCriticalTable` to be set to 1 in `ddraw.ini`. (Disabled by default, because it noticably increases loading times.)
    - name: set_critter_burst_disable
      detail: void set_critter_burst_disable(int critter, int disable)
    - name: set_critter_current_ap
      detail: void set_critter_current_ap(CritterPtr, int ap)
      doc: |-
        Should only be used during the target critters turn while in combat.
    - name: get_cursor_mode
      detail: int get_cursor_mode()
      doc: |-
        Returns the current cursor mode. Values: 0 - movement cursor, 1 - command cursor, 2 - targeting cursor, 4 to 10 are Skilldex skills (yellow targeting cursor).
    - name: set_cursor_mode
      detail: void set_cursor_mode(int mode)
      doc: |-
        Sets the current cursor mode.
    - name: get_explosion_damage
      detail: array get_explosion_damage(itemPid)
      doc: |-
        Returns an array of the minimum and maximum damage of the explosive item.
    - name: item_make_explosive
      detail: void item_make_explosive(int pid, int activePid, int minDamage, int maxDamage)
      doc: |
        - makes the specified item (pid) an explosive item like Dynamite or Plastic Explosives
        - `maxDamage` is optional
        - `activePid` is for an item with an active timer, can be the same as the `pid` argument
        - the item proto must be "Misc Item" type and have "Use" action flag
        - minDamage/maxDamage are the minimum and maximum explosion damage
        - using the function on an item that is already set as an explosive will override its previous settings
        - NOTE: this function does not work for pids of Dynamite and Plastic Explosives
    - name: metarule2_explosions
      detail: int metarule2_explosions(int arg1, int arg2)
      doc: |-
        Was made as a dirty easy hack to allow dynamically change some explosion parameters (ranged attack). All changed parameters are reset to vanilla state automatically after each attack action.
    - name: set_attack_explosion_art
      detail: void set_attack_explosion_art(x, y)
      doc: |-
        Y not used and X is a misc frame ID (last 3 bytes, without object type) to use for the next explosion.
    - name: set_attack_explosion_pattern
      detail: void set_attack_explosion_pattern(x, y)
      doc: |-
        Currently Y is not used and X means: 1 - reduced explosion pattern (3 effects are spawned instead of 7), 0 - full pattern.
    - name: set_attack_explosion_radius
      detail: void set_attack_explosion_radius(x)
      doc: |-
        Changes radius at which explosion will hit secondary targets for the next attack (from the experiments it is limited to something around 8 by the engine).
    - name: set_attack_is_explosion_fire
      detail: void set_attack_is_explosion_fire
      doc: |-
        If you call this right before using a weapon with fire damage type (e.g. in `HOOK_AFTERHITROLL`), it will produce explosion effects (and radius damage) just like "explosion" type, but all targets will still receive fire damage.
    - name: set_dynamite_damage
      detail: void set_dynamite_damage(minDmg, maxDmg)
      doc: |-
        Sets the minimum and maximum damage for Dynamite. Changed damage will be reset each time the player reloads the game.
    - name: set_explosion_max_targets
      detail: void set_explosion_max_targets(x)
      doc: |-
        Sets the maximum number of additional targets for an explosion, valid range: 1..6 (default is 6).
    - name: set_explosion_radius
      detail: void set_explosion_radius(grenade, rocket)
      doc: |-
        Sets a permanent radius of the explosion for grenades and/or rockets. Passing 0 means not changing the corresponding radius. Changed radius will be reset each time the player reloads the game.
    - name: set_plastic_damage
      detail: void set_plastic_damage(minDmg, maxDmg)
      doc: |-
        Sets the minimum and maximum damage for Plastic Explosives. Changed damage will be reset each time the player reloads the game.
    - name: available_global_script_types
      detail: int available_global_script_types
    - name: set_global_script_repeat
      detail: void set_global_script_repeat(int frames)
      doc: |-
        Only has an effect on the script it is called from. Every global script needs its own `game_loaded` block to correctly set up repeat rate. Will have no effect if called on a non-global script.
    - name: set_global_script_type
      detail: void set_global_script_type(int type)
      doc: |-
        Only has an effect on the script it is called from. Every global script needs its own `game_loaded` block to correctly set up the script type.
    - name: get_sfall_global_float
      detail: float get_sfall_global_float(string/int varname)
      doc: |-
        These functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game.
    - name: get_sfall_global_int
      detail: int get_sfall_global_int(string/int varname)
      doc: |-
        These functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game.
    - name: set_sfall_global
      detail: void set_sfall_global(string/int varname, int/float value)
      doc: |-
        These functions require an __EXACTLY 8 characters long__, case sensitive string for the variable name. The variables behave the same as normal Fallout globals, except that they don't have to be declared beforehand in `vault13.gam`. Trying to get a variable which hasn't been set will always return 0. The functions are intended for use when a patch to a mod requires the addition of a new global variable, a case which would otherwise require the player to start a new game.
    - name: activate_shader
      detail: void activate_shader(int ID)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: deactivate_shader
      detail: void deactivate_shader(int ID)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: force_graphics_refresh
      detail: void force_graphics_refresh(bool enabled)
      doc: |-
        Forces the screen to redraw at times when it normally wouldn't. If you're using animated shader, turning this option on is recommended.
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: free_shader
      detail: void free_shader(int ID)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: get_screen_height
      detail: int get_screen_height()
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: get_screen_width
      detail: int get_screen_width()
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: get_shader_texture
      detail: int get_shader_texture(int ID, int texture)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: get_shader_version
      detail: int get_shader_version
      doc: |-
        Gives you the highest shader version supported by the player's graphics cards. Possible return values are 11, 12, 13, 14, 20, 21 and 30.
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: graphics_funcs_available
      detail: bool graphics_funcs_available
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: load_shader
      detail: int load_shader(string path)
      doc: |-
        Takes a path relative to the `<GameRoot>\<master_patches>\shaders\` directory as an argument and returns a shader ID. That ID should be passed as the first argument to all other shader functions, and is valid until `free_shader` is called on the ID, the player loads a saved game or the player quits to the main menu.
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_palette
      detail: void set_palette(string path)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_shader_float
      detail: void set_shader_float(int ID, string param, float value)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_shader_int
      detail: void set_shader_int(int ID, string param, int value)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_shader_mode
      detail: void set_shader_mode(int mode)
      doc: |-
        Tells sfall when to use a shader. The parameter is a set of 32 flags which specify the screens on which the shader will be disabled, unless bit 32 is set, in which case the shader will only be active on those screens. Remember that screens are displayed on top of each other; if the player opens the character menu which in combat, the game still considers the player to be in combat. See `sfall.h` for a list of defines.
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_shader_texture
      detail: void set_shader_texture(int ID, string param, int texID)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: set_shader_vector
      detail: void set_shader_vector(int ID, string param, float f1, float f2, float f3, float f4)
      doc: |-
        The graphics functions are only available if the user is using graphics mode 4 or 5. Use `graphics_funcs_available` to check; it returns 1 if you can use them or 0 if you can't. Calling graphics functions when `graphics_funcs_available` returns 0 will do nothing.
    - name: get_sfall_arg
      detail: mixed get_sfall_arg()
      doc: |-
        Gets the next argument from sfall. Each time it's called it returns the next argument, or otherwise it returns 0 if there are no more arguments left. You can arbitrarily get the value of any argument using the `sfall_func1("get_sfall_arg_at", argNum)` function.
    - name: get_sfall_arg_at
      detail: mixed get_sfall_arg_at(int argNum)
      doc: |-
        Gets the value of hook argument with the specified argument number (first argument of hook starts from 0)
    - name: get_sfall_args
      detail: int get_sfall_args()
      doc: |-
        Returns all hook arguments as a new temp array.
    - name: init_hook
      detail: int init_hook()
      doc: |-
        The hook script equivalent of game_loaded; it returns 2 when the script is first loaded, 1 when the player reloads and 0 otherwise.
    - name: register_hook
      detail: void register_hook(int hookID)
      doc: |-
        Used from a normal global script if you want to run it at the same point a full hook script would normally run. In case of this function, `start` proc will be executed in current global script. You can use all above functions like normal.
    - name: register_hook_proc
      detail: void register_hook_proc(int hookID, proc procedure)
      doc: |
        The same as `register_hook`, except that you specifically define which procedure in the current script should be called as a hook (instead of "start" by default). Pass procedure the same as how you use dialog option functions. This IS the recommended way to use hook scripts, as it gives both modularity (each mod logic in a separate global script, no conflicts if you don't use "hs_*.int" scripts) and flexibility (you can place all related hook scripts for specific mod in a single script!).

        Use zero (0) as second argument to unregister hook script from current global script.

        __NOTE:__ you can hook several scripts to a single hook point, for example if it's different mods from different authors or just some different aspects of one larger mod. In this case scripts are executed in reverse order of how they were registered. When one of the scripts in a chain returns value with `set_sfall_return`, the next script may override this value if calls `set_sfall_return` again. Sometimes you need to multiply certain value in a chain of hook scripts.

        Example: let's say we have a Mod A which reduces all "to hit" chances by 50%. The code might look like this:

        ```js
        original_chance = get_sfall_arg;
        set_sfall_return(original_chance / 2);
        ```

        Mod B also want to affect hit chances globally, by increasing them by 50%. Now in order for both mods to work well together, we need to add this line to Mod A hook script:
        ```js
        set_sfall_arg(0, (original_chance / 2));
        ```

        This basically changes hook argument for the next script. Mod B code:
        ```js
        original_chance = get_sfall_arg;
        set_sfall_return(original_chance * 1.5);
        set_sfall_arg(0, (original_chance * 1.5));
        ```

        So if you combine both mods together, they will run in chain and the end result will be a 75% from original hit chance (hook register order doesn't matter in this case, if you use `set_sfall_arg` in both hooks).

        The defines to use for the `hookID` are in `sfall.h`.
    - name: register_hook_proc_spec
      detail: void register_hook_proc_spec(int hookID, procedure proc)
      doc: |-
        Works very similar to `register_hook_proc`, except that it registers the current script at the end of the hook script execution chain (i.e. the script will be executed after all previously registered scripts for the same hook, including the `hs_*.int` script). All scripts hooked to a single hook point with this function are executed in exact order of how they were registered, as opposed to the description below, which refers to using `register_hook/register_hook_proc` functions.
    - name: set_sfall_arg
      detail: void set_sfall_arg(int argNum, int value)
      doc: |-
        Changes argument value. The argument number (argNum) is 0-indexed. This is useful if you have several hook scripts attached to one hook point (see `register_hook_proc`).
    - name: set_sfall_return
      detail: void set_sfall_return(int value)
      doc: |-
        Used to return the new values from the script. Each time it's called it sets the next value, or if you've already set all return values it does nothing.
    - name: get_ini_section
      detail: array get_ini_section(string file, string sect)
      doc: |-
        Returns an associative array of keys and values for a given INI file and section. NOTE: all keys and their values will be of String type.
    - name: get_ini_sections
      detail: array get_ini_sections(string file)
      doc: |-
        Returns an array of names of all sections in a given INI file.
    - name: get_ini_setting
      detail: int get_ini_setting(string setting)
      doc: |
        - Reads an integer value from an ini file in the fallout directory.
        - It only takes a single argument; seperate the file name, section and key with a "\|" character; e.g. `myvar:=get_ini_setting("myini.ini|mysec|var1")` If the file or key cannot be found, -1 is returned.
        - The file name is limited to 63 chars, including the extension.
        - The section name is limited to 32 characters.
        - It can also be used to get sfall's settings, by using `ddraw.ini` as the file name.
    - name: get_ini_string
      detail: string get_ini_string(string setting)
      doc: |-
        Reads a string value from an ini file in the fallout directory.
    - name: modified_ini
      detail: int modified_ini
      doc: |-
        Returns the value of ModifiedIni setting in [Main] section of the INI.
    - name: set_ini_setting
      detail: void set_ini_setting(string setting, int/string value)
      doc: |-
        Writes an integer or a string value to an ini file in the Fallout directory. If the ini file does not exist, it will be created The setting argument works in the same way as in `get_ini_setting`, seperate the file name, section and key with a "|" character. __Note:__ the file name is limited to 63 chars (including the extension), the section name is limited to 32 characters.
    - name: display_stats
      detail: void display_stats()
      doc: |
        - Updates player's stats in the inventory display window or on the character screen.
        - NOTE: works only when the interface window is opened
    - name: inventory_redraw
      detail: void inventory_redraw(invSide)
      doc: |-
        Redraws inventory items list in the inventory/loot/barter screens. Argument invSide specifies which side needs to be redrawn: 0 - the player, 1 - target (container/NPC in loot/barter screens), -1 - both sides (same as without argument).
    - name: get_mouse_buttons
      detail: int get_mouse_buttons()
      doc: |-
        Returns the number of the mouse button that is currently pressed (1 - left, 2 - right, 3 - left+right, 4 - middle, 0 otherwise).
    - name: get_mouse_x
      detail: int get_mouse_x()
    - name: get_mouse_y
      detail: int get_mouse_y()
    - name: key_pressed
      detail: int key_pressed(int dxScancode)
    - name: tap_key
      detail: void tap_key(int dxScancode)
    - name: remove_attacker_knockback
      detail: void remove_attacker_knockback(CritterPtr)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: remove_target_knockback
      detail: void remove_target_knockback(CritterPtr)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: remove_weapon_knockback
      detail: void remove_weapon_knockback(WeaponPtr)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: set_attacker_knockback
      detail: void set_attacker_knockback(CritterPtr, int type, float value)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: set_target_knockback
      detail: void set_target_knockback(CritterPtr, int type, float value)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: set_weapon_knockback
      detail: void set_weapon_knockback(WeaponPtr, int type, float value)
      doc: |-
        The `type` value in the weapon knockback functions can be 0 or 1. If 0, the value becomes an absolute distance that targets will be knocked back. If 1, the value is multiplied by the distance they would normally have been knocked back. Weapon knockback modifiers are applied in the order weapon -> attacker -> target, so a x2 weapon wielded by an abs 6 attacker hitting a /2 target will knock the target back 3 squares. The knockback functions will not override the stonewall perk or knockdowns resulting from criticals. knockback values set on weapons or critters are not saved, and must be reset each time the player reloads.
    - name: list_as_array
      detail: array list_as_array(int type)
      doc: |-
        The `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list. (Defined in `sfall.h`) It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards.
    - name: list_begin
      detail: int list_begin(int type)
      doc: |-
        The `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list. (Defined in `sfall.h`) It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards.
    - name: list_end
      detail: void list_end(int listid)
      doc: |-
        The `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list. (Defined in `sfall.h`) It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards.
    - name: list_next
      detail: int list_next(int listid)
      doc: |-
        The `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list. (Defined in `sfall.h`) It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards.
    - name: party_member_list
      detail: array party_member_list(int includeHidden)
      doc: |-
        Returns an array of all current party members (0 - only critter-type, alive and visible will be returned, 1 - all object, including Trunk, etc.)
        The `list_xxx` functions can be used to loop over all items on a map. `list_begin` takes an argument telling sfall what you want to list. (Defined in `sfall.h`) It returns a list pointer, which you iterate through with `list_next`. Finally, when you've finished with the list use `list_end` on it. Not calling `list_end` will result in a memory leak. Alternatively, use `list_as_array` to get the whole list at once as a temp array variable, which can be looped over using `len_array` and which you don't need to remember to free afterwards.
    - name: lock_is_jammed
      detail: bool lock_is_jammed(ObjectPtr obj)
      doc: |-
        Returns 1 if the lock (container or scenery) is currently jammed, 0 otherwise.
    - name: set_unjam_locks_time
      detail: void set_unjam_locks_time(int time)
      doc: |-
        Sets after how many hours (up to 127 hours) jammed locks will be unjammed if the player leaves the map. Also disables the auto unjam that occurs at midnight when the player is on the map. Passing 0 will disable the auto unjam mechanism completely. The auto unjam mechanism will be reset each time the player reloads the game.
    - name: unjam_lock
      detail: void unjam_lock(ObjectPtr obj)
      doc: |-
        Unjams a lock immediately without having to wait until the next day, or leave the map and then return after 24 hours. __Does not work__ in `use_skill_on_p_proc` procedure.
    - name: intface_hide
      detail: void intface_hide()
      doc: |-
        Hides main interface.
    - name: intface_is_hidden
      detail: bool intface_is_hidden()
      doc: |-
        Returns 1 if interface is currently hidden, 0 otherwise.
    - name: intface_redraw
      detail: void intface_redraw(bool winType)
      doc: |
        Redraws main game interface. Useful after direct changes to current player weapons or stats to reflect changes.
        - redraws main game interface, useful to reflect changes after directly changing current player weapons or stats
        - `winType`: the type number of the interface window (see `WINTYPE_*` constants in `sfall.h`). Pass `-1` to redraw all interface windows.
    - name: intface_show
      detail: void intface_show()
      doc: |-
        Shows main interface.
    - name: exec_map_update_scripts
      detail: void exec_map_update_scripts()
      doc: |-
        Executes `map_update_p_proc` for all objects on map and global/hook scripts as well.
    - name: force_encounter
      detail: void force_encounter(int map)
      doc: |-
        Can be called either from a global script while traveling on the world map, or from a normal script while on a local map. In either case the encounter occurs shortly after the next time the player moves on the world map. The player will not get an outdoorsman skill check.
    - name: force_encounter_with_flags
      detail: void force_encounter_with_flags(int map, int flags)
      doc: |
        Does the same thing as force_encounter, but allows the specification of some extra options (see `sfall.h` for available flags).
        Forcing a random encounter on a map that is not normally used for random encounters may cause the player to lose the car, if they have it. In this case use `force_encounter_with_flags` with the `ENCOUNTER_FLAG_NO_CAR` flag set.
    - name: get_map_enter_position
      detail: array get_map_enter_position()
      doc: |-
        Returns an array of the player's position data (index: 0 - tile, 1 - elevation, 2 - rotation) when entering the map through exit grids. If entering from the world map, the tile value will be -1. Should be called in `map_enter_p_proc` procedure to get the correct position data.
    - name: in_world_map
      detail: bool in_world_map
      doc: |-
        Returns 1 if the player is looking at the world map, or 0 at any other time. Obviously this is only useful in global scripts, since normal scripts will never get the chance to run on the world map.
    - name: set_map_enter_position
      detail: void set_map_enter_position(int tile, int elevation, int rotation)
      doc: |-
        Overrides the players entry position when entering the map through exit grids. Setting the tile to 0 will put the player on the start hex (default tile and elevation) of the map. Works only in `map_enter_p_proc` procedure.
    - name: set_map_time_multi
      detail: void set_map_time_multi(float multi)
      doc: |-
        Adjusts how fast time passes while you're on the world map. It takes a single float as an argument, where 1 is the normal speed. This function works in addition to the `WorldMapTimeMod` setting in `ddraw.ini` and the Pathfinder perk, rather than overriding it, so calling `set_map_time_multi(0.5)` when the player has 2 levels of Pathfinder would result in time passing at 25% the normal speed on the world map.
    - name: set_terrain_name
      detail: void sfall_func3("set_terrain_name", int x, int y, string name)
      doc: |-
        Overrides the terrain type name for the sub-tile on the world map by the specified coordinates.
    - name: set_town_title
      detail: void sfall_func2("set_town_title", int areaID, string title)
      doc: |
        Sets a floating text for a town on the world map when hovering the cursor over the player's marker.
        ```
        - areaID: the ID number of the town from city.txt
        ```
    - name: ^
      detail: x^y
      doc: |
        Exponentiation. Use as any other arithmetic operator, like `5^(1/3)`.
        If exponent is an integer, you can use a negative base, otherwise you will get "NaN" with a negative base.
        If both arguments are integers, the result will be an integer.
    - name: abs
      detail: int/float abs(int/float x)
      doc: |-
        Absolute (positive) value of x.
    - name: arctan
      detail: float arctan(float x, float y)
      doc: |-
        Arctangent of x. Pass 1 as y (don't ask...).
    - name: ceil
      detail: int ceil(float)
      doc: |-
        Round x to the nearest integer that is not less than x.
    - name: cos
      detail: float cos(float x)
      doc: |-
        Cosine of x
    - name: div
      detail: div(x, y)
      doc: |
        Unsigned integer division. Use as a division operator, like `3 + (20 div 5)`.
        If both dividend and divisor are integers, they will be treated as unsigned integers.
        If one of them is a float, div will perform the signed division just like vanilla division operator.
    - name: exponent
      detail: float exponent(float x)
      doc: |-
        E^X
    - name: floor2
      detail: int floor2(int/float value)
      doc: |-
        Works just like vanilla floor function, but returns correct integers for negative values (vanilla floor function works exactly the same as `ceil` for negative values, much like `trunc` in C/C++).
    - name: log
      detail: float log(float x)
      doc: |-
        Natural logarithm of x.
    - name: round
      detail: int round(float x)
      doc: |-
        Round x to the nearest integer.
    - name: sin
      detail: float sin(float x)
      doc: |-
        Sine of x
    - name: sqrt
      detail: float sqrt(float x)
      doc: |-
        Square root of x.
    - name: tan
      detail: float tan(float x)
      doc: |-
        Tangent of x
    - name: has_fake_perk_npc
      detail: int has_fake_perk_npc(object npc, string namePerk)
      doc: |-
        These functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)
    - name: has_fake_trait_npc
      detail: int has_fake_trait_npc(object npc, string nameTrait)
      doc: |-
        These functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)
    - name: set_fake_perk_npc
      detail: void set_fake_perk_npc(object npc, string namePerk, int level, int image, string desc)
      doc: |-
        These functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)
    - name: set_fake_trait_npc
      detail: void set_fake_trait_npc(object npc, string nameTrait, int active, int image, string desc)
      doc: |-
        These functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)
    - name: set_selectable_perk_npc
      detail: void set_selectable_perk_npc(object npc, string namePerk, int active, int image, string desc)
      doc: |-
        These functions are similar to `has_fake_*/set_fake_*/set_selectable_perk` functions, but apply to the specified party member NPC (including `dude_obj`)
    - name: dialog_obj
      detail: ObjectPtr dialog_obj()
      doc: |-
        Returns a pointer to the object (critter) the player is having a conversation or bartering with.
    - name: get_flags
      detail: int get_flags(ObjectPtr obj)
      doc: |-
        Gets the current value of object flags (see `define_extra.h` for available flags).
    - name: get_object_data
      detail: get_object_data(ObjectPtr object, int offset)
      doc: |-
        Returns the data at the specified offset of an object (see `OBJ_DATA_*` constants in `define_extra.h` for offsets).
    - name: get_script
      detail: int get_script(ObjectPtr)
      doc: |
        - accepts a pointer to an object and returns its scriptID (line number in `scripts.lst`), or 0 if the object is unscripted.
        - returns -1 on argument error.
    - name: loot_obj
      detail: ObjectPtr loot_obj()
      doc: |-
        Returns a pointer to the target object (container or critter) of the loot screen.
    - name: obj_is_carrying_obj
      detail: int (ObjectPtr invenObj, ObjectPtr itemObj)
      doc: |-
        Returns number of `itemObj` inside invenObj's inventory, note that both arguments are object pointers. useful when dealing with different stacks of same item (`obj_is_carrying_obj_pid` just returns total for all stacks of the same PID.)
    - name: obj_under_cursor
      detail: ObjectPtr obj_under_cursor(bool onlyCritter, bool includeDude)
      doc: |
        Returns the object under the cursor on the main game screen.
        - onlyCritter:
          - True - only checks critters and ignores their cover (roof tiles, walls, scenery, etc.)
          - False - checks all objects (can't check critters under objects)
        - passing False to the includeDude argument will ignore dude_obj
        **NOTE:** the function will always return 0 if the cursor is in movement mode (hexagon cursor).
    - name: real_dude_obj
      detail: ObjectPtr real_dude_obj()
      doc: |-
        Returns the initial `dude_obj` after `set_dude_obj` was used.
    - name: remove_script
      detail: void remove_script(ObjectPtr)
      doc: |-
        Accepts a pointer to an object and will remove the script from that object.
    - name: set_dude_obj
      detail: void set_dude_obj(ObjectPtr critter)
      doc: |-
        Take control of a given critter. Passing value 0 will reset control back to "real" dude.
    - name: set_flags
      detail: void set_flags(ObjectPtr obj, int flags)
      doc: |-
        Sets the current flags of an object. All flags are rewritten with given integer, so first get current flags with `get_flags` and use `bwor/bwand` to set/remove specific flag.
    - name: set_object_data
      detail: set_object_data(ObjectPtr object, int offset, int data)
      doc: |-
        Sets the data at the specified offset of an object.
    - name: set_script
      detail: void set_script(ObjectPtr, int scriptid)
      doc: |-
        Accepts a pointer to an object and scriptID, and applies the given script to an object (scriptID accept the same values as `create_object_sid `from sfall 3.6). If used on an object that is already scripted, it will remove the existing script first; you cannot have multiple scripts attached to a single object. Calling `set_script` on `self_obj` will have all sorts of wacky side effects, and should be avoided. If you add 0x80000000 to the sid when calling `set_script`, `map_enter_p_proc` will be SKIPPED. The `start` proc will always be run.
    - name: set_self
      detail: void set_self(ObjectPtr)
      doc: |
        Overrides the script's `self_obj` for the next function call.
        - It is primarily used to allow the calling of functions which take an implicit `self_obj` parameter (e.g. `drop_obj`) from global scripts, but it can also be used from normal scripts.
        - Will revert back to its original value after the next function call.
        - Calling `self_obj(0)` will also revert `self_obj` to original value. It is recommended to call this after each use of `set_self` in normal scripts in order to avoid unforeseen side effects.
        - `source_obj`, `target_obj`, and similar functions will not work if preceded by `set_self`.
        - __NOTE:__ for `use_obj`, `use_obj_on_obj` vanilla functions to work correctly, it is required to call `set_self` twice.
    - name: set_unique_id
      detail: int set_unique_id(ObjectPtr object, int flag)
      doc: |
        Assigns a unique ID number to the object and returns it. If a unique ID number has already been assigned to an object, then ID number is returned without reassignment. `flag` is optional.
        - items with unique IDs will not stack with other items of the same type in the inventory
        - to just get the current ID number of an object, use `get_object_data(object, OBJ_DATA_ID)`
        - unique ID numbers are saved in your savegame, and have a range from 0x10000000 to 0x7FFFFFFF
        - there is also a unique ID number range for the player and party members from 18000 to 83535
        - to assign a new ID number generated by the engine to the object (i.e. unassign a unique ID), call the function with two arguments and pass -1 for the flag argument
    - name: active_hand
      detail: int active_hand
    - name: add_g_timer_event
      detail: void add_g_timer_event(int time, int fixedParam)
      doc: |
        Adds a timer event that calls the `timed_event_p_proc` procedure in the current global script
        `time`: the number of ticks after which the event timer is triggered
        `fixedParam`: the value that is passed to the `timed_event_p_proc` procedure for the `fixed_param` function
    - name: add_trait
      detail: void add_trait(int traitID)
      doc: |-
        adds the specified trait to the player
    - name: create_message_window
      detail: void create_message_window(string message)
    - name: create_spatial
      detail: ObjectPtr create_spatial(int scriptID, int tile, int elevation, int radius)
      doc: |-
        Creates new spatial script with given SID, at given tile, and radius.
    - name: game_loaded
      detail: int game_loaded()
      doc: |-
        Returns 1 the first time it is called after a new game or game load, and 0 any time after. It works on an individual basis for each script, so one script wont interfere with others. Its primary use is for global scripts, so that they know when to call `set_global_script_repeat`, but it can be called from normal scripts too.
    - name: gdialog_get_barter_mod
      detail: int gdialog_get_barter_mod
    - name: get_game_mode
      detail: int get_game_mode()
      doc: |-
        A more flexible version of in_world_map. It will return a set of flags indicating which mode the game is currently in. These flags are the same as those used in the `set_shader_mode function`.
    - name: get_inven_ap_cost
      detail: int get_inven_ap_cost
      doc: |-
        Returns the current AP cost to access the inventory in combat
    - name: get_kill_counter
      detail: int get_kill_counter(int critterType)
    - name: get_light_level
      detail: int get_light_level()
      doc: |-
        Returns ambient light level in range 0..65536. The value returned by get_light_level may not exactly match that set by `set_light_level`, as `set_light_level` applies modifiers from the Night Vision perk.
    - name: get_npc_level
      detail: int get_npc_level(string npc)
    - name: get_proto_data
      detail: int get_proto_data(int pid, int offset)
      doc: |-
        Used to read the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading.
    - name: get_unspent_ap_bonus
      detail: int get_unspent_ap_bonus()
      doc: |-
        Gets the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.)
    - name: get_unspent_ap_perk_bonus
      detail: int get_unspent_ap_perk_bonus()
      doc: |-
        Similar to `get_unspent_ap_bonus`, but accounts for the extra AC granted by the H2H Evade perk. (The default value of this is also 4, equivalent to doubling the original bonus.
    - name: get_uptime
      detail: int get_uptime()
      doc: |-
        Just a wrapper around the windows GetTickCount() function. It's useful for making time fade effects in shaders, since they already have access to the current tick count.
    - name: get_viewport_x
      detail: int get_viewport_x()
    - name: get_viewport_y
      detail: int get_viewport_y()
    - name: get_year
      detail: int get_year
    - name: hero_select_win
      detail: void hero_select_win(int)
    - name: inc_npc_level
      detail: void inc_npc_level(int party_member_pid)
      doc: |-
        Takes a party member PID or an NPC name (deprecated, for compatibility with sfall 4.1.5/3.8.15 or earlier) as an argument. The NPC must be in your party. This function ignores player level requirements and the minimum 3 player level delay between NPC level gains. It also ignores the random element, regardless of sfall's `NPCAutoLevel` setting.
    - name: input_funcs_available
      detail: int input_funcs_available()
      doc: |-
        The input functions are only available if the user has the input hook turned on in `ddraw.ini`. Use `input_funcs_available` to check.
    - name: mark_movie_played
      detail: void mark_movie_played(int id)
    - name: message_str_game
      detail: string message_str_game(int fileId, int messageId)
      doc: |
        Works exactly the same as message_str, except you get messages from files in `text/english/game` folder. Use `GAME_MSG_*` defines or `mstr_*` macros from `sfall.h` to use specific msg file
        - Additional game msg files added by `ExtraGameMsgFileList` setting will have consecutive fileIds assigned beginning from 0x2000 to 0x2FFF. (e.g. if you set `ExtraGameMsgFileList=foo,bar` in `ddraw.ini`, `foo.msg` will be associated with 0x2000 and `bar.msg` with 0x2001.).
        - If a file has a specific number assigned in `ExtraGameMsgFileList`, its fileId will be (0x2000 + assigned number). (e.g. with `ExtraGameMsgFileList=foo,bar:2,foobar` in `ddraw.ini`, `bar.msg` will be associated with 0x2002 and `foobar.msg` with 0x2003.)
    - name: mod_kill_counter
      detail: void mod_kill_counter(int critterType, int amount)
    - name: nb_create_char
      detail: int nb_create_char()
      doc: |-
        `nb_*` functions are reserved for the brotherhood tactical training mod, and should be avoided.
    - name: resume_game
      detail: void resume_game()
    - name: set_base_hit_chance_mod
      detail: void set_base_hit_chance_mod(int max, int mod)
    - name: set_base_pickpocket_mod
      detail: void set_base_pickpocket_mod(int max, int mod)
      doc: |-
        Changes maximum chance of success and chance mod for each steal attempt. `max` will replace 95% success chance cap (so you can set 100% maximum chance, for instance). `mod` will add this much percent to each success chance. for example if your chance is 50% and `mod` is 20, you will get 70% actual success rate
    - name: set_critter_hit_chance_mod
      detail: void set_critter_hit_chance_mod(CritterPtr, int max, int mod)
    - name: set_critter_pickpocket_mod
      detail: void set_critter_pickpocket_mod(CritterPtr, int max, int mod)
      doc: |-
        The same as `set_base_pickpocket`, but applies only to specific critter.
    - name: set_df_model
      detail: void set_df_model(string name)
    - name: set_dm_model
      detail: void set_dm_model(string name)
    - name: set_hit_chance_max
      detail: void set_hit_chance_max(int percentage)
      doc: |-
        Effects all critters rather than just the player and can set the maximum in range from 0 to 999.
    - name: set_hp_per_level_mod
      detail: void set_hp_per_level_mod(int mod)
    - name: set_inven_ap_cost
      detail: void set_inven_ap_cost
    - name: set_movie_path
      detail: void set_movie_path(string filename, int movieid)
    - name: set_pickpocket_max
      detail: void set_pickpocket_max(int percentage)
      doc: |-
        Effects all critters rather than just the player and can set the maximum in range from 0 to 999.
    - name: set_pipboy_available
      detail: void set_pipboy_available(int available)
      doc: |-
        Will only accept 0 or 1 as an argument. Using any other value will cause the function to have no effect. Use 0 to disable the pipboy, and 1 to enable it.
    - name: set_proto_data
      detail: void set_proto_data(int pid, int offset, int value)
      doc: |-
        Used to alter the in-memory copies of the .pro files Fallout makes when they are loaded. The offset refers to the offset in memory from the start of the proto to the element you are reading. Changes are not stored on disc, and are not permanent. If you modify the protos, and then Fallout subsequently reloads the file your changes will be lost.
    - name: set_unspent_ap_bonus
      detail: void set_unspent_ap_bonus(int multiplier)
      doc: |-
        Alters the AC bonus you receive per unused action point at the end of your turn in combat. To allow for fractional values, the value given if divided by 4. (Hence the default value is 4 and not 1.)
    - name: set_unspent_ap_perk_bonus
      detail: void set_unspent_ap_perk_bonus(int multiplier)
      doc: |-
        Similar to `set_unspent_ap_bonus`, but effects the extra AC granted by the H2H Evade perk. (The default value of this is also 4, equivalent to doubling the original bonus.
    - name: set_viewport_x
      detail: void set_viewport_x(int view_x)
    - name: set_viewport_y
      detail: void set_viewport_y(int view_y)
    - name: set_xp_mod
      detail: void set_xp_mod(int percentage)
    - name: sneak_success
      detail: int sneak_success
      doc: |-
        Returns 1 if last sneak attempt (roll against skill) was successful, 0 otherwise. This calls an internal engine function which is used to determine the perception range of critters (which you can override using `HOOK_WITHINPERCEPTION`).
    - name: stop_game
      detail: void stop_game()
    - name: toggle_active_hand
      detail: void toggle_active_hand
    - name: unwield_slot
      detail: void sfall_func2("unwield_slot", object critter, int slot)
      doc: |
        unequips an item from the specified slot for a critter or the player
        can take off player's equipped item when the inventory is opened, or the player is in the barter screen
        slot: 0 - armor slot, 1 - right slot, 2 - left slot (see `INVEN_TYPE_*` in `define.h`)
    - name: get_outline
      detail: int get_outline(ObjectPtr obj)
      doc: |-
        Gets the current outline color for an object.
    - name: outlined_object
      detail: ObjectPtr outlined_object()
      doc: |-
        Returns an object that is currently highlighted by hovering the mouse above it.
    - name: set_outline
      detail: void set_outline(ObjectPtr obj, int color)
      doc: |
        - sets the outline color of an object (see `OUTLINE_*` constants in `sfall.h`)
        - can also set a custom color from the game palette by shifting the color index value left by 8 bits: `0xCC00` where `CC` is the palette index (available since sfall 4.2.7/3.8.27)
        - passing 0 will disable the outline
    - name: apply_heaveho_fix
      detail: void apply_heaveho_fix
    - name: clear_selectable_perks
      detail: void clear_selectable_perks()
      doc: |-
        Restores the "select a perk" box to its default state.
    - name: get_perk_available
      detail: int get_perk_available(int perk)
    - name: get_perk_owed
      detail: int get_perk_owed
    - name: has_fake_perk
      detail: int has_fake_perk(string name)
      doc: |-
        Returns the number of levels the player has of the perks with the given name or ID of extra perk.
    - name: has_fake_trait
      detail: int has_fake_trait(string name)
      doc: |-
        Returns the number of levels the player has of the traits with the given name or ID of extra trait.
    - name: hide_real_perks
      detail: void hide_real_perks()
      doc: |-
        Prevent the "select a perk" box from displaying any of the original 119 perks.
    - name: perk_add_mode
      detail: void perk_add_mode(int type)
      doc: |-
        Modifies what happens when a fake perk is selected from the perks dialog. It is treated as a set of flags - if bit 1 is set then it is added to the player's traits, if bit 2 is set it is added to the player's perks, and if bit 3 is set it is removed from the list of selectable perks. The default is 0x2.
    - name: remove_trait
      detail: void remove_trait(int traitID)
    - name: seq_perk_freq
      detail: void seq_perk_freq(int value)
      doc: |-
        Sets the number of levels between each perk.
    - name: set_fake_perk
      detail: void set_fake_perk(string name, int level, int image, string desc)
      doc: |-
        Used to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in `skilldex.lst`. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower.
    - name: set_fake_trait
      detail: void set_fake_trait(string name, int active, int image, string desc)
      doc: |-
        Used to add additional traits and perks to the character screen. They will be saved correctly when the player saves and reloads games, but by themselves they will have no further effect on the character. For perks, the allowed range for levels is between 0 and 100; setting the level to 0 removes that perk. For traits, the level must be 0 or 1. The image is a numeric id that corresponds to an entry in `skilldex.lst`. The name is limited to 63 characters and the description to 255 characters by sfall, but internal Fallout limits may be lower.
    - name: set_perk_agl
      detail: void set_perk_agl(int perkID, int value)
    - name: set_perk_chr
      detail: void set_perk_chr(int perkID, int value)
    - name: set_perk_desc
      detail: void set_perk_desc(int perkID, string value)
    - name: set_perk_end
      detail: void set_perk_end(int perkID, int value)
    - name: set_perk_freq
      detail: void set_perk_freq(int value)
      doc: |-
        Sets the number of levels between each perk. Setting to 0 will reset it back to the default. This overrides the effects of the skilled trait. Not saved into the save game, so needs to be called once per reload. Be careful not to let the player obtain a perk when no perks are available to pick, or the game may crash.
    - name: set_perk_image
      detail: void set_perk_image(int perkID, int value)
    - name: set_perk_int
      detail: void set_perk_int(int perkID, int value)
    - name: set_perk_lck
      detail: void set_perk_lck(int perkID, int value)
    - name: set_perk_level
      detail: void set_perk_level(int perkID, int value)
    - name: set_perk_level_mod
      detail: void set_perk_level_mod(int levels)
      doc: |-
        Sets a modifier between +25 and -25 that is added/subtracted from the player's level for the purposes of deciding which perks can be chosen.
    - name: set_perk_name
      detail: void set_perk_name(int perkID, string value)
    - name: set_perk_owed
      detail: void set_perk_owed(int value)
    - name: set_perk_per
      detail: void set_perk_per(int perkID, int value)
    - name: set_perk_ranks
      detail: void set_perk_ranks(int perkID, int value)
    - name: set_perk_skill1
      detail: void set_perk_skill1(int perkID, int value)
    - name: set_perk_skill1_mag
      detail: void set_perk_skill1_mag(int perkID, int value)
    - name: set_perk_skill2
      detail: void set_perk_skill2(int perkID, int value)
    - name: set_perk_skill2_mag
      detail: void set_perk_skill2_mag(int perkID, int value)
    - name: set_perk_stat
      detail: void set_perk_stat(int perkID, int value)
    - name: set_perk_stat_mag
      detail: void set_perk_stat_mag(int perkID, int value)
    - name: set_perk_str
      detail: void set_perk_str(int perkID, int value)
    - name: set_perk_type
      detail: void set_perk_type(int perkID, int value)
    - name: set_perkbox_title
      detail: void set_perkbox_title(string title)
      doc: |-
        Used to change the title of the "select a perk" box, or by using "" it will be set back to the default.
    - name: set_pyromaniac_mod
      detail: void set_pyromaniac_mod(int bonus)
    - name: set_selectable_perk
      detail: void set_selectable_perk(string name, int active, int image, string desc)
      doc: |-
        Used to add additional items to "select a perk" box by setting the 'active' parameter to 1, and to remove them again by setting it to 0.
    - name: set_swiftlearner_mod
      detail: void set_swiftlearner_mod(int bonus)
    - name: show_real_perks
      detail: void show_real_perks()
      doc: |-
        Reverts the effect os `hide_real_perks`.
    - name: get_can_rest_on_map
      detail: get_can_rest_on_map(int mapNum, int elev)
      doc: |
        - returns the set rest value of the map after using the `set_can_rest_on_map` function
        - Returns -1 if the rest value of the map was not previously set (i.e. no data for the map in `sfalldb.sav`)
        - the `can_rest_here values` from `maps.txt` are ignored.
    - name: set_can_rest_on_map
      detail: void set_can_rest_on_map(int mapNum, int elev, bool value)
      doc: |
        Allows/disallows to rest on the map for the specified level, overrides the `can_rest_here` values in `maps.txt`.
        - `mapNum` is the map index from `maps.txt`
        - passing -1 to the elev argument will set the rest value for all map elevations
        - the set rest value will be stored in `sfalldb.sav` file (in savegame)
    - name: add_extra_msg_file
      detail: int add_extra_msg_file(string fileName)
      doc: |
        Loads the custom message file, and returns the file ID number assigned to it in range from 0x3000 to 0x3FFF for the `message_str_game` function to get messages from the file.
        - `fileName`: the name of the custom message file (including the .msg extension) in `text\<language>\game\` directory.

        Alternative form: `int add_extra_msg_file(string fileName, int fileNumber)`
        - `fileNumber`: the file ID number for the `message_str_game` function. The available range is from 0x2000 to 0x2FFF (see `ExtraGameMsgFileList` setting in `ddraw.ini`)
        Use `fileNumber` only if you want to add a message file without editing `ddraw.ini` or existing scripts to support the old way.
    - name: critter_inven_obj2
      detail: ObjectPtr critter_inven_obj2(ObjectPtr obj, int type)
      doc: |-
        Works just like vanilla `critter_inven_obj`, but correctly reports item in player's inactive hand slot.
    - name: dialog_message
      detail: void dialog_message(string text)
      doc: |-
        Displays a message in the NPC response window in dialog or barter screen.
    - name: get_current_inven_size
      detail: get_current_inven_size(ObjectPtr object)
      doc: |-
        Returns the current inventory size of the container or the critter.
    - name: get_metarule_table
      detail: array get_metarule_table
      doc: |-
        Returns names of all currently available scripting functions.
    - name: get_object_ai_data
      detail: int get_object_ai_data(ObjectPtr object, int aiParam)
      doc: |-
        Returns the setting value from the AI packet of an object (critter). Use `AI_CAP_*` constants from `define_extra.h` for the `aiParam` argument to get AI value.
    - name: get_text_width
      detail: int get_text_width(string text)
      doc: |-
        Returns the text width in pixels for the currently set font.
    - name: item_weight
      detail: int item_weight(ObjectPtr obj)
      doc: |-
        Gets the current weight of an object.
    - name: metarule_exist
      detail: bool metarule_exist(string metaruleName)
      doc: |-
        Returns True if the specified name of metarule (sfall_funcX) function exists in the current version of sfall.
    - name: npc_engine_level_up
      detail: void npc_engine_level_up(bool toggle)
      doc: |-
        Enables/disables the engine function that increases the level of party members in the player leveling process. If the engine function is disabled, the process of leveling up party members should be performed by script functions.
    - name: objects_in_radius
      detail: objects_in_radius", int tile, int radius, int elevation, int type)
      doc: |
        - returns an array of objects of a type (see `OBJ_TYPE_*` constants in `define_extra.h`) within the specified radius from the given tile
        - passing -1 to the `type` argument or _not specifying it_ will return all objects within the radius
        - the radius is limited to 50 hexes
    - name: set_drugs_data
      detail: void set_drugs_data(int type, int pid, int value)
      doc: |-
        Overrides the parameters of drugs set in the configuration file (`DrugsFile` setting in `ddraw.ini`). Type: 0 - changes the value of `NumEffects` for the drug (see `Drugs.ini` for the description of `NumEffects`), 1 - changes the duration of the addiction effect for the drug (a value of 1 = one game minute).
    - name: set_rest_heal_time
      detail: void set_rest_heal_time(int time)
      doc: |-
        Sets the time interval in minutes for healing during resting. The default is 180. Note: The interval will be reset each time the player reloads the game.
    - name: set_rest_mode
      detail: void set_rest_mode(int flags)
      doc: |-
        Sets the bit flags for the rest mode (see `RESTMODE_*` constants in `sfall.h`). Passing 0 will reset the rest mode. It will also be reset each time the player reloads the game.
    - name: sfall_func0("hide_window")
      detail: void sfall_func0("hide_window")
      doc: |-
        Hides currently active (selected) script window.
    - name: sfall_func0("show_window")
      detail: void sfall_func0("show_window")
      doc: |-
        Displays the script window previously hidden with the `sfall_func0("hide_window")` function.
    - name: sfall_func1("hide_window", string winName)
      detail: void sfall_func0("hide_window")
      doc: |
        Hides the specified script window.
        - winName: the window name, assigned to the window by the `CreateWin/create_win` function
    - name: sfall_func1("remove_timer_event", int fixedParam)
      detail: void sfall_func1("remove_timer_event", int fixedParam)
      doc: |-
        Removes all timer events with the specified `fixedParam` value for the current global script.
    - name: sfall_func1("show_window", string winName)
      detail: void sfall_func1("show_window", string winName)
      doc: |
        Displays the specified hidden script window.
        `winName`: the window name, assigned to the window by the `CreateWin/create_win` function
    - name: sfall_func2("string_compare", string str1, string str2)
      detail: bool sfall_func2("string_compare", string str1, string str2)
      doc: |-
        Compares two strings case-insensitive, and returns `True` if the two strings are matched.
    - name: sfall_func3("string_compare", string str1, string str2, int codePage)
      detail: bool sfall_func3("string_compare", string str1, string str2, int codePage)
      doc: |
        Compares two strings case-insensitive, and returns `True` if the two strings are matched
        - `codePage`: code page number to properly compare national characters in the range 128-255 of the ASCII code table
        available encodings: 1250-1252, 866
    - name: spatial_radius
      detail: int spatial_radius(ObjectPtr obj)
      doc: |-
        Returns radius of spatial script, associated with given dummy-object (returned by `create_spatial`).
    - name: void sfall_func0("remove_timer_event")
      detail: void sfall_func0("remove_timer_event")
      doc: |-
        Clears all set timer events for the current global script.
    - name: get_available_skill_points
      detail: int get_available_skill_points()
    - name: get_critter_skill_points
      detail: int get_critter_skill_points(int critter, int skill)
      doc: |-
        Will get the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses
    - name: mod_skill_points_per_level
      detail: void mod_skill_points_per_level(int value)
      doc: |-
        Accepts a value of between -100 and 100, and modifies the number of skill points the player recieves when they level up. This is a modification of what would otherwise happen, rather than a replacement. The value is not saved into the save game, so should be reset in the `game_loaded` section of a script.
    - name: set_available_skill_points
      detail: void set_available_skill_points(int value)
    - name: set_base_skill_mod
      detail: void set_base_skill_mod(int max)
    - name: set_critter_skill_mod
      detail: void set_critter_skill_mod(CritterPtr, int max)
    - name: set_critter_skill_points
      detail: void set_critter_skill_points(int critter, int skill, int value)
      doc: |-
        Will set the number of additional points a critter has in a skill, on top of whatever they have from their stats and other bonuses. Note that skill points are part of the proto, so calling it on a critter will affect all critters that share the same proto.
    - name: set_skill_max
      detail: void set_skill_max(int value)
      doc: |-
        Can't be used to increase the skill cap above 300.
    - name: get_critter_base_stat
      detail: int get_critter_base_stat(CritterPtr, int StatID)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: get_critter_extra_stat
      detail: int get_critter_extra_stat(CritterPtr, int StatID)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: get_pc_base_stat
      detail: int get_pc_base_stat(int StatID)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: get_pc_extra_stat
      detail: int get_pc_extra_stat(int StatID)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: get_stat_max
      detail: get_stat_max(int stat, bool who = False)
      doc: |-
        - Returns the maximum set value of the specified stat (see `set_stat_max` functions)
        - who: 0 (`false`) or omitting the argument - returns the value of the player, 1 (true) - returns the value set for other critters

        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: get_stat_min
      detail: get_stat_min(int stat, bool who = False)
      doc: |-
        - Returns the minimum set value of the specified stat (see `set_stat_min` functions)
        - who: 0 (`false`) or omitting the argument - returns the value of the player, 1 (true) - returns the value set for other critters

        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: set_critter_base_stat
      detail: void set_critter_base_stat(CritterPtr, int StatID, int value)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: set_critter_extra_stat
      detail: void set_critter_extra_stat(CritterPtr, int StatID, int value)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: set_pc_base_stat
      detail: void set_pc_base_stat(int StatID, int value)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: set_pc_extra_stat
      detail: void set_pc_extra_stat(int StatID, int value)
      doc: |-
        The `get/set_pc_base/extra_stat` functions are equivalent to calling `get/set_critter_base/extra_stat` with `dude_obj` as the critter pointer. None of these stat functions take perks into account, and neither do they do range clamping to make sure the stats are valid. Use the normal `get_critter_stat` function to get a correctly perk adjusted and range clamped value for a stat.
    - name: charcode
      detail: int charcode(string text)
      doc: |-
        Returns ASCII code for the first character in given string.
    - name: get_string_pointer
      detail: int get_string_pointer(string text)
      doc: |-
        Returns a pointer to a string variable or to a text.
    - name: string_format
      detail: string string_format(string format, any val1, any val2, ...)
      doc: |
        Formats given value using standard syntax of C printf function (google "printf" for format details). However it is limited to formatting up to 4 values.
        - formatting is only supported for %s and %d, and the format string is limited to 1024 characters
    - name: string_split
      detail: array string_split(string, split)
      doc: |-
        Takes a string and a seperator, searches the string for all instances of the seperator, and returns a temp array filled with the pieces of the string split at each instance. If you give an empty string as the seperator, the string is split into individual characters. You can use this to search for a substring in a string like this: `strlen(get_array(string_split(haystack, needle), 0))`
    - name: string_to_case
      detail: string sfall_func2("string_to_case", string text, int toCase)
      doc: |
        Converts all letters in the given string to the specified case.
        ```
        toCase: 0 - lowercase, 1 - uppercase
        ```
        NOTE: this function works only for English letters of A-Z/a-z.
    - name: strlen
      detail: int strlen(string text)
      doc: |-
        Returns string length.
    - name: substr
      detail: string substr(string, start, length)
      doc: |
        Cuts a substring from a string starting at "start" up to "length" characters. The first character position is 0 (zero).
        - If start is negative - it indicates starting position from the end of the string (for example `substr("test", -2, 2)` will return last 2 charactes: "st").
        - If length is negative - it means so many characters will be omitted from the end of string (example: `substr("test", 0, -2)` will return string without last 2 characters: "te").
        - If length is zero - it will return a string from the starting position to the end of the string **New behavior** for sfall 4.2.2/3.8.22
    - name: add_iface_tag
      detail: void add_iface_tag()
      doc: |-
        Adds one custom box to the current boxes, and returns the number of the added tag (-1 if the tags limit is exceeded. The maximum number of boxes is limited to 126 tags.
        show_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
    - name: hide_iface_tag
      detail: void hide_iface_tag(int tag)
      doc: |-
        show_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
    - name: is_iface_tag_active
      detail: int is_iface_tag_active(int tag)
      doc: |-
        Starting from sfall 4.1, can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
        show_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
    - name: set_iface_tag_text
      detail: void set_iface_tag_text(int tag, string text, int color)
      doc: |-
        Sets the text messages and colors for custom notification boxes to the interface without the need to add messages to `intrface.msg` and set up the font colors in `ddraw.ini`. Tag value is the same as used in `show_iface_tag`, `hide_iface_tag`, and `is_iface_tag_active`. The valid range is from 5 to (4 + the value of `BoxBarCount` in `ddraw.ini`) or the number of the last custom box added using the `add_iface_tag` function. The text is limited to 19 characters.
        show_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
    - name: show_iface_tag
      detail: void show_iface_tag(int tag)
      doc: |-
        show_iface_tag, hide_iface_tag and is_iface_tag_active relate to the boxes that appear above the interface such as SNEAK and LEVEL. You can use 3 for LEVEL and 4 for ADDICT, or the range from 5 to (4 + the value of BoxBarCount in `ddraw.ini`) for custom boxes. Remember to add your messages to `intrface.msg` and set up the font colours in `ddraw.ini` if you're going to use custom boxes. Starting from sfall 4.1/3.8.12, is_iface_tag_active can also be used to check 0 for SNEAK, 1 for POISONED, and 2 for RADIATED.
    - name: get_tile_fid
      detail: int get_tile_fid(int tile)
    - name: obj_blocking_line
      detail: ObjectPtr obj_blocking_line(ObjectPtr objFrom, int tileTo, int blockingType)
      doc: |-
        Returns first object which blocks direct linear path from `objFrom` to `tileTo` using selected blocking function (see `BLOCKING_TYPE_*` constants in `sfall.h`). If path is clear (no blocker was encountered by selected function) - returns 0. `objFrom` is always excluded from calculations, but is required to be a valid object.
    - name: obj_blocking_tile
      detail: ObjectPtr obj_blocking_tile(int tileNum, int elevation, int blockingType)
      doc: |-
        Returns first object blocking given tile using given blocking function or 0 if tile is clear.
    - name: path_find_to
      detail: array path_find_to(ObjectPtr objFrom, int tileTo, int blockingType)
      doc: |-
        Returns the shortest path to a given tile using given blocking function as an array of tile directions (0..5) to move on each step. Array length equals to a number of steps. Empty array means that specified target cannot be reached.
    - name: tile_by_position
      detail: int tile_by_position(int x, int y)
      doc: |
        - returns the tile number at the x, y position relative to the top-left corner of the screen
        - if the position is outside of the range of tiles, it will return -1
    - name: tile_get_objs
      detail: array tile_get_objs(int tileNum, int elevation)
      doc: |-
        Returns an array of all objects at given tile. It will include any hidden, dead or system objects (like cursor), so make sure to check properly when iterating.
    - name: tile_light
      detail: int tile_light(int elevation, int tileNum)
      doc: |-
        Returns light intensity at the given tile in range from 0 to 65535.
    - name: tile_refresh_display
      detail: void tile_refresh_display()
      doc: |-
        Redraws the game scene (tiles, walls, objects, etc.).
    - name: tile_under_cursor
      detail: int tile_under_cursor
    - name: atof
      detail: float atof(string text)
    - name: atoi
      detail: int atoi(string text)
    - name: sprintf
      detail: string sprintf(string format, any value)
      doc: |-
        Formats given value using standart syntax of C printf function (google "printf" for format details). However it is limited to formatting only 1 value. Can be used to get character by ASCII code ("%c").
    - name: typeof
      detail: int typeof(any value)
      doc: |-
        Returns type of the given value: VALTYPE_INT, VALTYPE_FLOAT or VALTYPE_STR.
    - name: sfall_ver_build
      detail: int sfall_ver_build()
    - name: sfall_ver_major
      detail: int sfall_ver_major()
    - name: sfall_ver_minor
      detail: int sfall_ver_minor()
    - name: fs_copy
      detail: int fs_copy(string path, string source)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_create
      detail: int fs_create(string path, int size)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_delete
      detail: void fs_delete(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_find
      detail: int fs_find(string path)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_pos
      detail: int fs_pos(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_read_byte
      detail: int fs_read_byte(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_read_float
      detail: float fs_read_float(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_read_int
      detail: int fs_read_int(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_read_short
      detail: int fs_read_short(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_resize
      detail: void fs_resize(int id, int size)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_seek
      detail: void fs_seek(int id, int pos)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_size
      detail: int fs_size(int id)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_bstring
      detail: void fs_write_bstring(int id, string data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_byte
      detail: void fs_write_byte(int id, int data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_float
      detail: void fs_write_float(int id, int data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_int
      detail: void fs_write_int(int id, int data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_short
      detail: void fs_write_short(int id, int data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: fs_write_string
      detail: void fs_write_string(int id, string data)
      doc: |-
        The `fs_*` functions are used to manipulate a virtual file system. Files saved here should have paths relative to the data folder, and use backslashes as the directory separator. They will take precedence over files stored in the normal data folder. They will also be saved into save games if you set a flag for them using `fs_resize(fileId, -1)`, so be avoid creating large files. Using `fs_copy` followed by `fs_read_xxx`, you can read the contents of existing files.
    - name: get_weapon_ammo_count
      detail: int get_weapon_ammo_count(ObjectPtr weapon)
      doc: |-
        This also allows to get current charges of a misc item (Geiger counter, etc).
    - name: get_weapon_ammo_pid
      detail: int get_weapon_ammo_pid(ObjectPtr weapon)
    - name: set_weapon_ammo_count
      detail: void set_weapon_ammo_count(ObjectPtr weapon, int count)
      doc: |-
        This also allows to set current charges of a misc item (Geiger counter, etc).
    - name: set_weapon_ammo_pid
      detail: void set_weapon_ammo_pid(ObjectPtr weapon, int pid)
    - name: create_win
      detail: void create_win(string winName, int x, int y, int width, int height, int flags)
      doc: |-
        `flags` argument is optional. Works just like vanilla `CreateWin` function, but creates a window with `MoveOnTop` flag if the flags argument is not specified, and allows to set additional flags for the created window. `MoveOnTop` flag allows the created window to be placed on top of the game interface.
    - name: draw_image
      detail: void draw_image(string/int artFile/artId, int frame, int x, int y, bool noTransparent)
      doc: |
        - displays the specified PCX or FRM image in the active window created by vanilla `CreateWin` or sfall's `create_win` script function
        - artFile/artId: path to the PCX/FRM file (e.g. `art\\inven\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)
        optional arguments:
        - `frame`: frame number, the first frame starts from zero
        - `x/y`: offset relative to the top-left corner of the window
        - `noTransparent`: pass True to display an image without transparent background
        - NOTE: to omit optional arguments starting from the right, call the functions with different `sfall_funcX` (e.g. `sfall_func4("draw_image", pathFile, frame, x, y))`
    - name: draw_image_scaled
      detail: void draw_image_scaled(string/int artFile/artId, int frame, int x, int y, int width, int height)
      doc: |
        - displays the specified PCX or FRM image in the active window created by vanilla `CreateWin` or sfall's `create_win` script function
        - artFile/artId: path to the PCX/FRM file (e.g. `art\\inven\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)
        optional arguments:
        - `frame`: frame number, the first frame starts from zero
        - `x/y`: offset relative to the top-left corner of the window
        - `width/height`: the new width/height to scale the image to. Pass -1 to either width or height to keep the aspect ratio when scaling
        - NOTE: to omit optional arguments starting from the right, call the functions with different `sfall_funcX` (e.g. `sfall_func4("draw_image", pathFile, frame, x, y))`
        - if called without `x/y/width/height` arguments, the image will be scaled to fit the window without transparent background
    - name: get_window_attribute
      detail: int sfall_func1("get_window_attribute", int winType)
      doc: |
        Alternative form: `int sfall_func2("get_window_attribute", int winType, int attrType)`
        Returns the attribute of the specified interface window by the `attrType` argument.
        - `winType`: the type number of the interface window (see `WINTYPE_*` constants in `sfall.h`)
        - `attrType`: `0` - checks and returns a value of 1 if the specified interface window is created by the game (same as without the argument)
                      `1` - X position, `2` - Y position (relative to the top-left corner of the game screen)
                      `3` - interface width size, `4` - interface height size
                      `-1` - returns an associative array of keys (left, top, right, bottom) and values that define the position of the window rectangle
                      (use standard syntax to access array values, e.g. `winRect.top`, `winRect.bottom`)
        - returns -1 if the specified attribute cannot be obtained
    - name: get_window_under_mouse
      detail: int get_window_under_mouse()
    - name: interface_art_draw
      detail: int sfall_func4("interface_art_draw", int winType, string artFile/int artID, int x, int y)
      doc: |
        ```c++
        int sfall_func4("interface_art_draw", int winType, string artFile/int artID, int x, int y)
        int sfall_func5("interface_art_draw", int winType, string artFile/int artID, int x, int y, int frame)
        int sfall_func6("interface_art_draw", int winType, string artFile/int artID, int x, int y, int frame, array param)
        ```
        - draws the specified PCX or FRM image in the game interface window, returns -1 on any error
        - `winType`: the type number of the interface window (see `WINTYPE_*` constants in `sfall.h`)
          this also takes the value of the flag (0x1000000) to prevent immediate redrawing of the interface window
        - `artFile/artId`: path to the PCX/FRM file (e.g. `art\\inven\\5mmap.frm`), or its FRM ID number (e.g. `0x7000026`, see specification of the FID format)
        - `x/y`: offset relative to the top-left corner of the window

        optional arguments:
        - `frame`: frame number, the first frame starts from zero
        - `param`: an array which specifies additional parameters, where:
          index 0 - sprite direction for multi-directional FRM
          index 1/index 2 - the new width/height to scale the image to. Pass -1 to use the original width/height
    - name: interface_print
      detail: int sfall_func5("interface_print", string text, int winType, int x, int y, int color)
      doc: |
        ```c++
        int sfall_func5("interface_print", string text, int winType, int x, int y, int color)
        int sfall_func6("interface_print", string text, int winType, int x, int y, int color, int width)
        ```
        - displays the text in the specified interface window with the current font. Use vanilla `SetFont` function to set the font
        - returns the count of lines printed, or -1 on any error
        - `text`: the text to be printed. Use the `\n` control character to move text to a new line (example: "Hello\nWorld!")
        - `winType`: the type number of the interface window (see `WINTYPE_*` constants in sfall.h)
        - `x/y`: offset relative to the top-left corner of the window
        - `color`: the color index in the game palette. Pass 0 if the text color was previously set by vanilla `SetTextColor` function
          It can also take additional flags (via `bwor`) for displaying text:
          - `0x0010000` - adds a shadow to the text, the 'textshadow' compiler constant
          - `0x1000000` - prevents immediate redrawing of the interface window, the `textdirect` compiler constant (works the other way around)
          - `0x2000000` - fills the background of the text with black color, the `textnofill` compiler constant (works the other way around)
        - `width` (optional): the maximum width of the text. The text will be wrapped to fit within the specified width
    - name: message_box
      detail: int sfall_func4("message_box", string message, int flags, int color1, int color2)
      doc: |
        Creates a dialog box with text and returns the result of pressing the button: 0 - No (Escape), 1 - Yes/Done (Enter). Returns -1 if for some reason the dialog box cannot be created.
        ```
        - message: the text in the dialog box. Use the `\n` control character to move text to a new line (example: "Hello\nWorld!")
        optional arguments:
        - flags: mode flags (see `MSGBOX_*` constants in define_extra.h). Pass -1 to skip setting the flags (default flags are NORMAL and YESNO)
        - color1/color2: the color index in the game palette. `color1` sets the text color for the first line, and `color2` for all subsequent lines of text (default color is 145)
        ```
    - name: nterface_overlay
      detail: sfall_func2("interface_overlay", int winType, int mode)
      doc: |
        Alternative form: `int sfall_func6("interface_overlay", int winType, 2, int x, int y, int width, int height)`.

        Creates an additional drawing surface above the graphic layer of the specified interface window. All subsequent calls of `interface_art_draw` and `interface_print` functions will draw on it.
        - `winType`: the type number of the interface window (see `WINTYPE_*` constants in `sfall.h`)
        - `mode`: 1 - creates a new overlay surface
                  2 - clears the overlay area or the specified rectangle defined by the `x`, `y`, `width`, `height` arguments
                  0 - destroys the created overlay surface (frees up the memory allocated to the surface)
    - name: set_window_flag
      detail: void set_window_flag(string winName/int winID, int flag, bool value)
      doc: |
        Changes the specified flag for the created script or game interface window.
        - winName: the window name, assigned to the window by the `CreateWin/create_win` function
        - winID: the ID number of the interface or script window obtained with the `get_window_under_mouse` function, or 0 for the current game interface
        - flag: the flag to change (see `WIN_FLAG_*` constants in `define_extra.h`)
        - value: `true` - set the flag, `false` - unset the flag
    - name: win_fill_color
      detail: int win_fill_color(int x, int y, int width, int height, int color)
      doc: |
        Fills the rectangle area of the currently selected script window with the specified color, or clears the window with transparent (index 0) color (call the function without arguments).
        - `color`: the color index in the game palette (from 0 to 255)
    - name: get_world_map_x_pos
      detail: int get_world_map_x_pos()
      doc: |-
        The mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game.
    - name: get_world_map_y_pos
      detail: int get_world_map_y_pos()
      doc: |-
        The mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game.
    - name: set_world_map_pos
      detail: void set_world_map_pos(int x, int y)
      doc: |-
        The mapper manual lists the functions `world_map_x_pos` and `world_map_y_pos`, which supposedly return the player's x and y positions on the world map. `get_world_map_x/y_pos` are included here anyway, because I was unable to get those original functions to work, or even to find any evidence that they existed in game.
    - name: call_offset_r0
      detail: int call_offset_r0(int address)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_r1
      detail: int call_offset_r1(int address, int arg1)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_r2
      detail: int call_offset_r2(int address, int arg1, int arg2)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_r3
      detail: int call_offset_r3(int address, int arg1, int arg2, int arg3)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_r4
      detail: int call_offset_r4(int address, int arg1, int arg2, int arg3, int arg4)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_v0
      detail: void call_offset_v0(int address)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_v1
      detail: void call_offset_v1(int address, int arg1)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_v2
      detail: void call_offset_v2(int address, int arg1, int arg2)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_v3
      detail: void call_offset_v3(int address, int arg1, int arg2, int arg3)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: call_offset_v4
      detail: void call_offset_v4(int address, int arg1, int arg2, int arg3, int arg4)
      doc: |-
        Can be used to call arbitrary functions inside Fallout. Different versions are used to call functions with different numbers of arguments. _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: sfall_func0
      detail: any sfall_func0(char* funcName)
      doc: |-
        Calls scripting function with given name and no arguments.
    - name: sfall_func1
      detail: any sfall_func1(char* funcName, arg1)
      doc: |-
        Calls scripting function with given name and 1 argument.
    - name: sfall_func2
      detail: any sfall_func2(char* funcName, arg1, arg2)
      doc: |-
        Calls scripting function with given name and 2 arguments.
    - name: sfall_func3
      detail: any sfall_func3(char* funcName, arg1, arg2, arg3)
      doc: |-
        Calls scripting function with given name and 3 arguments.
    - name: sfall_func4
      detail: any sfall_func4(char* funcName, arg1, arg2, arg3, arg4)
      doc: |-
        Calls scripting function with given name and 4 arguments.
    - name: sfall_func5
      detail: any sfall_func5(char* funcName, arg1, arg2, arg3, arg4, arg5)
      doc: |-
        Calls scripting function with given name and 5 arguments.
    - name: sfall_func6
      detail: any sfall_func6(char* funcName, arg1, arg2, arg3, arg4, arg5, arg6)
      doc: |-
        Calls scripting function with given name and 6 arguments
    - name: sfall_func7
      detail: any sfall_func7(string funcName, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
      doc: |-
        Calls scripting function with given name and 7 arguments
    - name: sfall_func8
      detail: any sfall_func8(string funcName, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
      doc: |-
        Calls scripting function with given name and 8 arguments
    - name: read_byte
      detail: int read_byte(int address)
      doc: |-
        These functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space.
    - name: read_int
      detail: int read_int(int address)
      doc: |-
        These functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space.
    - name: read_short
      detail: int read_short(int address)
      doc: |-
        These functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space.
    - name: read_string
      detail: int read_string(int address)
      doc: |-
        These functions take a memory address as the parameter and can read arbitrary pieces of Fallout's address space.
    - name: write_byte
      detail: void write_byte(int address, int value)
      doc: |-
        These functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: write_int
      detail: void write_int(int address, int value)
      doc: |-
        These functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: write_short
      detail: void write_short(int address, int value)
      doc: |-
        These functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
    - name: write_string
      detail: void write_string(int address, string value)
      doc: |-
        These functions take a memory address as the parameter and can write to arbitrary pieces of Fallout's address _None of these functions will work unless_ `AllowUnsafeScripting` _is enabled in_ `ddraw.ini`.
hooks:
  type: 21
  items:
    - name: HOOK_ADJUSTFID
      doc: |
        Runs after calculating character figure FID on the inventory screen, whenever the game decides that character appearance might change.
        Also happens on other screens, like barter.

        __NOTE:__ FID has following format: 0x0ABBCDDD, where A is object type, BB - animation code (always 0 in this case), C - weapon code, DDD - FRM index in LST file.

        ```
        int     arg0 - the vanilla FID calculated by the engine according to critter base FID and armor/weapon being used
        int     arg1 - the modified FID calculated by the internal sfall code (like Hero Appearance Mod)

        int     ret0 - overrides the calculated FID with provided value
        ```
    - name: HOOK_ADJUSTPOISON
      doc: |
        Runs when a critter's poison level is changed, or when the player takes damage from the poison.
        ```
        Critter arg0 - the critter
        int     arg1 - the amount of poison being added/removed
        int     arg2 - the damage value at the time of applying the poison effect
                       (damage from the poison effect is implemented only for the player character; for other critters, this value will always be 0)

        int     ret0 - the new amount of poison being added/removed
        int     ret1 - the new damage value, only negative values are allowed (will only be valid at the time of taking damage from the poison)
        ````
    - name: HOOK_ADJUSTRADS
      doc: |
        Runs when a critter's radiation level is changed.
        ```
        Critter arg0 - the critter (usually dude_obj)
        int     arg1 - the amount of radiation being added/removed

        int     ret0 - the new amount of radiation being added/removed
        ```
    - name: HOOK_AFTERHITROLL
      doc: |
        Runs after Fallout has decided if an attack will hit or miss.

        ```
        int     arg0 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit)
        critter arg1 - The attacker
        critter arg2 - The target of the attack
        int     arg3 - The bodypart
        int     arg4 - The hit chance

        int     ret0 - Override the hit/miss
        int     ret1 - Override the targeted bodypart
        critter ret2 - Override the target of the attack
        ```
    - name: HOOK_AMMOCOST
      doc: |
        Runs when calculating ammo cost for a weapon. Doesn't affect damage, only how much ammo is spent.
        By default, weapon will shoot when at least 1 round is left, regardless of ammo cost calculations.
        To add proper check for ammo before shooting and proper calculation of number of burst rounds (hook type 1 and 2 in arg3), set `Misc.CheckWeaponAmmoCost=1` in ddraw.ini

        ```
        Item    arg0 - weapon
        int     arg1 - Number of bullets in burst (1 for single shots)
        int     arg2 - Ammo cost calculated by original function (this is basically 2 for Super Cattle Prod and Mega Power Fist)
        int     arg3 - Type of hook (0 - when subtracting ammo after single shot attack, 1 - when checking for "out of ammo" before attack, 2 - when calculating number of burst rounds, 3 - when subtracting ammo after burst attack)

        int     ret0 - new ammo cost value (set to 0 for unlimited ammo)
        ```
    - name: HOOK_BARTERPRICE
      doc: |
        Runs whenever the value of goods being purchased is calculated.

        NOTE: the hook is executed twice when entering the barter screen or after transaction: the first time is for the player and the second time is for NPC


        ```
        critter arg0 - the critter doing the bartering (either dude_obj or inven_dude)
        critter arg1 - the critter being bartered with
        int     arg2 - the default value of the goods
        critter arg3 - table of requested goods (being bought from NPC)
        int     arg4 - the amount of actual caps in the barter stack (as opposed to goods)
        int     arg5 - the value of all goods being traded before skill modifications
        critter arg6 - table of offered goods (being sold to NPC)
        int     arg7 - the total cost of the goods offered by the player
        int     arg8 - 1 if the "offers" button was pressed (not for a party member), 0 otherwise
        int     arg9 - 1 if trading with a party member, 0 otherwise

        int     ret0 - the modified value of all of the goods (pass -1 if you just want to modify offered goods)
        int     ret1 - the modified value of all offered goods
        ```
    - name: HOOK_CALCAPCOST
      doc: |
        Runs whenever Fallout is calculating the AP cost of using the weapon (or unarmed attack). Doesn't run for using other item types or moving. Note that the first time a game is loaded, this script doesn't run before the initial interface is drawn, so if the script effects the AP cost of whatever is in the player's hands at the time the wrong AP cost will be shown. It will be fixed the next time the interface is redrawn. You can get the weapon object by checking item slot based on attack type (`ATKTYPE_LWEP1`, `ATKTYPE_LWEP2`, etc) and then calling `critter_inven_obj()`.

        ```
        critter arg0 - The critter performing the action
        int     arg1 - Attack Type (see ATKTYPE_* constants)
        int     arg2 - Is aimed attack (1 or 0)
        int     arg3 - The normal AP cost

        int     ret0 - The new AP cost
        ```
    - name: HOOK_CARTRAVEL
      doc: |
        Runs continuously during worldmap travel on car.

        ```
        int     arg0 - vanilla car speed (between 3 and 8 "steps")
        int     arg1 - vanilla fuel consumption (100 and below)

        int     ret0 - car speed override (pass -1 if you just want to override fuel consumption)
        int     ret1 - fuel consumption override
        ```
    - name: HOOK_COMBATDAMAGE
      doc: |
        Runs when:
        1.  Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.
        2.  AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.

        Does not run for misses, or non-combat damage like dynamite explosions.

        ```
        critter arg0  - The target
        critter arg1  - The attacker
        int     arg2  - The amount of damage to the target
        int     arg3  - The amount of damage to the attacker
        int     arg4  - The special effect flags for the target (use bwand DAM_* to check specific flags)
        int     arg5  - The special effect flags for the attacker (use bwand DAM_* to check specific flags)
        int     arg6  - The weapon used in the attack
        int     arg7  - The bodypart that was struck
        int     arg8  - Damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)
        int     arg9 - Number of bullets actually hit the target (1 for melee attacks)
        int     arg10 - The amount of knockback to the target
        int     arg11 - Attack Type (see ATKTYPE_* constants)
        mixed   arg12 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)

        int     ret0 - The damage to the target
        int     ret1 - The damage to the attacker
        int     ret2 - The special effect flags for the target
        int     ret3 - The special effect flags for the attacker
        int     ret4 - The amount of knockback to the target
        ```
    - name: HOOK_COMBATTURN
      doc: |
        Runs before and after each turn in combat (for both PC and NPC).

        ```
        int     arg0 - event type: 1 - start of turn, 0 - normal end of turn, -1 - combat ends abruptly (by script or by pressing Enter during PC turn), -2 - combat ends normally (hook always runs at the end of combat)
        int     arg1 - critter doing the turn
        bool    arg2 - 1 at the start/end of the player's turn after loading a game saved in combat mode, 0 otherwise

        int     ret0 - pass 1 at the start of turn to skip the turn, pass -1 at the end of turn to force end of combat
        ```
    - name: HOOK_DEATHANIM1
      doc: |
        Runs before Fallout tries to calculate the death animation. Lets you switch out which weapon Fallout sees.

        Does not run for critters in the knockdown/out state.

        ```
        int     arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
        critter arg1 - The attacker
        critter arg2 - The target
        int     arg3 - The amount of damage
        int     arg4 - Unused, always -1. Use this if you are using the same procedure for HOOK_DEATHANIM1 and HOOK_DEATHANIM2 (since sfall 4.1/3.8.24)

        int     ret0 - The pid of an object to override the attacking weapon with
        ```
    - name: HOOK_DEATHANIM2
      doc: |
        Runs after Fallout has calculated the death animation. Lets you set your own custom frame id, so more powerful than hs_deathanim1, but performs no validation.
        When using `critter_dmg` function, this script will also run. In that case weapon pid will be `-1` and attacker will point to an object with `obj_art_fid == 0x20001F5`.
        Does not run for critters in the knockdown/out state.

        ```
        item    arg0 - The pid of the weapon performing the attack. (May be -1 if the attack is unarmed)
        critter arg1 - The attacker
        critter arg2 - The target
        int     arg3 - The amount of damage
        int     arg4 - The death anim id calculated by Fallout

        int     ret0 - The death anim id to override with
        ```
    - name: HOOK_DEPRECATED HOOKS
      doc: |
        * `hs_hexmoveblocking.int`
        * `hs_hexaiblocking.int`
        * `hs_hexshootblocking.int`
        * `hs_hexsightblocking.int`

        Run when checking to see if a hex blocks movement or shooting. (or ai-ing, presumably...)

        __NOTE:__ these hook scripts can become very CPU-intensive and you should avoid using them.
        For this reason, they may be removed in future versions.
        If you want to check if some tile or path is blocked, use functions: `obj_blocking_tile`, `obj_blocking_line`, `path_find_to`.
        If you want script to be called every time NPC moves by hex in combat, use `hs_movecost hook`.
        ```
        Critter arg0 - the critter doing the moving
        int     arg1 - the tile number being checked
        int     arg2 - the elevation being checked
        int     arg3 - 1 if the hex would normally be blocking

        object* ret0 - 0 if the hex doesn't block, or any sort of object pointer if it does
        ```
    - name: HOOK_DESCRIPTIONOBJ
      doc: |
        Runs when using the examine action icon to display the description of an object. You can override the description text.
        An example usage would be to add an additional description to the item based on player's stats/skills.
        Does not run if the script of the object overrides the description.

        ```
        Obj     arg0 - the object

        int     ret0 - a pointer to the new text received by using "get_string_pointer" function
        ```
    - name: HOOK_ENCOUNTER
      doc: |
        Runs whenever a random encounter occurs (except the Horrigan meeting and scripted encounters), or when the player enters a local map from the world map.
        You can override the map for loading or the encounter.
        ```
        int     arg0 - event type: 0 - when a random encounter occurs, 1 - when the player enters from the world map
        int     arg1 - the map ID that the encounter will load (see MAPS.h or Maps.txt)
        int     arg2 - 1 when the encounter occurs is a special encounter, 0 otherwise

        int     ret0 - overrides the map ID, or pass -1 for event type 0 to cancel the encounter and continue traveling
        int     ret1 - pass 1 to cancel the encounter and load the specified map from the ret0 (only for event type 0)
        ```
    - name: HOOK_EXPLOSIVETIMER
      doc: |
        Runs after setting the explosive timer. You can override the result.

        ```
        int     arg0 - the time in ticks set in the timer
        Obj     arg1 - the explosive object
        int     arg2 - the result of engine calculation of whether the timer was set successfully: 1 - failure, 2 - success (similar to ROLL_* in Condtion.h)

        int     ret0 - overrides the time of the timer (maximum 18000 ticks)
        int     ret1 - overrides the result of engine calculation: 0/1 - failure, 2/3 - success (similar to ROLL_*), any other value - use engine handler
        ```
    - name: HOOK_FINDTARGET
      doc: |
        Runs when the AI is trying to pick a target in combat. Fallout first chooses a list of 4 likely suspects, then normally sorts them in order of weakness/distance/etc depending on the AI caps of the attacker
        This hook replaces that sorting function, allowing you to sort the targets in some arbitrary way.

        The return values can include critters that weren't in the list of possible targets, but the additional targets may still be discarded later on in the combat turn if they are out of the attackers perception or the chance of a successful hit is too low. The list of possible targets often includes duplicated entries.
        Use `sfall_return` to give the 4 targets, in order of preference. If you want to specify less than 4 targets, fill in the extra spaces with 0's or pass -1 to skip the return value.

        ```
        critter arg0 - The attacker
        critter arg1 - A possible target
        critter arg2 - A possible target
        critter arg3 - A possible target
        critter arg4 - A possible target

        critter ret0 - The first choice of target
        critter ret1 - The second choice of target
        critter ret2 - The third choice of target
        critter ret3 - The fourth choice of target
        ```
    - name: HOOK_GAMEMODECHANGE
      doc: |
        Runs once every time when the game mode was changed, like opening/closing the inventory, character screen, pipboy, etc.
        ```
        int     arg0 - event type: 1 - when the player exits the game, 0 - otherwise
        int     arg1 - the previous game mode
        ```
    - name: HOOK_INVENWIELD
      doc: |
        Runs before causing a critter or the player to wield/unwield an armor or a weapon (except when using the inventory by PC).
        An example usage would be to change critter art depending on armor being used or to dynamically customize weapon animations.
        NOTE: when replacing a previously wielded armor or weapon, the unwielding hook will not be executed.
        If you need to rely on this, try checking if armor/weapon is already equipped when wielding hook is executed.

        ```
        Critter arg0 - critter
        Obj     arg1 - item being wielded or unwielded (weapon/armor)
        int     arg2 - slot (INVEN_TYPE_*)
        int     arg3 - 1 when wielding, 0 when unwielding
        int     arg4 - 1 when removing an equipped item from inventory, 0 otherwise

        int     ret0 - overrides hard-coded handler (-1 - use engine handler, any other value - override) - NOT RECOMMENDED
        ```
    - name: HOOK_INVENTORYMOVE
      doc: |
        Runs before moving items between inventory slots in dude interface. You can override the action.
        What you can NOT do with this hook:
        - force moving items to inappropriate slots (like gun in armor slot)
        What you can do:
        - restrict player from using specific weapons or armors
        - add AP costs for all inventory movement including reloading
        - apply or remove some special scripted effects depending on PC's armor

        ```
        int     arg0 - Target slot (0 - main backpack, 1 - left hand, 2 - right hand, 3 - armor slot, 4 - weapon, when reloading it by dropping ammo, 5 - container, like bag/backpack, 6 - dropping on the ground, 7 - picking up item, 8 - dropping item on the character portrait)
        Item    arg1 - Item being moved
        Item    arg2 - Item being replaced, weapon being reloaded, or container being filled (can be 0)

        int     ret0 - Override setting (-1 - use engine handler, any other value - prevent relocation of item/reloading weapon/picking up item)
        ```
    - name: HOOK_ITEMDAMAGE
      doc: |
        Runs when retrieving the damage rating of the player's used weapon. (Which may be their fists.)
        ```
        int     arg0 - The default min damage
        int     arg1 - The default max damage
        Item    arg2 - The weapon used. (0 if unarmed)
        Critter arg3 - The critter doing the attacking
        int     arg4 - The type of attack
        int     arg5 - non-zero if this is an attack using a melee weapon

        int     ret0 - Either the damage to be used, if ret1 isn't given, or the new minimum damage if it is
        int     ret1 - The new maximum damage
        ```
    - name: HOOK_KEYPRESS
      doc: |
        Runs once every time when any key was pressed or released.
        * DX codes: (see dik.h header)
        * [VK codes](http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v=vs.85%29.aspx)

        __NOTE:__ if you want to override a key, the new key DX scancode should be the same for both pressed and released events.

        ```
        int     arg0 - event type: 1 - pressed, 0 - released
        int     arg1 - key DX scancode
        int     arg2 - key VK code (very similar to ASCII codes)

        int     ret0 - overrides the pressed key (a new key DX scancode or 0 for no override)
        ```
    - name: HOOK_MOUSECLICK
      doc: |
        Runs once every time when a mouse button was pressed or released.

        ```
        int     arg0 - event type: 1 - pressed, 0 - released
        int     arg1 - button number (0 - left, 1 - right, up to 7)
        ```
    - name: HOOK_MOVECOST
      doc: |
        Runs when calculating the AP cost of movement

        ```
        Critter arg0 - the critter doing the moving
        int     arg1 - the number of hexes being moved
        int     arg2 - the original AP cost

        int     ret0 - the new AP cost
        ```
    - name: HOOK_ONDEATH
      doc: |
        Runs immediately after a critter dies for any reason. No return values; this is just a convenience for when you need to do something after death for a large number of different critters and don't want to have to script each and every one of them.

        `Critter arg0 - The critter that just died`
    - name: HOOK_ONEXPLOSION
      doc: |
        Runs when Fallout is checking all the tiles within the explosion radius for targets before an explosion occurs.
        The tile checking will be interrupted when 6 additional targets (critters) are received.

        ```
        int     arg0 - event type: 1 - when checking objects within the explosion radius without causing damage (e.g. the player drops an active explosive), 0 - otherwise
        Critter arg1 - The attacker
        int     arg2 - The tile on which the explosion occurs
        int     arg3 - checked tile within the explosion radius
        Obj     arg4 - first found object on the checked tile as an additional target
        Critter arg5 - The target critter, may be 0 or equal to the attacker
        int     arg6 - 1 when using throwing weapons (e.g. grenades), 0 otherwise

        int     ret0 - overrides the found object on the checked tile, pass 0 to skip the object
        ```
    - name: HOOK_REMOVEINVENOBJ
      doc: |
        Runs when an object is removed from a container or critter's inventory for any reason.

        ```
        Obj     arg0 - the owner that the object is being removed from
        item    arg1 - the item that is being removed
        int     arg2 - the number of items to remove
        int     arg3 - The reason the object is being removed (see RMOBJ_* constants)
        Obj     arg4 - The destination object when the item is moved to another object, 0 otherwise
        ```
    - name: HOOK_RESTTIMER
      doc: |
        Runs continuously while the player is resting (using pipboy alarm clock).

        ```
        int     arg0 - the game time in ticks
        int     arg1 - event type: 1 - when the resting ends normally, -1 - when pressing ESC to cancel the timer, 0 - otherwise
        int     arg2 - the hour part of the length of resting time
        int     arg3 - the minute part of the length of resting time

        int     ret0 - pass 1 to interrupt the resting, pass 0 to continue the rest if it was interrupted by pressing ESC key
        ```
    - name: HOOK_ROLLCHECK
      doc: |
        Runs when a game event performs a random roll to check the chance of success or failure.
        ```
        int     arg0 - event type:
                       1 - checks the chance of an attack hitting the target
                       2 - checks the chance of a bullet from a burst hitting the target (for burst attacks)
                       3 - checks the chance when using skills (not listed below)
                       4 - check the chance of using Repair skill
                       5 - check the chance of using Doctor skill
                       6 - check the chance of using Steal skill for the thief (usually the player)
                       7 - the second Steal skill chance check for the target to catch the thief, in which the target's failure is the thief's success result
        int     arg1 - the value of roll result (see ROLL_* constants), which is calculated as:
                       for ROLL_CRITICAL_SUCCESS: random(1, 100) <= (random_chance / 10) + bonus
                       for ROLL_CRITICAL_FAILURE: random(1, 100) <= -random_chance / 10
        int     arg2 - the chance value
        int     arg3 - the bonus value, used when checking critical success
        int     arg4 - random chance (calculated as: chance - random(1, 100)), where a negative value is a failure check (ROLL_FAILURE)

        int     ret0 - overrides the roll result
        ```
    - name: HOOK_SETGLOBALVAR
      doc: |
        Runs when setting the value of a global variable.

        ```
        int     arg0 - the index number of the global variable being set
        int     arg1 - the set value of the global variable

        int     ret0 - overrides the value of the global variable
        ```
    - name: HOOK_SETLIGHTING
      doc: |
        Runs before setting the light level for an object or a map. You can override the result.

        ```
        Obj     arg0 - the object being set, or -1 when setting the light level for a map
        int     arg1 - the light intensity
        int     arg2 - the light radius, or -1 when setting the light level for a map

        int     ret0 - overrides the light intensity. Intensity range is from 0 to 65536
        int     ret1 - overrides the light radius. Radius range is from 0 to 8 (works only for the object)
        ```
    - name: HOOK_SNEAK
      doc: |
        Runs when the Sneak skill is activated, or when the game rolls another Sneak check after the duration for the current one is over.
        You can override the result of a random Sneak check or the duration time for the current result.

        ```
        int     arg0 - Sneak check result: 1 - success, 0 - failure
        int     arg1 - the duration in ticks for the current Sneak check (time depends on Sneak skill level)
        Critter arg2 - the critter (usually dude_obj)

        int     ret0 - overrides the result of the Sneak check
        int     ret1 - overrides the duration time for the current result
        ```
    - name: HOOK_STDPROCEDURE
      doc: |
        Runs before Fallout executes a standard procedure (handler) in any script of any object.
        NOTE: this hook will not be executed for `start`, `critter_p_proc`, `timed_event_p_proc`, and `map_update_p_proc` procedures.
        ```
        int     arg0 - the number of the standard script handler (see define.h)
        Obj     arg1 - the object that owns this handler (self_obj)
        Obj     arg2 - the object that called this handler (source_obj, can be 0)

        int     ret0 - pass -1 to cancel the execution of the handler
        ```
    - name: HOOK_STDPROCEDUREEND
      doc: |
        Runs after Fallout executes a standard procedure (handler) in any script of any object.
        NOTE: this hook will not be executed for `start`, `critter_p_proc`, `timed_event_p_proc`, and `map_update_p_proc` procedures.
        ```
        int     arg0 - the number of the standard script handler (see define.h)
        Obj     arg1 - the object that owns this handler (self_obj)
        Obj     arg2 - the object that called this handler (source_obj, can be 0)
        int     arg3 - 1 after procedure execution
        ```
    - name: HOOK_STEAL
      doc: |
        Runs when checking an attempt to steal or plant an item in other inventory using Steal skill.

        This is fired before the default handlers are called, which you can override. In this case you MUST provide message of the result to player ("You steal the %s", "You are caught planting the %s", etc.).
        Example message (vanilla behavior): `display_msg(sprintf(mstr_skill(570 + (isSuccess != false) + arg3*2), obj_name(arg2)))`;

        ```
        Critter arg0 - Thief
        Obj     arg1 - The target
        Item    arg2 - Item being stolen/planted
        int     arg3 - 0 when stealing, 1 when planting

        int     ret0 - overrides hard-coded handler (1 - force success, 0 - force fail, -1 - use engine handler)
        ```
    - name: HOOK_SUBCOMBATDAMAGE
      doc: |
        This hook overrides the vanilla damage calculation formula.
        Runs when:
        1. Before the game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts).
        1. AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.

        Does not run for misses, non-combat damage like dynamite explosions, or if one of the damage formulas is selected in ddraw.ini.

        ```
        Critter arg0 - the attacker
        Critter arg1 - the target
        Obj     arg2 - the weapon used in the attack
        int     arg3 - attack Type (see ATKTYPE_* constants)
        int     arg4 - number of bullets actually hit the target (1 for melee attacks)
        int     arg5 - target's Damage Resistance (DR) value (affected by critical hit effects, perks, traits, and special unarmed attacks)
        int     arg6 - target's Damage Threshold (DT) value (affected by critical hit effects, perks, traits, and special unarmed attacks)
        int     arg7 - bonus ranged damage from the perk
        int     arg8 - damage Multiplier (this is divided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2; for critical hits, the value is taken from the critical table; with Silent Death perk and the corresponding attack conditions, the value will be doubled)
        int     arg9 - combat Difficulty multiplier (125 - rough, 100 - normal, 75 - wimpy; for player or party members it's always 100)
        int     arg10 - the calculated amount of damage (usually 0, required when using multiple hook scripts to calculate damage and using the set_sfall_arg function)
        mixed   arg11 - computed attack data (see C_ATTACK_* for offsets and use get/set_object_data functions to get/set the data)

        int     ret0 - the returned amount of damage
        ```
    - name: HOOK_TARGETOBJECT
      doc: |
        Runs when the targeting cursor hovers over an object, or when the player tries to attack the target object.
        You can override the target object or prevent the player from attacking the chosen target.
        ```
        int     arg0 - event type: 0 - when the targeting cursor hovers over the object, 1 - when trying to attack the target object
        int     arg1 - 1 when the target object is valid to attack, 0 otherwise
        Obj     arg2 - the target object

        mixed   ret0 - overrides the target object, or pass -1 to prevent the player from attacking the object
        ```
    - name: HOOK_TOHIT
      doc: |
        Runs when Fallout is calculating the chances of an attack striking a target. Runs after the hit chance is fully calculated normally, including applying the 95% cap.

        ```
        int     arg0 - The hit chance (capped)
        critter arg1 - The attacker
        critter arg2 - The target of the attack
        int     arg3 - The targeted bodypart
        int     arg4 - Source tile (may differ from attacker's tile, when AI is considering potential fire position)
        int     arg5 - Attack Type (one of ATKTYPE_*)
        int     arg6 - Ranged flag. 1 means the hit chance is calculated by taking into account the bonuses/penalties of the distance to the target
        int     arg7 - The raw hit chance before applying the cap

        int     ret0 - the new hit chance
        ```
    - name: HOOK_USEANIMOBJ
      doc: |
        Runs before playing the "use" (usually "magic hands") animation when a critter uses a scenery/container object on the map, or before walking/running animation if the player is at a distance from the object.

        ```
        Critter arg0 - the critter that uses an object (usually dude_obj)
        Obj     arg1 - the object being used
        int     arg2 - the animation code being used (see ANIM_* in Animcomd.h)

        int     ret0 - overrides the animation code (pass -1 if you want to skip the animation)
        ```
    - name: HOOK_USEOBJ
      doc: |
        Runs when:
        1. a critter uses an object from inventory which have "Use" action flag set or it's an active flare or dynamite.
        2. player uses an object from main interface

        This is fired before the object is used, and the relevant use_obj script procedures are run. You can disable default item behavior.
        __NOTE:__ you can't remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1.

        ```
        Critter arg0 - The user
        int     arg1 - The object used

        int     ret0 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler)
        ```
    - name: HOOK_USEOBJON
      doc: |
        Runs when:
        1. a critter uses an object on another critter. (Or themselves)
        1. a critter uses an object from inventory screen AND this object does not have "Use" action flag set and it's not active flare or explosive.
        1. player or AI uses any drug

        This is fired before the object is used, and the relevant use_obj_on script procedures are run. You can disable default item behavior.
        NOTE: you can't remove and/or destroy this object during the hookscript (game will crash otherwise). To remove it, return 1.

        ```
        Critter arg0 - The target
        Critter arg1 - The user
        int     arg2 - The object used

        int     ret0 - overrides hard-coded handler and selects what should happen with the item (0 - place it back, 1 - remove it, -1 - use engine handler)
        ```
    - name: HOOK_USESKILL
      doc: |
        Runs when using any skill on any object.

        This is fired before the default handlers are called, which you can override. In this case you should write your own skill use handler entirely, or otherwise nothing will happen (this includes fade in/fade out, time lapsing and messages - all of this can be scripted; to get vanilla text messages - use `message_str_game()` along with `sprintf()`).
        Suggested use - override first aid/doctor skills to buff/nerf them, override steal skill to disallow observing NPCs inventories in some cases.
        Doesn't seem to run when lock picking.

        ```
        Critter arg0 - The user critter
        Obj     arg1 - The target object
        int     arg2 - skill being used
        int     arg3 - skill bonus from items such as first aid kits

        int     ret0 - overrides hard-coded handler (-1 - use engine handler, any other value - override)
        ```
    - name: HOOK_USESKILLON
      doc: |
        Runs before using any skill on any object. Lets you override the critter that uses the skill.
        __NOTE:__ the user critter can't be overridden when using Steal skill.

        ```
        Critter arg0 - the user critter (usually dude_obj)
        Obj     arg1 - the target object/critter
        int     arg2 - skill being used

        int     ret0 - a new critter to override the user critter. Pass -1 to cancel the skill use, pass 0 to skip this return value
        int     ret1 - pass 1 to allow the skill being used in combat (only for dude_obj or critter being controlled by the player)
        ```
    - name: HOOK_WITHINPERCEPTION
      doc: |
        Runs when checking if one critter sees another critter. This is used in different situations like combat AI. You can override the result.

        __NOTE:__ `obj_can_see_obj` calls this first when deciding if critter can possibly see another critter with regard to perception, lighting, sneak factors. If check fails, the end result is false. If check succeeds (e.g. critter is within perception range), another check is made if there is any blocking tile between two critters (which includes stuff like windows, large bushes, barrels, etc.) and if there is - check still fails. You can override "within perception" check by returning 0 or 1, OR, as a convenience, you can also override blocking check after the perception check by returning 2 instead. In this case you should add "line of sight" check inside your hook script, otherwise critters will detect you through walls.

        This is fired after the default calculation is made.

        ```
        Critter arg0 - Watcher object
        Obj     arg1 - Target object
        int     arg2 - Result of vanilla function: 1 - within perception range, 0 - otherwise
        int     arg3 - Type of hook:
            1 - when being called from obj_can_see_obj script function
            2 - when being called from obj_can_hear_obj script function (need to set ObjCanHearObjFix=1 in ddraw.ini)
            3 - when AI determines whether it sees a potential target when selecting attack targets
            0 - all other cases

        int     ret0 - overrides the returned result of the function: 0 - not in range (can't see), 1 - in range (will see if not blocked), 2 - forced detection (will see regardless, only used in obj_can_see_obj scripting function which is called by every critter in the game)
        ```
